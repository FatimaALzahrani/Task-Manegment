{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { getDatabase, ref as dbRef, onValue, push, update, remove } from \"firebase/database\";\nexport default {\n  name: \"Tasks\",\n  setup() {\n    const db = getDatabase();\n\n    // Task board columns\n    const columns = ref([{\n      id: \"tasks\",\n      name: \"لم تبدأ بعد\"\n    }, {\n      id: \"inprogress\",\n      name: \"يتم العمل عليها\"\n    }, {\n      id: \"review\",\n      name: \"تحتاج مراجعة\"\n    }, {\n      id: \"approved\",\n      name: \"تمت\"\n    }]);\n\n    // Available tags and users\n    const availableTags = ref([\"بحث\", \"كتابة\", \"تحليل\", \"تسجيل\", \"مراجعة\"]);\n    const users = ref([\"د. مها\", \"فاطمة\"]);\n\n    // Tasks data\n    const tasks = ref([]);\n    const selectedTask = ref(null);\n    const newComment = ref(\"\");\n\n    // Filters\n    const searchQuery = ref(\"\");\n    const filterPriority = ref(\"\");\n    const filterTag = ref(\"\");\n\n    // New task modal\n    const showAddTaskModal = ref(false);\n    const newTask = ref({\n      name: \"\",\n      description: \"\",\n      column: \"tasks\",\n      priority: \"متوسط\",\n      dueDate: \"\",\n      tags: [],\n      assignee: \"\",\n      comments: []\n    });\n\n    // Load tasks from Firebase\n    const loadTasks = () => {\n      const tasksRef = dbRef(db, \"tasks\");\n      onValue(tasksRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          tasks.value = Object.entries(data).map(([id, task]) => ({\n            id,\n            ...task,\n            comments: task.comments || [],\n            tags: task.tags || []\n          }));\n        } else {\n          tasks.value = [];\n        }\n      });\n    };\n\n    // Filter tasks by column\n    const getTasksForColumn = columnId => {\n      return tasks.value.filter(task => {\n        // Filter by column\n        if (task.column !== columnId) return false;\n\n        // Filter by search query\n        if (searchQuery.value && !task.name.includes(searchQuery.value) && !task.description.includes(searchQuery.value)) {\n          return false;\n        }\n\n        // Filter by priority\n        if (filterPriority.value && task.priority !== filterPriority.value) {\n          return false;\n        }\n\n        // Filter by tag\n        if (filterTag.value && (!task.tags || !task.tags.includes(filterTag.value))) {\n          return false;\n        }\n        return true;\n      });\n    };\n\n    // Task details\n    const openTaskDetails = task => {\n      selectedTask.value = {\n        ...task\n      };\n    };\n    const closeTaskDetails = () => {\n      selectedTask.value = null;\n      newComment.value = \"\";\n    };\n    const saveTaskChanges = () => {\n      if (!selectedTask.value) return;\n      const taskRef = dbRef(db, `tasks/${selectedTask.value.id}`);\n      update(taskRef, {\n        name: selectedTask.value.name,\n        description: selectedTask.value.description,\n        column: selectedTask.value.column,\n        priority: selectedTask.value.priority,\n        dueDate: selectedTask.value.dueDate,\n        tags: selectedTask.value.tags || [],\n        assignee: selectedTask.value.assignee,\n        comments: selectedTask.value.comments || []\n      });\n      closeTaskDetails();\n    };\n    const deleteTask = () => {\n      if (!selectedTask.value) return;\n      if (confirm(\"هل أنت متأكد من حذف هذه المهمة؟\")) {\n        const taskRef = dbRef(db, `tasks/${selectedTask.value.id}`);\n        remove(taskRef);\n        closeTaskDetails();\n      }\n    };\n    const addComment = () => {\n      if (!newComment.value.trim() || !selectedTask.value) return;\n      if (!selectedTask.value.comments) {\n        selectedTask.value.comments = [];\n      }\n      selectedTask.value.comments.push(newComment.value.trim());\n      newComment.value = \"\";\n    };\n\n    // Tag management\n    const toggleTag = tag => {\n      if (!selectedTask.value) return;\n      if (!selectedTask.value.tags) {\n        selectedTask.value.tags = [];\n      }\n      const index = selectedTask.value.tags.indexOf(tag);\n      if (index === -1) {\n        selectedTask.value.tags.push(tag);\n      } else {\n        selectedTask.value.tags.splice(index, 1);\n      }\n    };\n    const toggleNewTaskTag = tag => {\n      const index = newTask.value.tags.indexOf(tag);\n      if (index === -1) {\n        newTask.value.tags.push(tag);\n      } else {\n        newTask.value.tags.splice(index, 1);\n      }\n    };\n\n    // Add new task\n    const addNewTask = () => {\n      if (!newTask.value.name.trim()) {\n        alert(\"يرجى إدخال اسم المهمة\");\n        return;\n      }\n      const tasksRef = dbRef(db, \"tasks\");\n      push(tasksRef, {\n        name: newTask.value.name,\n        description: newTask.value.description,\n        column: newTask.value.column,\n        priority: newTask.value.priority,\n        dueDate: newTask.value.dueDate,\n        tags: newTask.value.tags,\n        assignee: newTask.value.assignee,\n        comments: newTask.value.comments,\n        dateCreated: new Date().toISOString()\n      });\n\n      // Reset form\n      newTask.value = {\n        name: \"\",\n        description: \"\",\n        column: \"tasks\",\n        priority: \"متوسط\",\n        dueDate: \"\",\n        tags: [],\n        assignee: \"\",\n        comments: []\n      };\n      showAddTaskModal.value = false;\n    };\n\n    // Helper functions\n    const truncateText = (text, maxLength) => {\n      if (!text) return \"\";\n      return text.length > maxLength ? text.substring(0, maxLength) + \"...\" : text;\n    };\n    const getPriorityClass = priority => {\n      switch (priority) {\n        case \"عاجل\":\n          return \"bg-red-100 text-red-800\";\n        case \"متوسط\":\n          return \"bg-yellow-100 text-yellow-800\";\n        case \"منخفض\":\n          return \"bg-green-100 text-green-800\";\n        default:\n          return \"bg-gray-100 text-gray-800\";\n      }\n    };\n\n    // Initialize\n    onMounted(() => {\n      loadTasks();\n\n      // Initialize drag and drop (would be implemented with vuedraggable in a real app)\n      // This is a placeholder for the actual implementation\n      console.log(\"Drag and drop would be initialized here\");\n    });\n    return {\n      columns,\n      tasks,\n      selectedTask,\n      newComment,\n      searchQuery,\n      filterPriority,\n      filterTag,\n      availableTags,\n      users,\n      showAddTaskModal,\n      newTask,\n      getTasksForColumn,\n      openTaskDetails,\n      closeTaskDetails,\n      saveTaskChanges,\n      deleteTask,\n      addComment,\n      toggleTag,\n      toggleNewTaskTag,\n      addNewTask,\n      truncateText,\n      getPriorityClass\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}