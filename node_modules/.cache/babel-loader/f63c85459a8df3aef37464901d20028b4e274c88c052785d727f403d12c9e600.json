{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { defineStore } from 'pinia';\nimport { dataService } from '@/services/firebase';\nexport const useDataStore = defineStore({\n  id: 'data',\n  state: () => ({\n    children: [],\n    wordData: {},\n    words: [],\n    loading: false,\n    error: null,\n    selectedChild: null,\n    averageDuration: 3.5 // Default value\n  }),\n  getters: {\n    completionPercentage: state => {\n      if (state.children.length === 0 || state.words.length === 0) return 0;\n      let totalWords = state.children.length * state.words.length;\n      let completedWords = 0;\n      state.children.forEach(child => {\n        state.words.forEach(word => {\n          if (state.wordData[child.id] && state.wordData[child.id][word] && state.wordData[child.id][word].done) {\n            completedWords++;\n          }\n        });\n      });\n      return Math.round(completedWords / totalWords * 100);\n    }\n  },\n  actions: {\n    async fetchChildren() {\n      this.loading = true;\n      this.error = null;\n      try {\n        dataService.getChildren(children => {\n          this.children = children;\n          this.loading = false;\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    async fetchWordData() {\n      this.loading = true;\n      this.error = null;\n      try {\n        dataService.getWordData(data => {\n          this.wordData = data;\n\n          // Extract unique words\n          const allWords = new Set();\n          Object.values(data).forEach(childWords => {\n            Object.keys(childWords).forEach(word => {\n              allWords.add(word);\n            });\n          });\n          this.words = Array.from(allWords);\n          this.loading = false;\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    async saveChild(childId, childData) {\n      this.loading = true;\n      this.error = null;\n      try {\n        await dataService.saveChild(childId, childData);\n        this.loading = false;\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    async deleteChild(childId) {\n      this.loading = true;\n      this.error = null;\n      try {\n        await dataService.deleteChild(childId);\n        this.loading = false;\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    async addWord(word) {\n      this.loading = true;\n      this.error = null;\n      try {\n        await dataService.addWord(word, this.children);\n        this.loading = false;\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    async updateWordData(childId, word, data) {\n      this.error = null;\n      try {\n        await dataService.updateWordData(childId, word, data);\n      } catch (error) {\n        this.error = error.message;\n      }\n    },\n    getWordLevel(childId, word) {\n      if (!this.wordData[childId] || !this.wordData[childId][word]) return 'ضعيف';\n      return this.wordData[childId][word].level || 'ضعيف';\n    },\n    isWordDone(childId, word) {\n      if (!this.wordData[childId] || !this.wordData[childId][word]) return false;\n      return this.wordData[childId][word].done || false;\n    },\n    setSelectedChild(child) {\n      this.selectedChild = child ? {\n        ...child\n      } : null;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","dataService","useDataStore","id","state","children","wordData","words","loading","error","selectedChild","averageDuration","getters","completionPercentage","length","totalWords","completedWords","forEach","child","word","done","Math","round","actions","fetchChildren","getChildren","message","fetchWordData","getWordData","data","allWords","Set","Object","values","childWords","keys","add","Array","from","saveChild","childId","childData","deleteChild","addWord","updateWordData","getWordLevel","level","isWordDone","setSelectedChild"],"sources":["C:/Users/فاطمة الزهراني/Downloads/research-task-manager-updated/task-manager/src/store/dataStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { dataService } from '@/services/firebase';\n\nexport const useDataStore = defineStore({\n  id: 'data',\n  \n  state: () => ({\n    children: [],\n    wordData: {},\n    words: [],\n    loading: false,\n    error: null,\n    selectedChild: null,\n    averageDuration: 3.5 // Default value\n  }),\n  \n  getters: {\n    completionPercentage: (state) => {\n      if (state.children.length === 0 || state.words.length === 0) return 0;\n      \n      let totalWords = state.children.length * state.words.length;\n      let completedWords = 0;\n      \n      state.children.forEach(child => {\n        state.words.forEach(word => {\n          if (state.wordData[child.id] && \n              state.wordData[child.id][word] && \n              state.wordData[child.id][word].done) {\n            completedWords++;\n          }\n        });\n      });\n      \n      return Math.round((completedWords / totalWords) * 100);\n    }\n  },\n  \n  actions: {\n    async fetchChildren() {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        dataService.getChildren((children) => {\n          this.children = children;\n          this.loading = false;\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    \n    async fetchWordData() {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        dataService.getWordData((data) => {\n          this.wordData = data;\n          \n          // Extract unique words\n          const allWords = new Set();\n          Object.values(data).forEach(childWords => {\n            Object.keys(childWords).forEach(word => {\n              allWords.add(word);\n            });\n          });\n          \n          this.words = Array.from(allWords);\n          this.loading = false;\n        });\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    \n    async saveChild(childId, childData) {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        await dataService.saveChild(childId, childData);\n        this.loading = false;\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    \n    async deleteChild(childId) {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        await dataService.deleteChild(childId);\n        this.loading = false;\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    \n    async addWord(word) {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        await dataService.addWord(word, this.children);\n        this.loading = false;\n      } catch (error) {\n        this.error = error.message;\n        this.loading = false;\n      }\n    },\n    \n    async updateWordData(childId, word, data) {\n      this.error = null;\n      \n      try {\n        await dataService.updateWordData(childId, word, data);\n      } catch (error) {\n        this.error = error.message;\n      }\n    },\n    \n    getWordLevel(childId, word) {\n      if (!this.wordData[childId] || !this.wordData[childId][word]) return 'ضعيف';\n      return this.wordData[childId][word].level || 'ضعيف';\n    },\n    \n    isWordDone(childId, word) {\n      if (!this.wordData[childId] || !this.wordData[childId][word]) return false;\n      return this.wordData[childId][word].done || false;\n    },\n    \n    setSelectedChild(child) {\n      this.selectedChild = child ? { ...child } : null;\n    }\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}