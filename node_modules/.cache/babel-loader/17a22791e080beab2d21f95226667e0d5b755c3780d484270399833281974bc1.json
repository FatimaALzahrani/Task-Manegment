{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted } from 'vue';\nimport { getDatabase, ref as dbRef, onValue, push, update, remove } from 'firebase/database';\nexport default {\n  name: 'CodeLinks',\n  setup() {\n    const db = getDatabase();\n\n    // Codes data\n    const codes = ref([]);\n    const selectedCode = ref(null);\n\n    // New code modal\n    const showAddCodeModal = ref(false);\n    const newCode = ref({\n      title: '',\n      link: '',\n      description: '',\n      type: 'github',\n      language: 'Python',\n      notes: ''\n    });\n\n    // Load codes from Firebase\n    const loadCodes = () => {\n      const codesRef = dbRef(db, 'codes');\n      onValue(codesRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          codes.value = Object.entries(data).map(([id, code]) => ({\n            id,\n            ...code,\n            notes: code.notes || ''\n          }));\n        } else {\n          codes.value = [];\n        }\n      });\n    };\n\n    // Code details\n    const openCodeDetails = code => {\n      selectedCode.value = {\n        ...code\n      };\n    };\n    const closeDetails = () => {\n      selectedCode.value = null;\n    };\n    const saveCodeChanges = () => {\n      if (!selectedCode.value) return;\n      const codeRef = dbRef(db, `codes/${selectedCode.value.id}`);\n      update(codeRef, {\n        title: selectedCode.value.title,\n        link: selectedCode.value.link,\n        description: selectedCode.value.description,\n        type: selectedCode.value.type,\n        language: selectedCode.value.language,\n        notes: selectedCode.value.notes || ''\n      });\n      closeDetails();\n    };\n    const deleteCode = () => {\n      if (!selectedCode.value) return;\n      if (confirm('هل أنت متأكد من حذف هذا الرابط؟')) {\n        const codeRef = dbRef(db, `codes/${selectedCode.value.id}`);\n        remove(codeRef);\n        closeDetails();\n      }\n    };\n\n    // Add new code\n    const addNewCode = () => {\n      if (!newCode.value.title.trim() || !newCode.value.link.trim() || !newCode.value.description.trim()) {\n        alert('يرجى ملء جميع الحقول المطلوبة');\n        return;\n      }\n\n      // Save code data to Firebase Database\n      const codesRef = dbRef(db, 'codes');\n      push(codesRef, {\n        title: newCode.value.title,\n        link: newCode.value.link,\n        description: newCode.value.description,\n        type: newCode.value.type,\n        language: newCode.value.language,\n        notes: newCode.value.notes || '',\n        timestamp: Date.now()\n      });\n\n      // Reset form\n      newCode.value = {\n        title: '',\n        link: '',\n        description: '',\n        type: 'github',\n        language: 'Python',\n        notes: ''\n      };\n      showAddCodeModal.value = false;\n    };\n\n    // Helper functions\n    const formatDate = timestamp => {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      return date.toLocaleDateString('ar-EG');\n    };\n    const getCodeTypeClass = type => {\n      switch (type) {\n        case 'github':\n          return 'bg-gray-800';\n        case 'colab':\n          return 'bg-yellow-600';\n        case 'kaggle':\n          return 'bg-blue-600';\n        default:\n          return 'bg-purple-600';\n      }\n    };\n    const getCodeTypeIcon = type => {\n      switch (type) {\n        case 'github':\n          return 'fa-github';\n        case 'colab':\n          return 'fa-google';\n        case 'kaggle':\n          return 'fa-kaggle';\n        default:\n          return 'fa-code';\n      }\n    };\n\n    // Initialize\n    onMounted(() => {\n      loadCodes();\n    });\n    return {\n      codes,\n      selectedCode,\n      showAddCodeModal,\n      newCode,\n      openCodeDetails,\n      closeDetails,\n      saveCodeChanges,\n      deleteCode,\n      addNewCode,\n      formatDate,\n      getCodeTypeClass,\n      getCodeTypeIcon\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}