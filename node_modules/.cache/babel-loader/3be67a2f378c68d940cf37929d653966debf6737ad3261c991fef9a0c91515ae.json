{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, onMounted, computed } from \"vue\";\nimport { taskService, literatureService, dataService } from \"../services/firebase\";\nexport default {\n  name: \"Home\",\n  setup() {\n    // Data states\n    const tasks = ref([]);\n    const papers = ref([]);\n    const children = ref([]);\n    const updates = ref([]);\n    const loading = ref(true);\n\n    // Computed values\n    const totalTasks = computed(() => tasks.value.length);\n    const completedTasks = computed(() => tasks.value.filter(task => task.status === \"done\" || task.column === \"done\").length);\n    const completionPercentage = computed(() => {\n      if (totalTasks.value === 0) return 0;\n      return Math.round(completedTasks.value / totalTasks.value * 100);\n    });\n    const papersCount = computed(() => papers.value.length);\n    const participantsCount = computed(() => children.value.length);\n\n    // Task categories with dynamic percentages\n    const taskCategories = computed(() => {\n      // Define categories and their corresponding tags or identifiers\n      const categories = [{\n        name: \"جمع البيانات\",\n        tags: [\"جمع البيانات\", \"تسجيل\", \"مقابلة\"],\n        icon: \"fa-database\",\n        bgColor: \"bg-blue-500\",\n        barColor: \"bg-blue-500\"\n      }, {\n        name: \"تحليل البيانات\",\n        tags: [\"تحليل\", \"إحصاء\", \"معالجة\"],\n        icon: \"fa-chart-bar\",\n        bgColor: \"bg-green-500\",\n        barColor: \"bg-green-500\"\n      }, {\n        name: \"كتابة البحث\",\n        tags: [\"كتابة\", \"توثيق\", \"مراجعة أدبية\"],\n        icon: \"fa-pen\",\n        bgColor: \"bg-purple-500\",\n        barColor: \"bg-purple-500\"\n      }, {\n        name: \"المراجعة\",\n        tags: [\"مراجعة\", \"تدقيق\", \"تصحيح\"],\n        icon: \"fa-check\",\n        bgColor: \"bg-yellow-500\",\n        barColor: \"bg-yellow-500\"\n      }];\n\n      // Calculate completion percentage for each category\n      return categories.map(category => {\n        // Filter tasks that belong to this category\n        const categoryTasks = tasks.value.filter(task => {\n          // Check if task has any tag that matches this category\n          if (task.tags && Array.isArray(task.tags)) {\n            return task.tags.some(tag => category.tags.includes(tag));\n          }\n          // Check if task title or description contains category keywords\n          return category.tags.some(tag => task.title && task.title.includes(tag) || task.description && task.description.includes(tag));\n        });\n\n        // Calculate completion percentage\n        const totalCategoryTasks = categoryTasks.length;\n        const completedCategoryTasks = categoryTasks.filter(task => task.status === \"done\" || task.column === \"done\").length;\n        const percentage = totalCategoryTasks > 0 ? Math.round(completedCategoryTasks / totalCategoryTasks * 100) : 0;\n        return {\n          ...category,\n          percentage\n        };\n      });\n    });\n\n    // Get upcoming tasks (not completed, sorted by due date)\n    const upcomingTasks = computed(() => {\n      return tasks.value.filter(task => task.status !== \"done\" && task.column !== \"done\" && task.dueDate).sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate)).slice(0, 3); // Get only the first 3 upcoming tasks\n    });\n\n    // Get recent papers (sorted by timestamp, newest first)\n    const recentPapers = computed(() => {\n      return [...papers.value].sort((a, b) => {\n        const dateA = a.timestamp || new Date(a.year).getTime();\n        const dateB = b.timestamp || new Date(b.year).getTime();\n        return dateB - dateA;\n      }).slice(0, 3); // Get only the first 3 recent papers\n    });\n\n    // Generate recent updates based on tasks and papers\n    const recentUpdates = computed(() => {\n      const taskUpdates = tasks.value.filter(task => task.dateCreated || task.lastModified).map(task => ({\n        id: task.id,\n        title: `تم ${task.status === \"done\" || task.column === \"done\" ? \"إكمال\" : \"تحديث\"} مهمة: ${task.title || task.name}`,\n        description: task.description || \"تم تحديث حالة المهمة\",\n        timestamp: task.lastModified || task.dateCreated,\n        type: \"task\"\n      }));\n      const paperUpdates = papers.value.filter(paper => paper.timestamp).map(paper => ({\n        id: paper.id,\n        title: `تمت إضافة ورقة علمية جديدة`,\n        description: paper.title,\n        timestamp: paper.timestamp,\n        type: \"paper\"\n      }));\n\n      // Combine and sort all updates by timestamp (newest first)\n      return [...taskUpdates, ...paperUpdates].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0, 3); // Get only the first 3 recent updates\n    });\n\n    // Helper functions\n    const formatDate = dateString => {\n      if (!dateString) return \"غير محدد\";\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return dateString; // Return as is if invalid date\n\n      // Format date in Arabic style\n      const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      };\n      return date.toLocaleDateString(\"ar-SA\", options);\n    };\n    const getPriorityClass = priority => {\n      switch (priority?.toLowerCase()) {\n        case \"high\":\n        case \"عالي\":\n        case \"عاجل\":\n          return \"bg-red-100 text-red-800\";\n        case \"medium\":\n        case \"متوسط\":\n          return \"bg-yellow-100 text-yellow-800\";\n        case \"low\":\n        case \"منخفض\":\n          return \"bg-green-100 text-green-800\";\n        default:\n          return \"bg-gray-100 text-gray-800\";\n      }\n    };\n    const getUpdateBorderColor = type => {\n      switch (type) {\n        case \"task\":\n          return \"border-blue-500\";\n        case \"paper\":\n          return \"border-green-500\";\n        case \"child\":\n          return \"border-purple-500\";\n        default:\n          return \"border-gray-500\";\n      }\n    };\n\n    // Fetch data from Firebase\n    onMounted(() => {\n      loading.value = true;\n\n      // Helper function to check if all data is loaded\n      const checkLoading = () => {\n        if (tasks.value !== undefined && papers.value !== undefined && children.value !== undefined) {\n          loading.value = false;\n        }\n      };\n\n      // Fetch tasks\n      taskService.getTasks(data => {\n        tasks.value = data;\n        checkLoading();\n      }, error => {\n        console.error(\"خطأ في تحميل المهام:\", error);\n        loading.value = false;\n      });\n\n      // Fetch papers\n      literatureService.getPapers(data => {\n        papers.value = data;\n        checkLoading();\n      });\n\n      // Fetch children\n      dataService.getChildren(data => {\n        children.value = data;\n        checkLoading();\n      });\n    });\n    return {\n      // Data\n      tasks,\n      papers,\n      children,\n      loading,\n      // Computed values\n      totalTasks,\n      completedTasks,\n      completionPercentage,\n      papersCount,\n      participantsCount,\n      taskCategories,\n      upcomingTasks,\n      recentPapers,\n      recentUpdates,\n      // Helper functions\n      formatDate,\n      getPriorityClass,\n      getUpdateBorderColor\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}