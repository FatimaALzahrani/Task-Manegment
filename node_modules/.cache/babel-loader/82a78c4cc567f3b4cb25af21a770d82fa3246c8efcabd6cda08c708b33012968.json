{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { Chart, registerables } from 'chart.js';\nimport { commonTestWords, speechEvaluationCriteria } from '@/data/downSyndromeData';\nimport { useDataStore } from '@/store/dataStore';\n\n// Register Chart.js components\nChart.register(...registerables);\nexport default {\n  name: 'SpeechAnalysis',\n  setup() {\n    const dataStore = useDataStore();\n\n    // Chart references\n    const categoryChart = ref(null);\n    const difficultyChart = ref(null);\n    const progressChart = ref(null);\n\n    // Data\n    const testWords = ref([...commonTestWords]);\n    const evaluationCriteria = ref([...speechEvaluationCriteria]);\n    const childrenData = ref([]);\n    const wordPerformance = ref({});\n\n    // Filters\n    const searchQuery = ref('');\n    const filterCategory = ref('');\n    const filterDifficulty = ref('');\n\n    // Computed properties\n    const categories = computed(() => {\n      const uniqueCategories = new Set(testWords.value.map(word => word.category));\n      return Array.from(uniqueCategories);\n    });\n    const filteredWords = computed(() => {\n      return testWords.value.filter(word => {\n        // Filter by search query\n        if (searchQuery.value && !word.word.includes(searchQuery.value)) {\n          return false;\n        }\n\n        // Filter by category\n        if (filterCategory.value && word.category !== filterCategory.value) {\n          return false;\n        }\n\n        // Filter by difficulty\n        if (filterDifficulty.value && word.difficulty !== filterDifficulty.value) {\n          return false;\n        }\n        return true;\n      });\n    });\n    const averageAge = computed(() => {\n      if (childrenData.value.length === 0) return 0;\n      const sum = childrenData.value.reduce((total, child) => total + parseInt(child.age), 0);\n      return (sum / childrenData.value.length).toFixed(1);\n    });\n    const masteryPercentage = computed(() => {\n      if (childrenData.value.length === 0 || testWords.value.length === 0) return 0;\n      let totalAssessments = 0;\n      let excellentCount = 0;\n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          totalAssessments++;\n          if (getWordPerformance(child.id, word.word) === 'ممتاز') {\n            excellentCount++;\n          }\n        });\n      });\n      return Math.round(excellentCount / totalAssessments * 100);\n    });\n\n    // Methods\n    const getWordPerformance = (childId, word) => {\n      if (!wordPerformance.value[childId] || !wordPerformance.value[childId][word]) {\n        return 'ضعيف';\n      }\n      return wordPerformance.value[childId][word];\n    };\n    const initCharts = () => {\n      // Category Chart\n      const categoryData = {};\n      categories.value.forEach(category => {\n        categoryData[category] = {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        };\n      });\n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          const performance = getWordPerformance(child.id, word.word);\n          if (performance === 'ممتاز') {\n            categoryData[word.category].excellent++;\n          } else if (performance === 'متوسط') {\n            categoryData[word.category].average++;\n          } else {\n            categoryData[word.category].poor++;\n          }\n        });\n      });\n      new Chart(categoryChart.value, {\n        type: 'bar',\n        data: {\n          labels: categories.value,\n          datasets: [{\n            label: 'ممتاز',\n            data: categories.value.map(category => categoryData[category].excellent),\n            backgroundColor: 'rgba(34, 197, 94, 0.7)',\n            borderColor: 'rgba(34, 197, 94, 1)',\n            borderWidth: 1\n          }, {\n            label: 'متوسط',\n            data: categories.value.map(category => categoryData[category].average),\n            backgroundColor: 'rgba(234, 179, 8, 0.7)',\n            borderColor: 'rgba(234, 179, 8, 1)',\n            borderWidth: 1\n          }, {\n            label: 'ضعيف',\n            data: categories.value.map(category => categoryData[category].poor),\n            backgroundColor: 'rgba(239, 68, 68, 0.7)',\n            borderColor: 'rgba(239, 68, 68, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true\n            }\n          }\n        }\n      });\n\n      // Difficulty Chart\n      const difficultyData = {\n        easy: {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        },\n        medium: {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        },\n        hard: {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        }\n      };\n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          const performance = getWordPerformance(child.id, word.word);\n          const difficulty = word.difficulty === 'سهل' ? 'easy' : word.difficulty === 'متوسط' ? 'medium' : 'hard';\n          if (performance === 'ممتاز') {\n            difficultyData[difficulty].excellent++;\n          } else if (performance === 'متوسط') {\n            difficultyData[difficulty].average++;\n          } else {\n            difficultyData[difficulty].poor++;\n          }\n        });\n      });\n      new Chart(difficultyChart.value, {\n        type: 'pie',\n        data: {\n          labels: ['سهل - ممتاز', 'سهل - متوسط', 'سهل - ضعيف', 'متوسط - ممتاز', 'متوسط - متوسط', 'متوسط - ضعيف', 'صعب - ممتاز', 'صعب - متوسط', 'صعب - ضعيف'],\n          datasets: [{\n            data: [difficultyData.easy.excellent, difficultyData.easy.average, difficultyData.easy.poor, difficultyData.medium.excellent, difficultyData.medium.average, difficultyData.medium.poor, difficultyData.hard.excellent, difficultyData.hard.average, difficultyData.hard.poor],\n            backgroundColor: ['rgba(34, 197, 94, 0.9)', 'rgba(34, 197, 94, 0.6)', 'rgba(34, 197, 94, 0.3)', 'rgba(234, 179, 8, 0.9)', 'rgba(234, 179, 8, 0.6)', 'rgba(234, 179, 8, 0.3)', 'rgba(239, 68, 68, 0.9)', 'rgba(239, 68, 68, 0.6)', 'rgba(239, 68, 68, 0.3)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n\n      // Progress Chart\n      const childrenNames = childrenData.value.map(child => child.name);\n      const childrenProgress = childrenData.value.map(child => {\n        let excellentCount = 0;\n        let totalWords = testWords.value.length;\n        testWords.value.forEach(word => {\n          if (getWordPerformance(child.id, word.word) === 'ممتاز') {\n            excellentCount++;\n          }\n        });\n        return excellentCount / totalWords * 100;\n      });\n      new Chart(progressChart.value, {\n        type: 'bar',\n        data: {\n          labels: childrenNames,\n          datasets: [{\n            label: 'نسبة التقدم',\n            data: childrenProgress,\n            backgroundColor: 'rgba(59, 130, 246, 0.7)',\n            borderColor: 'rgba(59, 130, 246, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100\n            }\n          }\n        }\n      });\n    };\n    const exportData = () => {\n      // In a real app, this would export data to CSV or Excel\n      alert('سيتم تصدير البيانات (هذه وظيفة تجريبية)');\n    };\n    const generateReport = () => {\n      // In a real app, this would generate a detailed report\n      alert('سيتم إنشاء تقرير مفصل (هذه وظيفة تجريبية)');\n    };\n\n    // Initialize\n    onMounted(() => {\n      // Load children data\n      dataStore.fetchChildren().then(() => {\n        childrenData.value = dataStore.children;\n\n        // Generate random performance data for demo\n        childrenData.value.forEach(child => {\n          wordPerformance.value[child.id] = {};\n          testWords.value.forEach(word => {\n            const rand = Math.random();\n            let performance;\n            if (word.difficulty === 'سهل') {\n              performance = rand < 0.7 ? 'ممتاز' : rand < 0.9 ? 'متوسط' : 'ضعيف';\n            } else if (word.difficulty === 'متوسط') {\n              performance = rand < 0.4 ? 'ممتاز' : rand < 0.8 ? 'متوسط' : 'ضعيف';\n            } else {\n              performance = rand < 0.2 ? 'ممتاز' : rand < 0.6 ? 'متوسط' : 'ضعيف';\n            }\n            wordPerformance.value[child.id][word.word] = performance;\n          });\n        });\n\n        // Initialize charts after data is loaded\n        setTimeout(() => {\n          initCharts();\n        }, 500);\n      });\n    });\n    return {\n      testWords,\n      evaluationCriteria,\n      childrenData,\n      searchQuery,\n      filterCategory,\n      filterDifficulty,\n      categories,\n      filteredWords,\n      averageAge,\n      masteryPercentage,\n      categoryChart,\n      difficultyChart,\n      progressChart,\n      getWordPerformance,\n      exportData,\n      generateReport\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","Chart","registerables","commonTestWords","speechEvaluationCriteria","useDataStore","register","name","setup","dataStore","categoryChart","difficultyChart","progressChart","testWords","evaluationCriteria","childrenData","wordPerformance","searchQuery","filterCategory","filterDifficulty","categories","uniqueCategories","Set","value","map","word","category","Array","from","filteredWords","filter","includes","difficulty","averageAge","length","sum","reduce","total","child","parseInt","age","toFixed","masteryPercentage","totalAssessments","excellentCount","forEach","getWordPerformance","id","Math","round","childId","initCharts","categoryData","excellent","average","poor","performance","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","x","stacked","y","difficultyData","easy","medium","hard","childrenNames","childrenProgress","totalWords","beginAtZero","max","exportData","alert","generateReport","fetchChildren","then","children","rand","random","setTimeout"],"sources":["C:\\Users\\فاطمة الزهراني\\Downloads\\research-task-manager-updated\\task-manager\\src\\views\\SpeechAnalysis.vue"],"sourcesContent":["<template>\n  <div class=\"fade-in\">\n    <div class=\"flex justify-between items-center mb-6\">\n      <h1 class=\"text-2xl font-bold text-gray-800\">تحليل بيانات النطق</h1>\n      <div class=\"flex space-x-2 space-x-reverse\">\n        <button @click=\"exportData\" class=\"btn btn-secondary ml-2\">\n          <i class=\"fas fa-download ml-2\"></i>تصدير البيانات\n        </button>\n        <button @click=\"generateReport\" class=\"btn btn-primary\">\n          <i class=\"fas fa-chart-bar ml-2\"></i>إنشاء تقرير\n        </button>\n      </div>\n    </div>\n    \n    <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n      <div class=\"dashboard-card\">\n        <h3 class=\"text-lg font-semibold text-gray-700 mb-2\">إجمالي الأطفال</h3>\n        <p class=\"dashboard-stat\">{{ childrenData.length }}</p>\n        <p class=\"text-sm text-gray-500 mt-2\">عدد الأطفال المشاركين في الدراسة</p>\n      </div>\n      \n      <div class=\"dashboard-card\">\n        <h3 class=\"text-lg font-semibold text-gray-700 mb-2\">متوسط العمر</h3>\n        <p class=\"dashboard-stat\">{{ averageAge }} سنوات</p>\n        <p class=\"text-sm text-gray-500 mt-2\">متوسط عمر الأطفال المشاركين</p>\n      </div>\n      \n      <div class=\"dashboard-card\">\n        <h3 class=\"text-lg font-semibold text-gray-700 mb-2\">نسبة إتقان الكلمات</h3>\n        <p class=\"dashboard-stat\">{{ masteryPercentage }}%</p>\n        <p class=\"text-sm text-gray-500 mt-2\">نسبة الكلمات التي تم إتقانها</p>\n      </div>\n    </div>\n    \n    <div class=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n      <h2 class=\"text-xl font-bold text-gray-800 mb-4\">تحليل الكلمات حسب الفئة</h2>\n      <div class=\"h-80\">\n        <canvas ref=\"categoryChart\"></canvas>\n      </div>\n    </div>\n    \n    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n      <div class=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 class=\"text-xl font-bold text-gray-800 mb-4\">تحليل الكلمات حسب الصعوبة</h2>\n        <div class=\"h-64\">\n          <canvas ref=\"difficultyChart\"></canvas>\n        </div>\n      </div>\n      \n      <div class=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 class=\"text-xl font-bold text-gray-800 mb-4\">تقدم الأطفال</h2>\n        <div class=\"h-64\">\n          <canvas ref=\"progressChart\"></canvas>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n      <h2 class=\"text-xl font-bold text-gray-800 mb-4\">جدول مقارنة أداء الأطفال</h2>\n      \n      <div class=\"mb-4 flex flex-wrap gap-4\">\n        <div class=\"relative\">\n          <input \n            type=\"text\" \n            v-model=\"searchQuery\" \n            placeholder=\"بحث...\" \n            class=\"form-input py-2 pl-10 pr-4\"\n          >\n          <i class=\"fas fa-search absolute right-3 top-3 text-gray-400\"></i>\n        </div>\n        \n        <select v-model=\"filterCategory\" class=\"form-input py-2\">\n          <option value=\"\">كل الفئات</option>\n          <option v-for=\"category in categories\" :key=\"category\" :value=\"category\">{{ category }}</option>\n        </select>\n        \n        <select v-model=\"filterDifficulty\" class=\"form-input py-2\">\n          <option value=\"\">كل مستويات الصعوبة</option>\n          <option value=\"سهل\">سهل</option>\n          <option value=\"متوسط\">متوسط</option>\n          <option value=\"صعب\">صعب</option>\n        </select>\n      </div>\n      \n      <div class=\"responsive-table\">\n        <table class=\"min-w-full divide-y divide-gray-200\">\n          <thead>\n            <tr>\n              <th class=\"px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                الكلمة\n              </th>\n              <th class=\"px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                الفئة\n              </th>\n              <th class=\"px-6 py-3 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                الصعوبة\n              </th>\n              <th v-for=\"child in childrenData\" :key=\"child.id\" class=\"px-6 py-3 bg-gray-50 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                {{ child.name }}\n              </th>\n            </tr>\n          </thead>\n          <tbody class=\"bg-white divide-y divide-gray-200\">\n            <tr v-for=\"word in filteredWords\" :key=\"word.word\">\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <div class=\"font-medium text-gray-900\">{{ word.word }}</div>\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                {{ word.category }}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <span :class=\"{\n                  'px-2 py-1 rounded-full text-xs font-medium': true,\n                  'bg-green-100 text-green-800': word.difficulty === 'سهل',\n                  'bg-yellow-100 text-yellow-800': word.difficulty === 'متوسط',\n                  'bg-red-100 text-red-800': word.difficulty === 'صعب'\n                }\">\n                  {{ word.difficulty }}\n                </span>\n              </td>\n              <td v-for=\"child in childrenData\" :key=\"`${word.word}-${child.id}`\" class=\"px-6 py-4 whitespace-nowrap text-center\">\n                <span :class=\"{\n                  'px-2 py-1 rounded-full text-xs font-medium': true,\n                  'bg-green-100 text-green-800': getWordPerformance(child.id, word.word) === 'ممتاز',\n                  'bg-yellow-100 text-yellow-800': getWordPerformance(child.id, word.word) === 'متوسط',\n                  'bg-red-100 text-red-800': getWordPerformance(child.id, word.word) === 'ضعيف'\n                }\">\n                  {{ getWordPerformance(child.id, word.word) }}\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n    <div class=\"bg-white rounded-lg shadow-md p-6\">\n      <h2 class=\"text-xl font-bold text-gray-800 mb-4\">معايير تقييم النطق</h2>\n      \n      <div class=\"space-y-6\">\n        <div v-for=\"category in evaluationCriteria\" :key=\"category.category\" class=\"border-b border-gray-200 pb-4 last:border-0\">\n          <h3 class=\"text-lg font-semibold text-gray-800 mb-3\">{{ category.category }}</h3>\n          \n          <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div v-for=\"criterion in category.criteria\" :key=\"criterion\" class=\"bg-gray-50 p-3 rounded-lg\">\n              <p class=\"text-sm text-gray-700\">{{ criterion }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue'\nimport { Chart, registerables } from 'chart.js'\nimport { commonTestWords, speechEvaluationCriteria } from '@/data/downSyndromeData'\nimport { useDataStore } from '@/store/dataStore'\n\n// Register Chart.js components\nChart.register(...registerables)\n\nexport default {\n  name: 'SpeechAnalysis',\n  setup() {\n    const dataStore = useDataStore()\n    \n    // Chart references\n    const categoryChart = ref(null)\n    const difficultyChart = ref(null)\n    const progressChart = ref(null)\n    \n    // Data\n    const testWords = ref([...commonTestWords])\n    const evaluationCriteria = ref([...speechEvaluationCriteria])\n    const childrenData = ref([])\n    const wordPerformance = ref({})\n    \n    // Filters\n    const searchQuery = ref('')\n    const filterCategory = ref('')\n    const filterDifficulty = ref('')\n    \n    // Computed properties\n    const categories = computed(() => {\n      const uniqueCategories = new Set(testWords.value.map(word => word.category))\n      return Array.from(uniqueCategories)\n    })\n    \n    const filteredWords = computed(() => {\n      return testWords.value.filter(word => {\n        // Filter by search query\n        if (searchQuery.value && !word.word.includes(searchQuery.value)) {\n          return false\n        }\n        \n        // Filter by category\n        if (filterCategory.value && word.category !== filterCategory.value) {\n          return false\n        }\n        \n        // Filter by difficulty\n        if (filterDifficulty.value && word.difficulty !== filterDifficulty.value) {\n          return false\n        }\n        \n        return true\n      })\n    })\n    \n    const averageAge = computed(() => {\n      if (childrenData.value.length === 0) return 0\n      \n      const sum = childrenData.value.reduce((total, child) => total + parseInt(child.age), 0)\n      return (sum / childrenData.value.length).toFixed(1)\n    })\n    \n    const masteryPercentage = computed(() => {\n      if (childrenData.value.length === 0 || testWords.value.length === 0) return 0\n      \n      let totalAssessments = 0\n      let excellentCount = 0\n      \n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          totalAssessments++\n          if (getWordPerformance(child.id, word.word) === 'ممتاز') {\n            excellentCount++\n          }\n        })\n      })\n      \n      return Math.round((excellentCount / totalAssessments) * 100)\n    })\n    \n    // Methods\n    const getWordPerformance = (childId, word) => {\n      if (!wordPerformance.value[childId] || !wordPerformance.value[childId][word]) {\n        return 'ضعيف'\n      }\n      \n      return wordPerformance.value[childId][word]\n    }\n    \n    const initCharts = () => {\n      // Category Chart\n      const categoryData = {}\n      categories.value.forEach(category => {\n        categoryData[category] = {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        }\n      })\n      \n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          const performance = getWordPerformance(child.id, word.word)\n          if (performance === 'ممتاز') {\n            categoryData[word.category].excellent++\n          } else if (performance === 'متوسط') {\n            categoryData[word.category].average++\n          } else {\n            categoryData[word.category].poor++\n          }\n        })\n      })\n      \n      new Chart(categoryChart.value, {\n        type: 'bar',\n        data: {\n          labels: categories.value,\n          datasets: [\n            {\n              label: 'ممتاز',\n              data: categories.value.map(category => categoryData[category].excellent),\n              backgroundColor: 'rgba(34, 197, 94, 0.7)',\n              borderColor: 'rgba(34, 197, 94, 1)',\n              borderWidth: 1\n            },\n            {\n              label: 'متوسط',\n              data: categories.value.map(category => categoryData[category].average),\n              backgroundColor: 'rgba(234, 179, 8, 0.7)',\n              borderColor: 'rgba(234, 179, 8, 1)',\n              borderWidth: 1\n            },\n            {\n              label: 'ضعيف',\n              data: categories.value.map(category => categoryData[category].poor),\n              backgroundColor: 'rgba(239, 68, 68, 0.7)',\n              borderColor: 'rgba(239, 68, 68, 1)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true\n            }\n          }\n        }\n      })\n      \n      // Difficulty Chart\n      const difficultyData = {\n        easy: { excellent: 0, average: 0, poor: 0 },\n        medium: { excellent: 0, average: 0, poor: 0 },\n        hard: { excellent: 0, average: 0, poor: 0 }\n      }\n      \n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          const performance = getWordPerformance(child.id, word.word)\n          const difficulty = word.difficulty === 'سهل' ? 'easy' : (word.difficulty === 'متوسط' ? 'medium' : 'hard')\n          \n          if (performance === 'ممتاز') {\n            difficultyData[difficulty].excellent++\n          } else if (performance === 'متوسط') {\n            difficultyData[difficulty].average++\n          } else {\n            difficultyData[difficulty].poor++\n          }\n        })\n      })\n      \n      new Chart(difficultyChart.value, {\n        type: 'pie',\n        data: {\n          labels: ['سهل - ممتاز', 'سهل - متوسط', 'سهل - ضعيف', 'متوسط - ممتاز', 'متوسط - متوسط', 'متوسط - ضعيف', 'صعب - ممتاز', 'صعب - متوسط', 'صعب - ضعيف'],\n          datasets: [\n            {\n              data: [\n                difficultyData.easy.excellent,\n                difficultyData.easy.average,\n                difficultyData.easy.poor,\n                difficultyData.medium.excellent,\n                difficultyData.medium.average,\n                difficultyData.medium.poor,\n                difficultyData.hard.excellent,\n                difficultyData.hard.average,\n                difficultyData.hard.poor\n              ],\n              backgroundColor: [\n                'rgba(34, 197, 94, 0.9)',\n                'rgba(34, 197, 94, 0.6)',\n                'rgba(34, 197, 94, 0.3)',\n                'rgba(234, 179, 8, 0.9)',\n                'rgba(234, 179, 8, 0.6)',\n                'rgba(234, 179, 8, 0.3)',\n                'rgba(239, 68, 68, 0.9)',\n                'rgba(239, 68, 68, 0.6)',\n                'rgba(239, 68, 68, 0.3)'\n              ],\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      })\n      \n      // Progress Chart\n      const childrenNames = childrenData.value.map(child => child.name)\n      const childrenProgress = childrenData.value.map(child => {\n        let excellentCount = 0\n        let totalWords = testWords.value.length\n        \n        testWords.value.forEach(word => {\n          if (getWordPerformance(child.id, word.word) === 'ممتاز') {\n            excellentCount++\n          }\n        })\n        \n        return (excellentCount / totalWords) * 100\n      })\n      \n      new Chart(progressChart.value, {\n        type: 'bar',\n        data: {\n          labels: childrenNames,\n          datasets: [\n            {\n              label: 'نسبة التقدم',\n              data: childrenProgress,\n              backgroundColor: 'rgba(59, 130, 246, 0.7)',\n              borderColor: 'rgba(59, 130, 246, 1)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100\n            }\n          }\n        }\n      })\n    }\n    \n    const exportData = () => {\n      // In a real app, this would export data to CSV or Excel\n      alert('سيتم تصدير البيانات (هذه وظيفة تجريبية)')\n    }\n    \n    const generateReport = () => {\n      // In a real app, this would generate a detailed report\n      alert('سيتم إنشاء تقرير مفصل (هذه وظيفة تجريبية)')\n    }\n    \n    // Initialize\n    onMounted(() => {\n      // Load children data\n      dataStore.fetchChildren()\n        .then(() => {\n          childrenData.value = dataStore.children\n          \n          // Generate random performance data for demo\n          childrenData.value.forEach(child => {\n            wordPerformance.value[child.id] = {}\n            \n            testWords.value.forEach(word => {\n              const rand = Math.random()\n              let performance\n              \n              if (word.difficulty === 'سهل') {\n                performance = rand < 0.7 ? 'ممتاز' : (rand < 0.9 ? 'متوسط' : 'ضعيف')\n              } else if (word.difficulty === 'متوسط') {\n                performance = rand < 0.4 ? 'ممتاز' : (rand < 0.8 ? 'متوسط' : 'ضعيف')\n              } else {\n                performance = rand < 0.2 ? 'ممتاز' : (rand < 0.6 ? 'متوسط' : 'ضعيف')\n              }\n              \n              wordPerformance.value[child.id][word.word] = performance\n            })\n          })\n          \n          // Initialize charts after data is loaded\n          setTimeout(() => {\n            initCharts()\n          }, 500)\n        })\n    })\n    \n    return {\n      testWords,\n      evaluationCriteria,\n      childrenData,\n      searchQuery,\n      filterCategory,\n      filterDifficulty,\n      categories,\n      filteredWords,\n      averageAge,\n      masteryPercentage,\n      categoryChart,\n      difficultyChart,\n      progressChart,\n      getWordPerformance,\n      exportData,\n      generateReport\n    }\n  }\n}\n</script>\n"],"mappings":";;;;;;;;;;;;AA2JA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAI;AAC7C,SAASC,KAAK,EAAEC,aAAY,QAAS,UAAS;AAC9C,SAASC,eAAe,EAAEC,wBAAuB,QAAS,yBAAwB;AAClF,SAASC,YAAW,QAAS,mBAAkB;;AAE/C;AACAJ,KAAK,CAACK,QAAQ,CAAC,GAAGJ,aAAa;AAE/B,eAAe;EACbK,IAAI,EAAE,gBAAgB;EACtBC,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIJ,YAAY,CAAC;;IAE/B;IACA,MAAMK,aAAY,GAAIZ,GAAG,CAAC,IAAI;IAC9B,MAAMa,eAAc,GAAIb,GAAG,CAAC,IAAI;IAChC,MAAMc,aAAY,GAAId,GAAG,CAAC,IAAI;;IAE9B;IACA,MAAMe,SAAQ,GAAIf,GAAG,CAAC,CAAC,GAAGK,eAAe,CAAC;IAC1C,MAAMW,kBAAiB,GAAIhB,GAAG,CAAC,CAAC,GAAGM,wBAAwB,CAAC;IAC5D,MAAMW,YAAW,GAAIjB,GAAG,CAAC,EAAE;IAC3B,MAAMkB,eAAc,GAAIlB,GAAG,CAAC,CAAC,CAAC;;IAE9B;IACA,MAAMmB,WAAU,GAAInB,GAAG,CAAC,EAAE;IAC1B,MAAMoB,cAAa,GAAIpB,GAAG,CAAC,EAAE;IAC7B,MAAMqB,gBAAe,GAAIrB,GAAG,CAAC,EAAE;;IAE/B;IACA,MAAMsB,UAAS,GAAIrB,QAAQ,CAAC,MAAM;MAChC,MAAMsB,gBAAe,GAAI,IAAIC,GAAG,CAACT,SAAS,CAACU,KAAK,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,QAAQ,CAAC;MAC3E,OAAOC,KAAK,CAACC,IAAI,CAACP,gBAAgB;IACpC,CAAC;IAED,MAAMQ,aAAY,GAAI9B,QAAQ,CAAC,MAAM;MACnC,OAAOc,SAAS,CAACU,KAAK,CAACO,MAAM,CAACL,IAAG,IAAK;QACpC;QACA,IAAIR,WAAW,CAACM,KAAI,IAAK,CAACE,IAAI,CAACA,IAAI,CAACM,QAAQ,CAACd,WAAW,CAACM,KAAK,CAAC,EAAE;UAC/D,OAAO,KAAI;QACb;;QAEA;QACA,IAAIL,cAAc,CAACK,KAAI,IAAKE,IAAI,CAACC,QAAO,KAAMR,cAAc,CAACK,KAAK,EAAE;UAClE,OAAO,KAAI;QACb;;QAEA;QACA,IAAIJ,gBAAgB,CAACI,KAAI,IAAKE,IAAI,CAACO,UAAS,KAAMb,gBAAgB,CAACI,KAAK,EAAE;UACxE,OAAO,KAAI;QACb;QAEA,OAAO,IAAG;MACZ,CAAC;IACH,CAAC;IAED,MAAMU,UAAS,GAAIlC,QAAQ,CAAC,MAAM;MAChC,IAAIgB,YAAY,CAACQ,KAAK,CAACW,MAAK,KAAM,CAAC,EAAE,OAAO;MAE5C,MAAMC,GAAE,GAAIpB,YAAY,CAACQ,KAAK,CAACa,MAAM,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAI,GAAIE,QAAQ,CAACD,KAAK,CAACE,GAAG,CAAC,EAAE,CAAC;MACtF,OAAO,CAACL,GAAE,GAAIpB,YAAY,CAACQ,KAAK,CAACW,MAAM,EAAEO,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,MAAMC,iBAAgB,GAAI3C,QAAQ,CAAC,MAAM;MACvC,IAAIgB,YAAY,CAACQ,KAAK,CAACW,MAAK,KAAM,KAAKrB,SAAS,CAACU,KAAK,CAACW,MAAK,KAAM,CAAC,EAAE,OAAO;MAE5E,IAAIS,gBAAe,GAAI;MACvB,IAAIC,cAAa,GAAI;MAErB7B,YAAY,CAACQ,KAAK,CAACsB,OAAO,CAACP,KAAI,IAAK;QAClCzB,SAAS,CAACU,KAAK,CAACsB,OAAO,CAACpB,IAAG,IAAK;UAC9BkB,gBAAgB,EAAC;UACjB,IAAIG,kBAAkB,CAACR,KAAK,CAACS,EAAE,EAAEtB,IAAI,CAACA,IAAI,MAAM,OAAO,EAAE;YACvDmB,cAAc,EAAC;UACjB;QACF,CAAC;MACH,CAAC;MAED,OAAOI,IAAI,CAACC,KAAK,CAAEL,cAAa,GAAID,gBAAgB,GAAI,GAAG;IAC7D,CAAC;;IAED;IACA,MAAMG,kBAAiB,GAAIA,CAACI,OAAO,EAAEzB,IAAI,KAAK;MAC5C,IAAI,CAACT,eAAe,CAACO,KAAK,CAAC2B,OAAO,KAAK,CAAClC,eAAe,CAACO,KAAK,CAAC2B,OAAO,CAAC,CAACzB,IAAI,CAAC,EAAE;QAC5E,OAAO,MAAK;MACd;MAEA,OAAOT,eAAe,CAACO,KAAK,CAAC2B,OAAO,CAAC,CAACzB,IAAI;IAC5C;IAEA,MAAM0B,UAAS,GAAIA,CAAA,KAAM;MACvB;MACA,MAAMC,YAAW,GAAI,CAAC;MACtBhC,UAAU,CAACG,KAAK,CAACsB,OAAO,CAACnB,QAAO,IAAK;QACnC0B,YAAY,CAAC1B,QAAQ,IAAI;UACvB2B,SAAS,EAAE,CAAC;UACZC,OAAO,EAAE,CAAC;UACVC,IAAI,EAAE;QACR;MACF,CAAC;MAEDxC,YAAY,CAACQ,KAAK,CAACsB,OAAO,CAACP,KAAI,IAAK;QAClCzB,SAAS,CAACU,KAAK,CAACsB,OAAO,CAACpB,IAAG,IAAK;UAC9B,MAAM+B,WAAU,GAAIV,kBAAkB,CAACR,KAAK,CAACS,EAAE,EAAEtB,IAAI,CAACA,IAAI;UAC1D,IAAI+B,WAAU,KAAM,OAAO,EAAE;YAC3BJ,YAAY,CAAC3B,IAAI,CAACC,QAAQ,CAAC,CAAC2B,SAAS,EAAC;UACxC,OAAO,IAAIG,WAAU,KAAM,OAAO,EAAE;YAClCJ,YAAY,CAAC3B,IAAI,CAACC,QAAQ,CAAC,CAAC4B,OAAO,EAAC;UACtC,OAAO;YACLF,YAAY,CAAC3B,IAAI,CAACC,QAAQ,CAAC,CAAC6B,IAAI,EAAC;UACnC;QACF,CAAC;MACH,CAAC;MAED,IAAItD,KAAK,CAACS,aAAa,CAACa,KAAK,EAAE;QAC7BkC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,MAAM,EAAEvC,UAAU,CAACG,KAAK;UACxBqC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,OAAO;YACdH,IAAI,EAAEtC,UAAU,CAACG,KAAK,CAACC,GAAG,CAACE,QAAO,IAAK0B,YAAY,CAAC1B,QAAQ,CAAC,CAAC2B,SAAS,CAAC;YACxES,eAAe,EAAE,wBAAwB;YACzCC,WAAW,EAAE,sBAAsB;YACnCC,WAAW,EAAE;UACf,CAAC,EACD;YACEH,KAAK,EAAE,OAAO;YACdH,IAAI,EAAEtC,UAAU,CAACG,KAAK,CAACC,GAAG,CAACE,QAAO,IAAK0B,YAAY,CAAC1B,QAAQ,CAAC,CAAC4B,OAAO,CAAC;YACtEQ,eAAe,EAAE,wBAAwB;YACzCC,WAAW,EAAE,sBAAsB;YACnCC,WAAW,EAAE;UACf,CAAC,EACD;YACEH,KAAK,EAAE,MAAM;YACbH,IAAI,EAAEtC,UAAU,CAACG,KAAK,CAACC,GAAG,CAACE,QAAO,IAAK0B,YAAY,CAAC1B,QAAQ,CAAC,CAAC6B,IAAI,CAAC;YACnEO,eAAe,EAAE,wBAAwB;YACzCC,WAAW,EAAE,sBAAsB;YACnCC,WAAW,EAAE;UACf;QAEJ,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,OAAO,EAAE;YACX,CAAC;YACDC,CAAC,EAAE;cACDD,OAAO,EAAE;YACX;UACF;QACF;MACF,CAAC;;MAED;MACA,MAAME,cAAa,GAAI;QACrBC,IAAI,EAAE;UAAEpB,SAAS,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAE,CAAC;QAC3CmB,MAAM,EAAE;UAAErB,SAAS,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAE,CAAC;QAC7CoB,IAAI,EAAE;UAAEtB,SAAS,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAE;MAC5C;MAEAxC,YAAY,CAACQ,KAAK,CAACsB,OAAO,CAACP,KAAI,IAAK;QAClCzB,SAAS,CAACU,KAAK,CAACsB,OAAO,CAACpB,IAAG,IAAK;UAC9B,MAAM+B,WAAU,GAAIV,kBAAkB,CAACR,KAAK,CAACS,EAAE,EAAEtB,IAAI,CAACA,IAAI;UAC1D,MAAMO,UAAS,GAAIP,IAAI,CAACO,UAAS,KAAM,KAAI,GAAI,MAAK,GAAKP,IAAI,CAACO,UAAS,KAAM,OAAM,GAAI,QAAO,GAAI,MAAM;UAExG,IAAIwB,WAAU,KAAM,OAAO,EAAE;YAC3BgB,cAAc,CAACxC,UAAU,CAAC,CAACqB,SAAS,EAAC;UACvC,OAAO,IAAIG,WAAU,KAAM,OAAO,EAAE;YAClCgB,cAAc,CAACxC,UAAU,CAAC,CAACsB,OAAO,EAAC;UACrC,OAAO;YACLkB,cAAc,CAACxC,UAAU,CAAC,CAACuB,IAAI,EAAC;UAClC;QACF,CAAC;MACH,CAAC;MAED,IAAItD,KAAK,CAACU,eAAe,CAACY,KAAK,EAAE;QAC/BkC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,MAAM,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,YAAY,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,EAAE,aAAa,EAAE,aAAa,EAAE,YAAY,CAAC;UAClJC,QAAQ,EAAE,CACR;YACEF,IAAI,EAAE,CACJc,cAAc,CAACC,IAAI,CAACpB,SAAS,EAC7BmB,cAAc,CAACC,IAAI,CAACnB,OAAO,EAC3BkB,cAAc,CAACC,IAAI,CAAClB,IAAI,EACxBiB,cAAc,CAACE,MAAM,CAACrB,SAAS,EAC/BmB,cAAc,CAACE,MAAM,CAACpB,OAAO,EAC7BkB,cAAc,CAACE,MAAM,CAACnB,IAAI,EAC1BiB,cAAc,CAACG,IAAI,CAACtB,SAAS,EAC7BmB,cAAc,CAACG,IAAI,CAACrB,OAAO,EAC3BkB,cAAc,CAACG,IAAI,CAACpB,IAAG,CACxB;YACDO,eAAe,EAAE,CACf,wBAAwB,EACxB,wBAAwB,EACxB,wBAAwB,EACxB,wBAAwB,EACxB,wBAAwB,EACxB,wBAAwB,EACxB,wBAAwB,EACxB,wBAAwB,EACxB,wBAAuB,CACxB;YACDE,WAAW,EAAE;UACf;QAEJ,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE;QACvB;MACF,CAAC;;MAED;MACA,MAAMS,aAAY,GAAI7D,YAAY,CAACQ,KAAK,CAACC,GAAG,CAACc,KAAI,IAAKA,KAAK,CAAC/B,IAAI;MAChE,MAAMsE,gBAAe,GAAI9D,YAAY,CAACQ,KAAK,CAACC,GAAG,CAACc,KAAI,IAAK;QACvD,IAAIM,cAAa,GAAI;QACrB,IAAIkC,UAAS,GAAIjE,SAAS,CAACU,KAAK,CAACW,MAAK;QAEtCrB,SAAS,CAACU,KAAK,CAACsB,OAAO,CAACpB,IAAG,IAAK;UAC9B,IAAIqB,kBAAkB,CAACR,KAAK,CAACS,EAAE,EAAEtB,IAAI,CAACA,IAAI,MAAM,OAAO,EAAE;YACvDmB,cAAc,EAAC;UACjB;QACF,CAAC;QAED,OAAQA,cAAa,GAAIkC,UAAU,GAAI,GAAE;MAC3C,CAAC;MAED,IAAI7E,KAAK,CAACW,aAAa,CAACW,KAAK,EAAE;QAC7BkC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,MAAM,EAAEiB,aAAa;UACrBhB,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,aAAa;YACpBH,IAAI,EAAEmB,gBAAgB;YACtBf,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,uBAAuB;YACpCC,WAAW,EAAE;UACf;QAEJ,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,MAAM,EAAE;YACNG,CAAC,EAAE;cACDQ,WAAW,EAAE,IAAI;cACjBC,GAAG,EAAE;YACP;UACF;QACF;MACF,CAAC;IACH;IAEA,MAAMC,UAAS,GAAIA,CAAA,KAAM;MACvB;MACAC,KAAK,CAAC,yCAAyC;IACjD;IAEA,MAAMC,cAAa,GAAIA,CAAA,KAAM;MAC3B;MACAD,KAAK,CAAC,2CAA2C;IACnD;;IAEA;IACAlF,SAAS,CAAC,MAAM;MACd;MACAS,SAAS,CAAC2E,aAAa,CAAC,EACrBC,IAAI,CAAC,MAAM;QACVtE,YAAY,CAACQ,KAAI,GAAId,SAAS,CAAC6E,QAAO;;QAEtC;QACAvE,YAAY,CAACQ,KAAK,CAACsB,OAAO,CAACP,KAAI,IAAK;UAClCtB,eAAe,CAACO,KAAK,CAACe,KAAK,CAACS,EAAE,IAAI,CAAC;UAEnClC,SAAS,CAACU,KAAK,CAACsB,OAAO,CAACpB,IAAG,IAAK;YAC9B,MAAM8D,IAAG,GAAIvC,IAAI,CAACwC,MAAM,CAAC;YACzB,IAAIhC,WAAU;YAEd,IAAI/B,IAAI,CAACO,UAAS,KAAM,KAAK,EAAE;cAC7BwB,WAAU,GAAI+B,IAAG,GAAI,GAAE,GAAI,OAAM,GAAKA,IAAG,GAAI,GAAE,GAAI,OAAM,GAAI,MAAM;YACrE,OAAO,IAAI9D,IAAI,CAACO,UAAS,KAAM,OAAO,EAAE;cACtCwB,WAAU,GAAI+B,IAAG,GAAI,GAAE,GAAI,OAAM,GAAKA,IAAG,GAAI,GAAE,GAAI,OAAM,GAAI,MAAM;YACrE,OAAO;cACL/B,WAAU,GAAI+B,IAAG,GAAI,GAAE,GAAI,OAAM,GAAKA,IAAG,GAAI,GAAE,GAAI,OAAM,GAAI,MAAM;YACrE;YAEAvE,eAAe,CAACO,KAAK,CAACe,KAAK,CAACS,EAAE,CAAC,CAACtB,IAAI,CAACA,IAAI,IAAI+B,WAAU;UACzD,CAAC;QACH,CAAC;;QAED;QACAiC,UAAU,CAAC,MAAM;UACftC,UAAU,CAAC;QACb,CAAC,EAAE,GAAG;MACR,CAAC;IACL,CAAC;IAED,OAAO;MACLtC,SAAS;MACTC,kBAAkB;MAClBC,YAAY;MACZE,WAAW;MACXC,cAAc;MACdC,gBAAgB;MAChBC,UAAU;MACVS,aAAa;MACbI,UAAU;MACVS,iBAAiB;MACjBhC,aAAa;MACbC,eAAe;MACfC,aAAa;MACbkC,kBAAkB;MAClBmC,UAAU;MACVE;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}