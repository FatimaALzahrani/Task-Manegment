{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// Firebase Configuration\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue, push, update, remove } from 'firebase/database';\nimport { getStorage } from 'firebase/storage';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAFeXFfvJLVBqmpdxFklKGdlA0vu1etiLs\",\n  authDomain: \"grass-b5acb.firebaseapp.com\",\n  databaseURL: \"https://grass-b5acb-default-rtdb.firebaseio.com\",\n  projectId: \"grass-b5acb\",\n  storageBucket: \"grass-b5acb.appspot.com\",\n  messagingSenderId: \"998170531141\",\n  appId: \"1:998170531141:web:55131f3d38a1d55d821a2c\",\n  measurementId: \"G-BYF7JHV7WM\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\nconst storage = getStorage(app);\n\n// Task Management Service\nexport const taskService = {\n  // Get all tasks\n  getTasks(callback) {\n    const tasksRef = ref(database, 'tasks');\n    onValue(tasksRef, snapshot => {\n      const data = snapshot.val();\n      const tasks = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          tasks.push({\n            id: key,\n            ...data[key],\n            comments: data[key].comments || [],\n            tags: data[key].tags || []\n          });\n        });\n      }\n      callback(tasks);\n    });\n  },\n  // Add a new task\n  addTask(task) {\n    const tasksRef = ref(database, 'tasks');\n    return push(tasksRef, {\n      ...task,\n      dateCreated: new Date().toISOString()\n    });\n  },\n  // Update an existing task\n  updateTask(taskId, updates) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return update(taskRef, updates);\n  },\n  // Delete a task\n  deleteTask(taskId) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return remove(taskRef);\n  },\n  // Move a task to a different column\n  moveTask(taskId, newColumn) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return update(taskRef, {\n      column: newColumn\n    });\n  },\n  // Add a comment to a task\n  addComment(taskId, comment) {\n    return new Promise((resolve, reject) => {\n      const taskRef = ref(database, `tasks/${taskId}`);\n\n      // First get the current task to access its comments\n      onValue(taskRef, snapshot => {\n        const task = snapshot.val();\n        if (task) {\n          const comments = task.comments || [];\n          comments.push({\n            text: comment,\n            timestamp: new Date().toISOString(),\n            user: 'باحث' // In a real app, this would be the current user\n          });\n\n          // Update the task with the new comments\n          update(taskRef, {\n            comments\n          }).then(resolve).catch(reject);\n        } else {\n          reject(new Error('Task not found'));\n        }\n      }, {\n        onlyOnce: true\n      });\n    });\n  }\n};\n\n// Literature Management Service\nexport const literatureService = {\n  // Get all papers\n  getPapers(callback) {\n    const papersRef = ref(database, 'papers');\n    onValue(papersRef, snapshot => {\n      const data = snapshot.val();\n      const papers = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          papers.push({\n            id: key,\n            ...data[key],\n            quotes: data[key].quotes || [],\n            notes: data[key].notes || ''\n          });\n        });\n      }\n      callback(papers);\n    });\n  },\n  // Add a new paper\n  addPaper(paper) {\n    const papersRef = ref(database, 'papers');\n    return push(papersRef, {\n      ...paper,\n      timestamp: Date.now()\n    });\n  },\n  // Update an existing paper\n  updatePaper(paperId, updates) {\n    const paperRef = ref(database, `papers/${paperId}`);\n    return update(paperRef, updates);\n  },\n  // Delete a paper\n  deletePaper(paperId) {\n    const paperRef = ref(database, `papers/${paperId}`);\n    return remove(paperRef);\n  }\n};\n\n// Data Management Service\nexport const dataService = {\n  // Get all children\n  getChildren(callback) {\n    const childrenRef = ref(database, 'children');\n    onValue(childrenRef, snapshot => {\n      const data = snapshot.val();\n      const children = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          children.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(children);\n    });\n  },\n  // Get all word data\n  getWordData(callback) {\n    const wordsRef = ref(database, 'words');\n    onValue(wordsRef, snapshot => {\n      const data = snapshot.val();\n      callback(data || {});\n    });\n  },\n  // Add or update a child\n  saveChild(childId, childData) {\n    const childRef = ref(database, `children/${childId}`);\n    return update(childRef, childData);\n  },\n  // Delete a child\n  deleteChild(childId) {\n    const childRef = ref(database, `children/${childId}`);\n    return remove(childRef);\n  },\n  // Add a new word\n  addWord(word, children) {\n    const updates = {};\n    children.forEach(child => {\n      updates[`words/${child.id}/${word}`] = {\n        level: 'ضعيف',\n        done: false\n      };\n    });\n    return update(ref(database), updates);\n  },\n  // Update word data\n  updateWordData(childId, word, data) {\n    const wordRef = ref(database, `words/${childId}/${word}`);\n    return update(wordRef, data);\n  }\n};\n\n// Letters Management Service\nexport const lettersService = {\n  // Get all doctor letters\n  getDoctorLetters(callback) {\n    const lettersRef = ref(database, 'doctor_letters');\n    onValue(lettersRef, snapshot => {\n      const data = snapshot.val();\n      const letters = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          letters.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(letters);\n    });\n  },\n  // Get all parent letters\n  getParentLetters(callback) {\n    const lettersRef = ref(database, 'parent_letters');\n    onValue(lettersRef, snapshot => {\n      const data = snapshot.val();\n      const letters = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          letters.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(letters);\n    });\n  },\n  // Add a new doctor letter\n  addDoctorLetter(letter) {\n    const lettersRef = ref(database, 'doctor_letters');\n    return push(lettersRef, {\n      ...letter,\n      timestamp: Date.now()\n    });\n  },\n  // Add a new parent letter\n  addParentLetter(letter) {\n    const lettersRef = ref(database, 'parent_letters');\n    return push(lettersRef, {\n      ...letter,\n      timestamp: Date.now()\n    });\n  },\n  // Delete a doctor letter\n  deleteDoctorLetter(letterId) {\n    const letterRef = ref(database, `doctor_letters/${letterId}`);\n    return remove(letterRef);\n  },\n  // Delete a parent letter\n  deleteParentLetter(letterId) {\n    const letterRef = ref(database, `parent_letters/${letterId}`);\n    return remove(letterRef);\n  }\n};\n\n// Workflow Management Service\nexport const workflowService = {\n  // Get all workflows\n  getWorkflows(callback) {\n    const workflowsRef = ref(database, 'workflows');\n    onValue(workflowsRef, snapshot => {\n      const data = snapshot.val();\n      const workflows = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          workflows.push({\n            id: key,\n            ...data[key],\n            notes: data[key].notes || '',\n            relatedTasks: data[key].relatedTasks || []\n          });\n        });\n      }\n      callback(workflows);\n    });\n  },\n  // Add a new workflow\n  addWorkflow(workflow) {\n    const workflowsRef = ref(database, 'workflows');\n    return push(workflowsRef, {\n      ...workflow,\n      timestamp: Date.now()\n    });\n  },\n  // Update an existing workflow\n  updateWorkflow(workflowId, updates) {\n    const workflowRef = ref(database, `workflows/${workflowId}`);\n    return update(workflowRef, updates);\n  },\n  // Delete a workflow\n  deleteWorkflow(workflowId) {\n    const workflowRef = ref(database, `workflows/${workflowId}`);\n    return remove(workflowRef);\n  }\n};\n\n// Code Links Management Service\nexport const codeService = {\n  // Get all code links\n  getCodeLinks(callback) {\n    const codesRef = ref(database, 'codes');\n    onValue(codesRef, snapshot => {\n      const data = snapshot.val();\n      const codes = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          codes.push({\n            id: key,\n            ...data[key],\n            notes: data[key].notes || ''\n          });\n        });\n      }\n      callback(codes);\n    });\n  },\n  // Add a new code link\n  addCodeLink(code) {\n    const codesRef = ref(database, 'codes');\n    return push(codesRef, {\n      ...code,\n      timestamp: Date.now()\n    });\n  },\n  // Update an existing code link\n  updateCodeLink(codeId, updates) {\n    const codeRef = ref(database, `codes/${codeId}`);\n    return update(codeRef, updates);\n  },\n  // Delete a code link\n  deleteCodeLink(codeId) {\n    const codeRef = ref(database, `codes/${codeId}`);\n    return remove(codeRef);\n  }\n};\nexport default {\n  app,\n  database,\n  storage,\n  taskService,\n  literatureService,\n  dataService,\n  lettersService,\n  workflowService,\n  codeService\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}