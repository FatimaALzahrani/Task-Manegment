{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted } from 'vue';\nimport { getDatabase, ref as dbRef, onValue, push, update, remove } from 'firebase/database';\nimport { getStorage, ref as storageRef, uploadBytesResumable, getDownloadURL, deleteObject } from 'firebase/storage';\nexport default {\n  name: 'Workflow',\n  setup() {\n    const db = getDatabase();\n    const storage = getStorage();\n\n    // Workflows data\n    const workflows = ref([]);\n    const selectedWorkflow = ref(null);\n    const newRelatedTask = ref('');\n\n    // New workflow modal\n    const showAddWorkflowModal = ref(false);\n    const newWorkflow = ref({\n      title: '',\n      description: '',\n      notes: '',\n      relatedTasks: []\n    });\n    const selectedFile = ref(null);\n    const isUploading = ref(false);\n\n    // Load workflows from Firebase\n    const loadWorkflows = () => {\n      const workflowsRef = dbRef(db, 'workflows');\n      onValue(workflowsRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          workflows.value = Object.entries(data).map(([id, workflow]) => ({\n            id,\n            ...workflow,\n            notes: workflow.notes || '',\n            relatedTasks: workflow.relatedTasks || []\n          }));\n        } else {\n          workflows.value = [];\n        }\n      });\n    };\n\n    // Workflow details\n    const openWorkflowDetails = workflow => {\n      selectedWorkflow.value = {\n        ...workflow\n      };\n    };\n    const closeDetails = () => {\n      selectedWorkflow.value = null;\n      newRelatedTask.value = '';\n    };\n    const saveWorkflowChanges = () => {\n      if (!selectedWorkflow.value) return;\n      const workflowRef = dbRef(db, `workflows/${selectedWorkflow.value.id}`);\n      update(workflowRef, {\n        title: selectedWorkflow.value.title,\n        description: selectedWorkflow.value.description,\n        notes: selectedWorkflow.value.notes || '',\n        relatedTasks: selectedWorkflow.value.relatedTasks || []\n      });\n      closeDetails();\n    };\n    const deleteWorkflow = workflow => {\n      if (!workflow) return;\n      if (confirm('هل أنت متأكد من حذف هذا المخطط؟')) {\n        // Delete image from storage\n        if (workflow.storagePath) {\n          const fileRef = storageRef(storage, workflow.storagePath);\n          deleteObject(fileRef).catch(error => {\n            console.error('Error deleting file:', error);\n          });\n        }\n\n        // Delete data from database\n        const workflowRef = dbRef(db, `workflows/${workflow.id}`);\n        remove(workflowRef);\n        if (selectedWorkflow.value && selectedWorkflow.value.id === workflow.id) {\n          closeDetails();\n        }\n      }\n    };\n\n    // Related tasks management\n    const addRelatedTask = () => {\n      if (!newRelatedTask.value.trim() || !selectedWorkflow.value) return;\n      if (!selectedWorkflow.value.relatedTasks) {\n        selectedWorkflow.value.relatedTasks = [];\n      }\n      selectedWorkflow.value.relatedTasks.push(newRelatedTask.value.trim());\n      newRelatedTask.value = '';\n    };\n    const removeRelatedTask = index => {\n      if (!selectedWorkflow.value || !selectedWorkflow.value.relatedTasks) return;\n      selectedWorkflow.value.relatedTasks.splice(index, 1);\n    };\n\n    // File upload\n    const handleFileUpload = event => {\n      selectedFile.value = event.target.files[0];\n    };\n\n    // Add new workflow\n    const addNewWorkflow = () => {\n      if (!newWorkflow.value.title.trim() || !newWorkflow.value.description.trim() || !selectedFile.value) {\n        alert('يرجى ملء جميع الحقول المطلوبة');\n        return;\n      }\n      isUploading.value = true;\n\n      // Create a unique filename\n      const ext = selectedFile.value.name.split('.').pop();\n      const fileName = `workflow_${Date.now()}.${ext}`;\n      const storagePath = `workflow_images/${fileName}`;\n\n      // Upload file to Firebase Storage\n      const fileRef = storageRef(storage, storagePath);\n      const uploadTask = uploadBytesResumable(fileRef, selectedFile.value);\n      uploadTask.on('state_changed', snapshot => {\n        // Progress monitoring if needed\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log('Upload is ' + progress + '% done');\n      }, error => {\n        // Error handling\n        console.error('Error uploading file:', error);\n        isUploading.value = false;\n        alert('حدث خطأ أثناء رفع الملف');\n      }, () => {\n        // Upload completed successfully\n        getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          // Save workflow data to Firebase Database\n          const workflowsRef = dbRef(db, 'workflows');\n          push(workflowsRef, {\n            title: newWorkflow.value.title,\n            description: newWorkflow.value.description,\n            imageUrl: downloadURL,\n            storagePath: storagePath,\n            timestamp: Date.now(),\n            notes: '',\n            relatedTasks: []\n          });\n\n          // Reset form\n          newWorkflow.value = {\n            title: '',\n            description: '',\n            notes: '',\n            relatedTasks: []\n          };\n          selectedFile.value = null;\n          isUploading.value = false;\n          showAddWorkflowModal.value = false;\n        });\n      });\n    };\n\n    // Initialize\n    onMounted(() => {\n      loadWorkflows();\n    });\n    return {\n      workflows,\n      selectedWorkflow,\n      newRelatedTask,\n      showAddWorkflowModal,\n      newWorkflow,\n      isUploading,\n      openWorkflowDetails,\n      closeDetails,\n      saveWorkflowChanges,\n      deleteWorkflow,\n      addRelatedTask,\n      removeRelatedTask,\n      handleFileUpload,\n      addNewWorkflow\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}