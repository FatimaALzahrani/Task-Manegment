{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { getDatabase, ref as dbRef, onValue, push, update, remove } from \"firebase/database\";\nimport { getStorage, ref as storageRef, uploadBytesResumable, getDownloadURL, deleteObject } from \"firebase/storage\";\nexport default {\n  name: \"Literature\",\n  setup() {\n    const db = getDatabase();\n    const storage = getStorage();\n\n    // Papers data\n    const papers = ref([]);\n    const selectedPaper = ref(null);\n    const newQuote = ref(\"\");\n\n    // Filters\n    const searchQuery = ref(\"\");\n    const filterYear = ref(\"\");\n    const filterMethodology = ref(\"\");\n\n    // New paper modal\n    const showAddPaperModal = ref(false);\n    const newPaper = ref({\n      title: \"\",\n      summary: \"\",\n      year: \"\",\n      methodology: \"تجريبية\",\n      notes: \"\",\n      quotes: []\n    });\n    const selectedFile = ref(null);\n    const isUploading = ref(false);\n\n    // Load papers from Firebase\n    const loadPapers = () => {\n      const papersRef = dbRef(db, \"papers\");\n      onValue(papersRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          papers.value = Object.entries(data).map(([id, paper]) => ({\n            id,\n            ...paper,\n            quotes: paper.quotes || [],\n            notes: paper.notes || \"\"\n          }));\n        } else {\n          papers.value = [];\n        }\n      });\n    };\n\n    // Computed properties\n    const availableYears = computed(() => {\n      const years = [...new Set(papers.value.map(paper => paper.year))];\n      return years.sort((a, b) => b - a); // Sort descending\n    });\n    const filteredPapers = computed(() => {\n      return papers.value.filter(paper => {\n        // Filter by search query\n        if (searchQuery.value && !paper.title.toLowerCase().includes(searchQuery.value.toLowerCase()) && !paper.summary.toLowerCase().includes(searchQuery.value.toLowerCase())) {\n          return false;\n        }\n\n        // Filter by year\n        if (filterYear.value && paper.year !== filterYear.value) {\n          return false;\n        }\n\n        // Filter by methodology\n        if (filterMethodology.value && paper.methodology !== filterMethodology.value) {\n          return false;\n        }\n        return true;\n      });\n    });\n\n    // Paper details\n    const openPaperDetails = paper => {\n      selectedPaper.value = {\n        ...paper\n      };\n    };\n    const closeDetails = () => {\n      selectedPaper.value = null;\n      newQuote.value = \"\";\n    };\n    const savePaperChanges = () => {\n      if (!selectedPaper.value) return;\n      const paperRef = dbRef(db, `papers/${selectedPaper.value.id}`);\n      update(paperRef, {\n        title: selectedPaper.value.title,\n        summary: selectedPaper.value.summary,\n        year: selectedPaper.value.year,\n        methodology: selectedPaper.value.methodology,\n        quotes: selectedPaper.value.quotes || [],\n        notes: selectedPaper.value.notes || \"\"\n      });\n      closeDetails();\n    };\n    const deletePaper = () => {\n      if (!selectedPaper.value) return;\n      if (confirm(\"هل أنت متأكد من حذف هذه الورقة العلمية؟\")) {\n        // Delete file from storage\n        if (selectedPaper.value.storagePath) {\n          const fileRef = storageRef(storage, selectedPaper.value.storagePath);\n          deleteObject(fileRef).catch(error => {\n            console.error(\"Error deleting file:\", error);\n          });\n        }\n\n        // Delete data from database\n        const paperRef = dbRef(db, `papers/${selectedPaper.value.id}`);\n        remove(paperRef);\n        closeDetails();\n      }\n    };\n\n    // Quote management\n    const addQuote = () => {\n      if (!newQuote.value.trim() || !selectedPaper.value) return;\n      if (!selectedPaper.value.quotes) {\n        selectedPaper.value.quotes = [];\n      }\n      selectedPaper.value.quotes.push(newQuote.value.trim());\n      newQuote.value = \"\";\n    };\n    const removeQuote = index => {\n      if (!selectedPaper.value || !selectedPaper.value.quotes) return;\n      selectedPaper.value.quotes.splice(index, 1);\n    };\n\n    // File upload\n    const handleFileUpload = event => {\n      selectedFile.value = event.target.files[0];\n    };\n\n    // Add new paper\n    const addNewPaper = () => {\n      if (!newPaper.value.title.trim() || !newPaper.value.summary.trim() || !newPaper.value.year.trim() || !selectedFile.value) {\n        alert(\"يرجى ملء جميع الحقول المطلوبة\");\n        return;\n      }\n      isUploading.value = true;\n\n      // Create a unique filename\n      const ext = selectedFile.value.name.split(\".\").pop();\n      const fileName = `${newPaper.value.title.trim().replace(/\\s+/g, \"_\")}_${Date.now()}.${ext}`;\n      const storagePath = `papers/${fileName}`;\n\n      // Upload file to Firebase Storage\n      const fileRef = storageRef(storage, storagePath);\n      const uploadTask = uploadBytesResumable(fileRef, selectedFile.value);\n      uploadTask.on(\"state_changed\", snapshot => {\n        // Progress monitoring if needed\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n      }, error => {\n        // Error handling\n        console.error(\"Error uploading file:\", error);\n        isUploading.value = false;\n        alert(\"حدث خطأ أثناء رفع الملف\");\n      }, () => {\n        // Upload completed successfully\n        getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          // Save paper data to Firebase Database\n          const papersRef = dbRef(db, \"papers\");\n          push(papersRef, {\n            title: newPaper.value.title,\n            summary: newPaper.value.summary,\n            year: newPaper.value.year,\n            methodology: newPaper.value.methodology,\n            fileName: fileName,\n            url: downloadURL,\n            storagePath: storagePath,\n            timestamp: Date.now(),\n            quotes: [],\n            notes: \"\"\n          });\n\n          // Reset form\n          newPaper.value = {\n            title: \"\",\n            summary: \"\",\n            year: \"\",\n            methodology: \"تجريبية\",\n            notes: \"\",\n            quotes: []\n          };\n          selectedFile.value = null;\n          isUploading.value = false;\n          showAddPaperModal.value = false;\n        });\n      });\n    };\n\n    // Helper functions\n    const truncateText = (text, maxLength) => {\n      if (!text) return \"\";\n      return text.length > maxLength ? text.substring(0, maxLength) + \"...\" : text;\n    };\n    const formatDate = timestamp => {\n      if (!timestamp) return \"\";\n      const date = new Date(timestamp);\n      return date.toLocaleDateString(\"ar-EG\");\n    };\n\n    // Initialize\n    onMounted(() => {\n      loadPapers();\n    });\n    return {\n      papers,\n      selectedPaper,\n      newQuote,\n      searchQuery,\n      filterYear,\n      filterMethodology,\n      availableYears,\n      filteredPapers,\n      showAddPaperModal,\n      newPaper,\n      isUploading,\n      openPaperDetails,\n      closeDetails,\n      savePaperChanges,\n      deletePaper,\n      addQuote,\n      removeQuote,\n      handleFileUpload,\n      addNewPaper,\n      truncateText,\n      formatDate\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}