{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { Chart, registerables } from 'chart.js';\nimport { commonTestWords, speechEvaluationCriteria } from '@/data/downSyndromeData';\nimport { useDataStore } from '@/store/dataStore';\n\n// Register Chart.js components\nChart.register(...registerables);\nexport default {\n  name: 'SpeechAnalysis',\n  setup() {\n    const dataStore = useDataStore();\n\n    // Chart references\n    const categoryChart = ref(null);\n    const difficultyChart = ref(null);\n    const progressChart = ref(null);\n\n    // Data\n    const testWords = ref([...commonTestWords]);\n    const evaluationCriteria = ref([...speechEvaluationCriteria]);\n    const childrenData = ref([]);\n    const wordPerformance = ref({});\n\n    // Filters\n    const searchQuery = ref('');\n    const filterCategory = ref('');\n    const filterDifficulty = ref('');\n\n    // Computed properties\n    const categories = computed(() => {\n      const uniqueCategories = new Set(testWords.value.map(word => word.category));\n      return Array.from(uniqueCategories);\n    });\n    const filteredWords = computed(() => {\n      return testWords.value.filter(word => {\n        // Filter by search query\n        if (searchQuery.value && !word.word.includes(searchQuery.value)) {\n          return false;\n        }\n\n        // Filter by category\n        if (filterCategory.value && word.category !== filterCategory.value) {\n          return false;\n        }\n\n        // Filter by difficulty\n        if (filterDifficulty.value && word.difficulty !== filterDifficulty.value) {\n          return false;\n        }\n        return true;\n      });\n    });\n    const averageAge = computed(() => {\n      if (childrenData.value.length === 0) return 0;\n      const sum = childrenData.value.reduce((total, child) => total + parseInt(child.age), 0);\n      return (sum / childrenData.value.length).toFixed(1);\n    });\n    const masteryPercentage = computed(() => {\n      if (childrenData.value.length === 0 || testWords.value.length === 0) return 0;\n      let totalAssessments = 0;\n      let excellentCount = 0;\n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          totalAssessments++;\n          if (getWordPerformance(child.id, word.word) === 'ممتاز') {\n            excellentCount++;\n          }\n        });\n      });\n      return Math.round(excellentCount / totalAssessments * 100);\n    });\n\n    // Methods\n    const getWordPerformance = (childId, word) => {\n      if (!wordPerformance.value[childId] || !wordPerformance.value[childId][word]) {\n        return 'ضعيف';\n      }\n      return wordPerformance.value[childId][word];\n    };\n    const initCharts = () => {\n      // Category Chart\n      const categoryData = {};\n      categories.value.forEach(category => {\n        categoryData[category] = {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        };\n      });\n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          const performance = getWordPerformance(child.id, word.word);\n          if (performance === 'ممتاز') {\n            categoryData[word.category].excellent++;\n          } else if (performance === 'متوسط') {\n            categoryData[word.category].average++;\n          } else {\n            categoryData[word.category].poor++;\n          }\n        });\n      });\n      new Chart(categoryChart.value, {\n        type: 'bar',\n        data: {\n          labels: categories.value,\n          datasets: [{\n            label: 'ممتاز',\n            data: categories.value.map(category => categoryData[category].excellent),\n            backgroundColor: 'rgba(34, 197, 94, 0.7)',\n            borderColor: 'rgba(34, 197, 94, 1)',\n            borderWidth: 1\n          }, {\n            label: 'متوسط',\n            data: categories.value.map(category => categoryData[category].average),\n            backgroundColor: 'rgba(234, 179, 8, 0.7)',\n            borderColor: 'rgba(234, 179, 8, 1)',\n            borderWidth: 1\n          }, {\n            label: 'ضعيف',\n            data: categories.value.map(category => categoryData[category].poor),\n            backgroundColor: 'rgba(239, 68, 68, 0.7)',\n            borderColor: 'rgba(239, 68, 68, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true\n            },\n            y: {\n              stacked: true\n            }\n          }\n        }\n      });\n\n      // Difficulty Chart\n      const difficultyData = {\n        easy: {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        },\n        medium: {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        },\n        hard: {\n          excellent: 0,\n          average: 0,\n          poor: 0\n        }\n      };\n      childrenData.value.forEach(child => {\n        testWords.value.forEach(word => {\n          const performance = getWordPerformance(child.id, word.word);\n          const difficulty = word.difficulty === 'سهل' ? 'easy' : word.difficulty === 'متوسط' ? 'medium' : 'hard';\n          if (performance === 'ممتاز') {\n            difficultyData[difficulty].excellent++;\n          } else if (performance === 'متوسط') {\n            difficultyData[difficulty].average++;\n          } else {\n            difficultyData[difficulty].poor++;\n          }\n        });\n      });\n      new Chart(difficultyChart.value, {\n        type: 'pie',\n        data: {\n          labels: ['سهل - ممتاز', 'سهل - متوسط', 'سهل - ضعيف', 'متوسط - ممتاز', 'متوسط - متوسط', 'متوسط - ضعيف', 'صعب - ممتاز', 'صعب - متوسط', 'صعب - ضعيف'],\n          datasets: [{\n            data: [difficultyData.easy.excellent, difficultyData.easy.average, difficultyData.easy.poor, difficultyData.medium.excellent, difficultyData.medium.average, difficultyData.medium.poor, difficultyData.hard.excellent, difficultyData.hard.average, difficultyData.hard.poor],\n            backgroundColor: ['rgba(34, 197, 94, 0.9)', 'rgba(34, 197, 94, 0.6)', 'rgba(34, 197, 94, 0.3)', 'rgba(234, 179, 8, 0.9)', 'rgba(234, 179, 8, 0.6)', 'rgba(234, 179, 8, 0.3)', 'rgba(239, 68, 68, 0.9)', 'rgba(239, 68, 68, 0.6)', 'rgba(239, 68, 68, 0.3)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n\n      // Progress Chart\n      const childrenNames = childrenData.value.map(child => child.name);\n      const childrenProgress = childrenData.value.map(child => {\n        let excellentCount = 0;\n        let totalWords = testWords.value.length;\n        testWords.value.forEach(word => {\n          if (getWordPerformance(child.id, word.word) === 'ممتاز') {\n            excellentCount++;\n          }\n        });\n        return excellentCount / totalWords * 100;\n      });\n      new Chart(progressChart.value, {\n        type: 'bar',\n        data: {\n          labels: childrenNames,\n          datasets: [{\n            label: 'نسبة التقدم',\n            data: childrenProgress,\n            backgroundColor: 'rgba(59, 130, 246, 0.7)',\n            borderColor: 'rgba(59, 130, 246, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 100\n            }\n          }\n        }\n      });\n    };\n    const exportData = () => {\n      // In a real app, this would export data to CSV or Excel\n      alert('سيتم تصدير البيانات (هذه وظيفة تجريبية)');\n    };\n    const generateReport = () => {\n      // In a real app, this would generate a detailed report\n      alert('سيتم إنشاء تقرير مفصل (هذه وظيفة تجريبية)');\n    };\n\n    // Initialize\n    onMounted(() => {\n      // Load children data\n      dataStore.fetchChildren().then(() => {\n        childrenData.value = dataStore.children;\n\n        // Generate random performance data for demo\n        childrenData.value.forEach(child => {\n          wordPerformance.value[child.id] = {};\n          testWords.value.forEach(word => {\n            const rand = Math.random();\n            let performance;\n            if (word.difficulty === 'سهل') {\n              performance = rand < 0.7 ? 'ممتاز' : rand < 0.9 ? 'متوسط' : 'ضعيف';\n            } else if (word.difficulty === 'متوسط') {\n              performance = rand < 0.4 ? 'ممتاز' : rand < 0.8 ? 'متوسط' : 'ضعيف';\n            } else {\n              performance = rand < 0.2 ? 'ممتاز' : rand < 0.6 ? 'متوسط' : 'ضعيف';\n            }\n            wordPerformance.value[child.id][word.word] = performance;\n          });\n        });\n\n        // Initialize charts after data is loaded\n        setTimeout(() => {\n          initCharts();\n        }, 500);\n      });\n    });\n    return {\n      testWords,\n      evaluationCriteria,\n      childrenData,\n      searchQuery,\n      filterCategory,\n      filterDifficulty,\n      categories,\n      filteredWords,\n      averageAge,\n      masteryPercentage,\n      categoryChart,\n      difficultyChart,\n      progressChart,\n      getWordPerformance,\n      exportData,\n      generateReport\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}