{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { getDatabase, ref as dbRef, onValue, set, push, remove } from \"firebase/database\";\nexport default {\n  name: \"Data\",\n  setup() {\n    const db = getDatabase();\n    const children = ref([]);\n    const wordData = ref({});\n    const words = ref([]);\n    const averageDuration = ref(3.5);\n    const showAddChildModal = ref(false);\n    const showAddWordModal = ref(false);\n    const childForm = ref({\n      name: \"\",\n      age: \"\",\n      gender: \"ذكر\",\n      iq: \"\",\n      speechEvaluation: \"متوسط\"\n    });\n    const newWord = ref(\"\");\n    const editingChild = ref(false);\n    const editingChildId = ref(null);\n    const loadData = () => {\n      const childrenRef = dbRef(db, \"children\");\n      onValue(childrenRef, snapshot => {\n        const data = snapshot.val();\n        children.value = data ? Object.entries(data).map(([id, child]) => ({\n          id,\n          ...child\n        })) : [];\n      });\n      const wordsRef = dbRef(db, \"words\");\n      onValue(wordsRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          wordData.value = data;\n          const allWords = new Set();\n          Object.values(data).forEach(childWords => {\n            Object.keys(childWords).forEach(word => {\n              allWords.add(word);\n            });\n          });\n          words.value = Array.from(allWords);\n        } else {\n          wordData.value = {};\n          words.value = [];\n        }\n      });\n    };\n    const completionPercentage = computed(() => {\n      if (children.value.length === 0 || words.value.length === 0) return 0;\n      let totalWords = children.value.length * words.value.length;\n      let completedWords = 0;\n      children.value.forEach(child => {\n        words.value.forEach(word => {\n          if (isWordDone(child.id, word)) completedWords++;\n        });\n      });\n      return Math.round(completedWords / totalWords * 100);\n    });\n    const getWordLevel = (childId, word) => {\n      return wordData.value[childId]?.[word]?.level || \"ضعيف\";\n    };\n    const isWordDone = (childId, word) => {\n      return wordData.value[childId]?.[word]?.done || false;\n    };\n    const updateWordLevel = (childId, word, level) => {\n      const wordRef = dbRef(db, `words/${childId}/${word}`);\n      set(wordRef, {\n        level: level,\n        done: isWordDone(childId, word)\n      });\n    };\n    const updateWordDone = (childId, word, done) => {\n      const wordRef = dbRef(db, `words/${childId}/${word}`);\n      set(wordRef, {\n        level: getWordLevel(childId, word),\n        done: done\n      });\n    };\n    const editChild = child => {\n      childForm.value = {\n        name: child.name,\n        age: child.age,\n        gender: child.gender,\n        iq: child.iq,\n        speechEvaluation: child.speechEvaluation\n      };\n      editingChild.value = true;\n      editingChildId.value = child.id;\n      showAddChildModal.value = true;\n    };\n    const saveChild = () => {\n      if (!childForm.value.name.trim()) {\n        alert(\"يرجى إدخال اسم الطفل\");\n        return;\n      }\n      if (editingChild.value) {\n        const childRef = dbRef(db, `children/${editingChildId.value}`);\n        set(childRef, childForm.value);\n      } else {\n        const childRef = dbRef(db, `children/${childForm.value.name}`);\n        set(childRef, childForm.value);\n        words.value.forEach(word => {\n          const wordRef = dbRef(db, `words/${childForm.value.name}/${word}`);\n          set(wordRef, {\n            level: \"ضعيف\",\n            done: false\n          });\n        });\n      }\n      childForm.value = {\n        name: \"\",\n        age: \"\",\n        gender: \"ذكر\",\n        iq: \"\",\n        speechEvaluation: \"متوسط\"\n      };\n      editingChild.value = false;\n      editingChildId.value = null;\n      showAddChildModal.value = false;\n    };\n    const deleteChild = child => {\n      if (confirm(`هل أنت متأكد من حذف بيانات الطفل \"${child.name}\"؟`)) {\n        const childRef = dbRef(db, `children/${child.id}`);\n        remove(childRef);\n        const wordRef = dbRef(db, `words/${child.id}`);\n        remove(wordRef);\n      }\n    };\n    const addWord = () => {\n      if (!newWord.value.trim()) {\n        alert(\"يرجى إدخال الكلمة\");\n        return;\n      }\n      children.value.forEach(child => {\n        const wordRef = dbRef(db, `words/${child.id}/${newWord.value}`);\n        set(wordRef, {\n          level: \"ضعيف\",\n          done: false\n        });\n      });\n      newWord.value = \"\";\n      showAddWordModal.value = false;\n    };\n    const deleteWord = wordToDelete => {\n      if (confirm(`هل أنت متأكد من حذف الكلمة \"${wordToDelete}\" من جميع الأطفال؟`)) {\n        children.value.forEach(child => {\n          const wordRef = dbRef(db, `words/${child.id}/${wordToDelete}`);\n          remove(wordRef);\n        });\n        words.value = words.value.filter(word => word !== wordToDelete);\n      }\n    };\n    onMounted(() => {\n      loadData();\n    });\n    return {\n      children,\n      words,\n      wordData,\n      averageDuration,\n      completionPercentage,\n      showAddChildModal,\n      showAddWordModal,\n      childForm,\n      newWord,\n      editingChild,\n      getWordLevel,\n      isWordDone,\n      updateWordLevel,\n      updateWordDone,\n      editChild,\n      saveChild,\n      deleteChild,\n      addWord,\n      deleteWord\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}