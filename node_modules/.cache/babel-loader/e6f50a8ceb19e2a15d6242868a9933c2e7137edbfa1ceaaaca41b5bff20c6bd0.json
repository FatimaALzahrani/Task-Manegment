{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// Firebase Configuration\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue, push, update, remove } from 'firebase/database';\nimport { getStorage } from 'firebase/storage';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAFeXFfvJLVBqmpdxFklKGdlA0vu1etiLs\",\n  authDomain: \"grass-b5acb.firebaseapp.com\",\n  databaseURL: \"https://grass-b5acb-default-rtdb.firebaseio.com\",\n  projectId: \"grass-b5acb\",\n  storageBucket: \"grass-b5acb.appspot.com\",\n  messagingSenderId: \"998170531141\",\n  appId: \"1:998170531141:web:55131f3d38a1d55d821a2c\",\n  measurementId: \"G-BYF7JHV7WM\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\nconst storage = getStorage(app);\n\n// Task Management Service\nexport const taskService = {\n  // Get all tasks\n  getTasks(callback) {\n    const tasksRef = ref(database, 'tasks');\n    onValue(tasksRef, snapshot => {\n      const data = snapshot.val();\n      const tasks = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          tasks.push({\n            id: key,\n            ...data[key],\n            comments: data[key].comments || [],\n            tags: data[key].tags || []\n          });\n        });\n      }\n      callback(tasks);\n    });\n  },\n  // Add a new task\n  addTask(task) {\n    const tasksRef = ref(database, 'tasks');\n    return push(tasksRef, {\n      ...task,\n      dateCreated: new Date().toISOString()\n    });\n  },\n  // Update an existing task\n  updateTask(taskId, updates) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return update(taskRef, updates);\n  },\n  // Delete a task\n  deleteTask(taskId) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return remove(taskRef);\n  },\n  // Move a task to a different column\n  moveTask(taskId, newColumn) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return update(taskRef, {\n      column: newColumn\n    });\n  },\n  // Add a comment to a task\n  addComment(taskId, comment) {\n    return new Promise((resolve, reject) => {\n      const taskRef = ref(database, `tasks/${taskId}`);\n\n      // First get the current task to access its comments\n      onValue(taskRef, snapshot => {\n        const task = snapshot.val();\n        if (task) {\n          const comments = task.comments || [];\n          comments.push({\n            text: comment,\n            timestamp: new Date().toISOString(),\n            user: 'باحث' // In a real app, this would be the current user\n          });\n\n          // Update the task with the new comments\n          update(taskRef, {\n            comments\n          }).then(resolve).catch(reject);\n        } else {\n          reject(new Error('Task not found'));\n        }\n      }, {\n        onlyOnce: true\n      });\n    });\n  }\n};\n\n// Literature Management Service\nexport const literatureService = {\n  // Get all papers\n  getPapers(callback) {\n    const papersRef = ref(database, 'papers');\n    onValue(papersRef, snapshot => {\n      const data = snapshot.val();\n      const papers = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          papers.push({\n            id: key,\n            ...data[key],\n            quotes: data[key].quotes || [],\n            notes: data[key].notes || ''\n          });\n        });\n      }\n      callback(papers);\n    });\n  },\n  // Add a new paper\n  addPaper(paper) {\n    const papersRef = ref(database, 'papers');\n    return push(papersRef, {\n      ...paper,\n      timestamp: Date.now()\n    });\n  },\n  // Update an existing paper\n  updatePaper(paperId, updates) {\n    const paperRef = ref(database, `papers/${paperId}`);\n    return update(paperRef, updates);\n  },\n  // Delete a paper\n  deletePaper(paperId) {\n    const paperRef = ref(database, `papers/${paperId}`);\n    return remove(paperRef);\n  }\n};\n\n// Data Management Service\nexport const dataService = {\n  // Get all children\n  getChildren(callback) {\n    const childrenRef = ref(database, 'children');\n    onValue(childrenRef, snapshot => {\n      const data = snapshot.val();\n      const children = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          children.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(children);\n    });\n  },\n  // Get all word data\n  getWordData(callback) {\n    const wordsRef = ref(database, 'words');\n    onValue(wordsRef, snapshot => {\n      const data = snapshot.val();\n      callback(data || {});\n    });\n  },\n  // Add or update a child\n  saveChild(childId, childData) {\n    const childRef = ref(database, `children/${childId}`);\n    return update(childRef, childData);\n  },\n  // Delete a child\n  deleteChild(childId) {\n    const childRef = ref(database, `children/${childId}`);\n    return remove(childRef);\n  },\n  // Add a new word\n  addWord(word, children) {\n    const updates = {};\n    children.forEach(child => {\n      updates[`words/${child.id}/${word}`] = {\n        level: 'ضعيف',\n        done: false\n      };\n    });\n    return update(ref(database), updates);\n  },\n  // Update word data\n  updateWordData(childId, word, data) {\n    const wordRef = ref(database, `words/${childId}/${word}`);\n    return update(wordRef, data);\n  }\n};\n\n// Letters Management Service\nexport const lettersService = {\n  // Get all doctor letters\n  getDoctorLetters(callback) {\n    const lettersRef = ref(database, 'doctor_letters');\n    onValue(lettersRef, snapshot => {\n      const data = snapshot.val();\n      const letters = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          letters.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(letters);\n    });\n  },\n  // Get all parent letters\n  getParentLetters(callback) {\n    const lettersRef = ref(database, 'parent_letters');\n    onValue(lettersRef, snapshot => {\n      const data = snapshot.val();\n      const letters = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          letters.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(letters);\n    });\n  },\n  // Add a new doctor letter\n  addDoctorLetter(letter) {\n    const lettersRef = ref(database, 'doctor_letters');\n    return push(lettersRef, {\n      ...letter,\n      timestamp: Date.now()\n    });\n  },\n  // Add a new parent letter\n  addParentLetter(letter) {\n    const lettersRef = ref(database, 'parent_letters');\n    return push(lettersRef, {\n      ...letter,\n      timestamp: Date.now()\n    });\n  },\n  // Delete a doctor letter\n  deleteDoctorLetter(letterId) {\n    const letterRef = ref(database, `doctor_letters/${letterId}`);\n    return remove(letterRef);\n  },\n  // Delete a parent letter\n  deleteParentLetter(letterId) {\n    const letterRef = ref(database, `parent_letters/${letterId}`);\n    return remove(letterRef);\n  }\n};\n\n// Workflow Management Service\nexport const workflowService = {\n  // Get all workflows\n  getWorkflows(callback) {\n    const workflowsRef = ref(database, 'workflows');\n    onValue(workflowsRef, snapshot => {\n      const data = snapshot.val();\n      const workflows = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          workflows.push({\n            id: key,\n            ...data[key],\n            notes: data[key].notes || '',\n            relatedTasks: data[key].relatedTasks || []\n          });\n        });\n      }\n      callback(workflows);\n    });\n  },\n  // Add a new workflow\n  addWorkflow(workflow) {\n    const workflowsRef = ref(database, 'workflows');\n    return push(workflowsRef, {\n      ...workflow,\n      timestamp: Date.now()\n    });\n  },\n  // Update an existing workflow\n  updateWorkflow(workflowId, updates) {\n    const workflowRef = ref(database, `workflows/${workflowId}`);\n    return update(workflowRef, updates);\n  },\n  // Delete a workflow\n  deleteWorkflow(workflowId) {\n    const workflowRef = ref(database, `workflows/${workflowId}`);\n    return remove(workflowRef);\n  }\n};\n\n// Code Links Management Service\nexport const codeService = {\n  // Get all code links\n  getCodeLinks(callback) {\n    const codesRef = ref(database, 'codes');\n    onValue(codesRef, snapshot => {\n      const data = snapshot.val();\n      const codes = [];\n      if (data) {\n        Object.keys(data).forEach(key => {\n          codes.push({\n            id: key,\n            ...data[key],\n            notes: data[key].notes || ''\n          });\n        });\n      }\n      callback(codes);\n    });\n  },\n  // Add a new code link\n  addCodeLink(code) {\n    const codesRef = ref(database, 'codes');\n    return push(codesRef, {\n      ...code,\n      timestamp: Date.now()\n    });\n  },\n  // Update an existing code link\n  updateCodeLink(codeId, updates) {\n    const codeRef = ref(database, `codes/${codeId}`);\n    return update(codeRef, updates);\n  },\n  // Delete a code link\n  deleteCodeLink(codeId) {\n    const codeRef = ref(database, `codes/${codeId}`);\n    return remove(codeRef);\n  }\n};\nexport default {\n  app,\n  database,\n  storage,\n  taskService,\n  literatureService,\n  dataService,\n  lettersService,\n  workflowService,\n  codeService\n};","map":{"version":3,"names":["initializeApp","getDatabase","ref","onValue","push","update","remove","getStorage","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","database","storage","taskService","getTasks","callback","tasksRef","snapshot","data","val","tasks","Object","keys","forEach","key","id","comments","tags","addTask","task","dateCreated","Date","toISOString","updateTask","taskId","updates","taskRef","deleteTask","moveTask","newColumn","column","addComment","comment","Promise","resolve","reject","text","timestamp","user","then","catch","Error","onlyOnce","literatureService","getPapers","papersRef","papers","quotes","notes","addPaper","paper","now","updatePaper","paperId","paperRef","deletePaper","dataService","getChildren","childrenRef","children","getWordData","wordsRef","saveChild","childId","childData","childRef","deleteChild","addWord","word","child","level","done","updateWordData","wordRef","lettersService","getDoctorLetters","lettersRef","letters","getParentLetters","addDoctorLetter","letter","addParentLetter","deleteDoctorLetter","letterId","letterRef","deleteParentLetter","workflowService","getWorkflows","workflowsRef","workflows","relatedTasks","addWorkflow","workflow","updateWorkflow","workflowId","workflowRef","deleteWorkflow","codeService","getCodeLinks","codesRef","codes","addCodeLink","code","updateCodeLink","codeId","codeRef","deleteCodeLink"],"sources":["C:/Users/فاطمة الزهراني/Downloads/research-task-manager-updated/task-manager/src/services/firebase.js"],"sourcesContent":["// Firebase Configuration\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue, push, update, remove } from 'firebase/database';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAFeXFfvJLVBqmpdxFklKGdlA0vu1etiLs\",\n  authDomain: \"grass-b5acb.firebaseapp.com\",\n  databaseURL: \"https://grass-b5acb-default-rtdb.firebaseio.com\",\n  projectId: \"grass-b5acb\",\n  storageBucket: \"grass-b5acb.appspot.com\",\n  messagingSenderId: \"998170531141\",\n  appId: \"1:998170531141:web:55131f3d38a1d55d821a2c\",\n  measurementId: \"G-BYF7JHV7WM\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\nconst storage = getStorage(app);\n\n// Task Management Service\nexport const taskService = {\n  // Get all tasks\n  getTasks(callback) {\n    const tasksRef = ref(database, 'tasks');\n    onValue(tasksRef, (snapshot) => {\n      const data = snapshot.val();\n      const tasks = [];\n      if (data) {\n        Object.keys(data).forEach((key) => {\n          tasks.push({\n            id: key,\n            ...data[key],\n            comments: data[key].comments || [],\n            tags: data[key].tags || []\n          });\n        });\n      }\n      callback(tasks);\n    });\n  },\n\n  // Add a new task\n  addTask(task) {\n    const tasksRef = ref(database, 'tasks');\n    return push(tasksRef, {\n      ...task,\n      dateCreated: new Date().toISOString()\n    });\n  },\n\n  // Update an existing task\n  updateTask(taskId, updates) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return update(taskRef, updates);\n  },\n\n  // Delete a task\n  deleteTask(taskId) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return remove(taskRef);\n  },\n\n  // Move a task to a different column\n  moveTask(taskId, newColumn) {\n    const taskRef = ref(database, `tasks/${taskId}`);\n    return update(taskRef, { column: newColumn });\n  },\n\n  // Add a comment to a task\n  addComment(taskId, comment) {\n    return new Promise((resolve, reject) => {\n      const taskRef = ref(database, `tasks/${taskId}`);\n      \n      // First get the current task to access its comments\n      onValue(taskRef, (snapshot) => {\n        const task = snapshot.val();\n        if (task) {\n          const comments = task.comments || [];\n          comments.push({\n            text: comment,\n            timestamp: new Date().toISOString(),\n            user: 'باحث' // In a real app, this would be the current user\n          });\n          \n          // Update the task with the new comments\n          update(taskRef, { comments })\n            .then(resolve)\n            .catch(reject);\n        } else {\n          reject(new Error('Task not found'));\n        }\n      }, { onlyOnce: true });\n    });\n  }\n};\n\n// Literature Management Service\nexport const literatureService = {\n  // Get all papers\n  getPapers(callback) {\n    const papersRef = ref(database, 'papers');\n    onValue(papersRef, (snapshot) => {\n      const data = snapshot.val();\n      const papers = [];\n      if (data) {\n        Object.keys(data).forEach((key) => {\n          papers.push({\n            id: key,\n            ...data[key],\n            quotes: data[key].quotes || [],\n            notes: data[key].notes || ''\n          });\n        });\n      }\n      callback(papers);\n    });\n  },\n\n  // Add a new paper\n  addPaper(paper) {\n    const papersRef = ref(database, 'papers');\n    return push(papersRef, {\n      ...paper,\n      timestamp: Date.now()\n    });\n  },\n\n  // Update an existing paper\n  updatePaper(paperId, updates) {\n    const paperRef = ref(database, `papers/${paperId}`);\n    return update(paperRef, updates);\n  },\n\n  // Delete a paper\n  deletePaper(paperId) {\n    const paperRef = ref(database, `papers/${paperId}`);\n    return remove(paperRef);\n  }\n};\n\n// Data Management Service\nexport const dataService = {\n  // Get all children\n  getChildren(callback) {\n    const childrenRef = ref(database, 'children');\n    onValue(childrenRef, (snapshot) => {\n      const data = snapshot.val();\n      const children = [];\n      if (data) {\n        Object.keys(data).forEach((key) => {\n          children.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(children);\n    });\n  },\n\n  // Get all word data\n  getWordData(callback) {\n    const wordsRef = ref(database, 'words');\n    onValue(wordsRef, (snapshot) => {\n      const data = snapshot.val();\n      callback(data || {});\n    });\n  },\n\n  // Add or update a child\n  saveChild(childId, childData) {\n    const childRef = ref(database, `children/${childId}`);\n    return update(childRef, childData);\n  },\n\n  // Delete a child\n  deleteChild(childId) {\n    const childRef = ref(database, `children/${childId}`);\n    return remove(childRef);\n  },\n\n  // Add a new word\n  addWord(word, children) {\n    const updates = {};\n    \n    children.forEach(child => {\n      updates[`words/${child.id}/${word}`] = { level: 'ضعيف', done: false };\n    });\n    \n    return update(ref(database), updates);\n  },\n\n  // Update word data\n  updateWordData(childId, word, data) {\n    const wordRef = ref(database, `words/${childId}/${word}`);\n    return update(wordRef, data);\n  }\n};\n\n// Letters Management Service\nexport const lettersService = {\n  // Get all doctor letters\n  getDoctorLetters(callback) {\n    const lettersRef = ref(database, 'doctor_letters');\n    onValue(lettersRef, (snapshot) => {\n      const data = snapshot.val();\n      const letters = [];\n      if (data) {\n        Object.keys(data).forEach((key) => {\n          letters.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(letters);\n    });\n  },\n\n  // Get all parent letters\n  getParentLetters(callback) {\n    const lettersRef = ref(database, 'parent_letters');\n    onValue(lettersRef, (snapshot) => {\n      const data = snapshot.val();\n      const letters = [];\n      if (data) {\n        Object.keys(data).forEach((key) => {\n          letters.push({\n            id: key,\n            ...data[key]\n          });\n        });\n      }\n      callback(letters);\n    });\n  },\n\n  // Add a new doctor letter\n  addDoctorLetter(letter) {\n    const lettersRef = ref(database, 'doctor_letters');\n    return push(lettersRef, {\n      ...letter,\n      timestamp: Date.now()\n    });\n  },\n\n  // Add a new parent letter\n  addParentLetter(letter) {\n    const lettersRef = ref(database, 'parent_letters');\n    return push(lettersRef, {\n      ...letter,\n      timestamp: Date.now()\n    });\n  },\n\n  // Delete a doctor letter\n  deleteDoctorLetter(letterId) {\n    const letterRef = ref(database, `doctor_letters/${letterId}`);\n    return remove(letterRef);\n  },\n\n  // Delete a parent letter\n  deleteParentLetter(letterId) {\n    const letterRef = ref(database, `parent_letters/${letterId}`);\n    return remove(letterRef);\n  }\n};\n\n// Workflow Management Service\nexport const workflowService = {\n  // Get all workflows\n  getWorkflows(callback) {\n    const workflowsRef = ref(database, 'workflows');\n    onValue(workflowsRef, (snapshot) => {\n      const data = snapshot.val();\n      const workflows = [];\n      if (data) {\n        Object.keys(data).forEach((key) => {\n          workflows.push({\n            id: key,\n            ...data[key],\n            notes: data[key].notes || '',\n            relatedTasks: data[key].relatedTasks || []\n          });\n        });\n      }\n      callback(workflows);\n    });\n  },\n\n  // Add a new workflow\n  addWorkflow(workflow) {\n    const workflowsRef = ref(database, 'workflows');\n    return push(workflowsRef, {\n      ...workflow,\n      timestamp: Date.now()\n    });\n  },\n\n  // Update an existing workflow\n  updateWorkflow(workflowId, updates) {\n    const workflowRef = ref(database, `workflows/${workflowId}`);\n    return update(workflowRef, updates);\n  },\n\n  // Delete a workflow\n  deleteWorkflow(workflowId) {\n    const workflowRef = ref(database, `workflows/${workflowId}`);\n    return remove(workflowRef);\n  }\n};\n\n// Code Links Management Service\nexport const codeService = {\n  // Get all code links\n  getCodeLinks(callback) {\n    const codesRef = ref(database, 'codes');\n    onValue(codesRef, (snapshot) => {\n      const data = snapshot.val();\n      const codes = [];\n      if (data) {\n        Object.keys(data).forEach((key) => {\n          codes.push({\n            id: key,\n            ...data[key],\n            notes: data[key].notes || ''\n          });\n        });\n      }\n      callback(codes);\n    });\n  },\n\n  // Add a new code link\n  addCodeLink(code) {\n    const codesRef = ref(database, 'codes');\n    return push(codesRef, {\n      ...code,\n      timestamp: Date.now()\n    });\n  },\n\n  // Update an existing code link\n  updateCodeLink(codeId, updates) {\n    const codeRef = ref(database, `codes/${codeId}`);\n    return update(codeRef, updates);\n  },\n\n  // Delete a code link\n  deleteCodeLink(codeId) {\n    const codeRef = ref(database, `codes/${codeId}`);\n    return remove(codeRef);\n  }\n};\n\nexport default {\n  app,\n  database,\n  storage,\n  taskService,\n  literatureService,\n  dataService,\n  lettersService,\n  workflowService,\n  codeService\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}