{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { getDatabase, ref as dbRef, onValue, push, remove } from \"firebase/database\";\nimport { getStorage, ref as storageRef, uploadBytesResumable, getDownloadURL, deleteObject } from \"firebase/storage\";\nexport default {\n  name: \"Letters\",\n  setup() {\n    const db = getDatabase();\n    const storage = getStorage();\n\n    // Letters data\n    const doctorLetters = ref([]);\n    const parentLetters = ref([]);\n\n    // Modals\n    const showAddDoctorLetterModal = ref(false);\n    const showAddParentLetterModal = ref(false);\n\n    // Upload state\n    const selectedDoctorFile = ref(null);\n    const selectedParentFile = ref(null);\n    const isUploading = ref(false);\n\n    // Load letters from Firebase\n    const loadLetters = () => {\n      // Load doctor letters\n      const doctorLettersRef = dbRef(db, \"doctor_letters\");\n      onValue(doctorLettersRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          doctorLetters.value = Object.entries(data).map(([id, letter]) => ({\n            id,\n            ...letter\n          }));\n        } else {\n          doctorLetters.value = [];\n        }\n      });\n\n      // Load parent letters\n      const parentLettersRef = dbRef(db, \"parent_letters\");\n      onValue(parentLettersRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          parentLetters.value = Object.entries(data).map(([id, letter]) => ({\n            id,\n            ...letter\n          }));\n        } else {\n          parentLetters.value = [];\n        }\n      });\n    };\n\n    // Computed properties\n    const doctorCompletionPercentage = computed(() => {\n      // Assuming we need 5 doctor approvals\n      const targetCount = 5;\n      return Math.min(Math.round(doctorLetters.value.length / targetCount * 100), 100);\n    });\n    const parentCompletionPercentage = computed(() => {\n      // Assuming we need 10 parent approvals\n      const targetCount = 10;\n      return Math.min(Math.round(parentLetters.value.length / targetCount * 100), 100);\n    });\n\n    // File upload handlers\n    const handleDoctorFileUpload = event => {\n      selectedDoctorFile.value = event.target.files[0];\n    };\n    const handleParentFileUpload = event => {\n      selectedParentFile.value = event.target.files[0];\n    };\n\n    // Upload doctor letter\n    const uploadDoctorLetter = () => {\n      if (!selectedDoctorFile.value) {\n        alert(\"يرجى اختيار ملف\");\n        return;\n      }\n      isUploading.value = true;\n      const fileName = selectedDoctorFile.value.name;\n      const storagePath = `doctor_letters/${fileName}`;\n\n      // Upload file to Firebase Storage\n      const fileRef = storageRef(storage, storagePath);\n      const uploadTask = uploadBytesResumable(fileRef, selectedDoctorFile.value);\n      uploadTask.on(\"state_changed\", snapshot => {\n        // Progress monitoring if needed\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n      }, error => {\n        // Error handling\n        console.error(\"Error uploading file:\", error);\n        isUploading.value = false;\n        alert(\"حدث خطأ أثناء رفع الملف\");\n      }, () => {\n        // Upload completed successfully\n        getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          // Save letter data to Firebase Database\n          const lettersRef = dbRef(db, \"doctor_letters\");\n          push(lettersRef, {\n            name: fileName,\n            url: downloadURL,\n            storagePath: storagePath,\n            timestamp: Date.now()\n          });\n          selectedDoctorFile.value = null;\n          isUploading.value = false;\n          showAddDoctorLetterModal.value = false;\n        });\n      });\n    };\n\n    // Upload parent letter\n    const uploadParentLetter = () => {\n      if (!selectedParentFile.value) {\n        alert(\"يرجى اختيار ملف\");\n        return;\n      }\n      isUploading.value = true;\n      const fileName = selectedParentFile.value.name;\n      const storagePath = `parent_letters/${fileName}`;\n\n      // Upload file to Firebase Storage\n      const fileRef = storageRef(storage, storagePath);\n      const uploadTask = uploadBytesResumable(fileRef, selectedParentFile.value);\n      uploadTask.on(\"state_changed\", snapshot => {\n        // Progress monitoring if needed\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n      }, error => {\n        // Error handling\n        console.error(\"Error uploading file:\", error);\n        isUploading.value = false;\n        alert(\"حدث خطأ أثناء رفع الملف\");\n      }, () => {\n        // Upload completed successfully\n        getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          // Save letter data to Firebase Database\n          const lettersRef = dbRef(db, \"parent_letters\");\n          push(lettersRef, {\n            name: fileName,\n            url: downloadURL,\n            storagePath: storagePath,\n            timestamp: Date.now()\n          });\n          selectedParentFile.value = null;\n          isUploading.value = false;\n          showAddParentLetterModal.value = false;\n        });\n      });\n    };\n\n    // Delete letter\n    const deleteLetter = (type, letter) => {\n      if (!confirm(\"هل أنت متأكد من حذف هذا الملف؟\")) return;\n\n      // Delete file from storage\n      const fileRef = storageRef(storage, letter.storagePath);\n      deleteObject(fileRef).catch(error => {\n        console.error(\"Error deleting file:\", error);\n      });\n\n      // Delete data from database\n      const letterRef = dbRef(db, `${type}_letters/${letter.id}`);\n      remove(letterRef);\n    };\n\n    // Download templates\n    const downloadDoctorTemplate = () => {\n      // In a real app, this would download a template file\n      alert(\"سيتم تنزيل نموذج موافقة الدكاترة (هذه وظيفة تجريبية)\");\n    };\n    const downloadParentTemplate = () => {\n      // In a real app, this would download a template file\n      alert(\"سيتم تنزيل نموذج موافقة أولياء الأمور (هذه وظيفة تجريبية)\");\n    };\n\n    // Helper functions\n    const formatDate = timestamp => {\n      if (!timestamp) return \"\";\n      const date = new Date(timestamp);\n      return date.toLocaleDateString(\"ar-EG\");\n    };\n\n    // Initialize\n    onMounted(() => {\n      loadLetters();\n    });\n    return {\n      doctorLetters,\n      parentLetters,\n      showAddDoctorLetterModal,\n      showAddParentLetterModal,\n      isUploading,\n      doctorCompletionPercentage,\n      parentCompletionPercentage,\n      handleDoctorFileUpload,\n      handleParentFileUpload,\n      uploadDoctorLetter,\n      uploadParentLetter,\n      deleteLetter,\n      downloadDoctorTemplate,\n      downloadParentTemplate,\n      formatDate\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}