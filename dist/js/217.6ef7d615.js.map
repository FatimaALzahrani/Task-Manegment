{"version":3,"file":"js/217.6ef7d615.js","mappings":"wIACA,IAAIA,EAAO,EAAQ,MACfC,EAAY,EAAQ,MACpBC,EAAW,EAAQ,MACnBC,EAAoB,EAAQ,MAC5BC,EAAsB,EAAQ,MAC9BC,EAA+B,EAAQ,MAEvCC,EAAgBF,GAAoB,WACtC,IAAIG,EAAWC,KAAKD,SAChBE,EAASP,EAASF,EAAKQ,KAAKE,KAAMH,IAClCI,EAAOH,KAAKG,OAASF,EAAOE,KAChC,IAAKA,EAAM,OAAON,EAA6BE,EAAUC,KAAKI,OAAQ,CAACH,EAAOI,MAAOL,KAAKM,YAAY,EACxG,IAIAC,EAAOC,QAAU,SAAaJ,GAG5B,OAFAV,EAASM,MACTP,EAAUW,GACH,IAAIN,EAAcH,EAAkBK,MAAO,CAChDI,OAAQA,GAEZ,C,uBCtBA,IAAIK,EAAI,EAAQ,MACZC,EAAM,EAAQ,KACdC,EAAU,EAAQ,MAItBF,EAAE,CAAEG,OAAQ,WAAYC,OAAO,EAAMC,MAAM,EAAMC,OAAQJ,GAAW,CAClED,IAAKA,G,2PCHP,MAAM,EAAO,qBACPM,EAAU;;;;;;;;;;;;;;;;;AAmBhB,IAAIC,EAAc,GAKlB,SAASC,EAAcF,GACnBC,EAAcD,CAClB;;;;;;;;;;;;;;;;GA2BA,MAAMG,EAIF,WAAAC,CAAYC,GACRrB,KAAKqB,YAAcA,EAEnBrB,KAAKsB,QAAU,WACnB,CAKA,GAAAC,CAAIC,EAAKnB,GACQ,MAATA,EACAL,KAAKqB,YAAYI,WAAWzB,KAAK0B,cAAcF,IAG/CxB,KAAKqB,YAAYM,QAAQ3B,KAAK0B,cAAcF,IAAM,QAAUnB,GAEpE,CAIA,GAAAuB,CAAIJ,GACA,MAAMK,EAAY7B,KAAKqB,YAAYS,QAAQ9B,KAAK0B,cAAcF,IAC9D,OAAiB,MAAbK,EACO,MAGA,QAASA,EAExB,CACA,MAAAE,CAAOP,GACHxB,KAAKqB,YAAYI,WAAWzB,KAAK0B,cAAcF,GACnD,CACA,aAAAE,CAAcM,GACV,OAAOhC,KAAKsB,QAAUU,CAC1B,CACA,QAAAC,GACI,OAAOjC,KAAKqB,YAAYY,UAC5B;;;;;;;;;;;;;;;;GAuBJ,MAAMC,EACF,WAAAd,GACIpB,KAAKmC,OAAS,CAAC,EACfnC,KAAKoC,mBAAoB,CAC7B,CACA,GAAAb,CAAIC,EAAKnB,GACQ,MAATA,SACOL,KAAKmC,OAAOX,GAGnBxB,KAAKmC,OAAOX,GAAOnB,CAE3B,CACA,GAAAuB,CAAIJ,GACA,OAAI,QAASxB,KAAKmC,OAAQX,GACfxB,KAAKmC,OAAOX,GAEhB,IACX,CACA,MAAAO,CAAOP,UACIxB,KAAKmC,OAAOX,EACvB;;;;;;;;;;;;;;;;GA4BJ,MAAMa,EAAmB,SAAUC,GAC/B,IAGI,GAAsB,qBAAXC,QAC2B,qBAA3BA,OAAOD,GAAiC,CAE/C,MAAME,EAAaD,OAAOD,GAG1B,OAFAE,EAAWb,QAAQ,oBAAqB,SACxCa,EAAWf,WAAW,qBACf,IAAIN,EAAkBqB,EACjC,CACJ,CACA,MAAOC,GAAK,CAGZ,OAAO,IAAIP,CACf,EAEMQ,EAAoBL,EAAiB,gBAErCM,EAAiBN,EAAiB,kBAkBlCO,EAAY,IAAI,KAAO,sBAIvBC,EAAgB,WAClB,IAAIC,EAAK,EACT,OAAO,WACH,OAAOA,GACX,CACH,CALqB,GAWhBC,EAAO,SAAUC,GACnB,MAAMC,GAAY,QAAkBD,GAC9BD,EAAO,IAAI,KACjBA,EAAKG,OAAOD,GACZ,MAAME,EAAYJ,EAAKK,SACvB,OAAO,KAAOC,gBAAgBF,EAClC,EACMG,EAAmB,YAAaC,GAClC,IAAIC,EAAU,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,MAAME,EAAMJ,EAAQE,GAChBG,MAAMC,QAAQF,IACbA,GACkB,kBAARA,GAEe,kBAAfA,EAAID,OACfF,GAAWF,EAAiBQ,MAAM,KAAMH,GAGxCH,GADoB,kBAARG,GACD,QAAUA,GAGVA,EAEfH,GAAW,GACf,CACA,OAAOA,CACX,EAIA,IAAIO,EAAS,KAITC,GAAY,EAMhB,MAAMC,EAAkB,SAAUC,EAASC,IACvC,SAAQA,IAA0B,IAAZD,IAAgC,IAAZA,EAAmB,+CAC7C,IAAZA,GACAtB,EAAUwB,SAAW,KAASC,QAC9BN,EAASnB,EAAU0B,IAAIC,KAAK3B,GACxBuB,GACAxB,EAAepB,IAAI,mBAAmB,IAGlB,oBAAZ2C,EACZH,EAASG,GAGTH,EAAS,KACTpB,EAAeZ,OAAO,mBAE9B,EACMuC,EAAM,YAAaf,GAOrB,IANkB,IAAdS,IACAA,GAAY,EACG,OAAXD,IAA6D,IAA1CpB,EAAef,IAAI,oBACtCqC,GAAgB,IAGpBF,EAAQ,CACR,MAAMP,EAAUF,EAAiBQ,MAAM,KAAMP,GAC7CQ,EAAOP,EACX,CACJ,EACMgB,EAAa,SAAUC,GACzB,OAAO,YAAalB,GAChBe,EAAIG,KAAWlB,EACnB,CACJ,EACMmB,EAAQ,YAAanB,GACvB,MAAMC,EAAU,4BAA8BF,KAAoBC,GAClEX,EAAU8B,MAAMlB,EACpB,EACMmB,EAAQ,YAAapB,GACvB,MAAMC,EAAU,yBAAyBF,KAAoBC,KAE7D,MADAX,EAAU8B,MAAMlB,GACV,IAAIoB,MAAMpB,EACpB,EACMqB,EAAO,YAAatB,GACtB,MAAMC,EAAU,qBAAuBF,KAAoBC,GAC3DX,EAAUiC,KAAKrB,EACnB,EAKMsB,EAAqB,WAED,qBAAXvC,QACPA,OAAOwC,UACPxC,OAAOwC,SAASC,WACgC,IAAhDzC,OAAOwC,SAASC,SAASC,QAAQ,WACjCJ,EAAK,4FAGb,EAIMK,EAAsB,SAAUC,GAClC,MAAwB,kBAATA,IACVA,IAASA,GACNA,IAASC,OAAOC,mBAChBF,IAASC,OAAOE,kBAC5B,EACMC,EAAsB,SAAUC,GAClC,IAAI,WAAuC,aAAxBC,SAASC,WACxBF,QAEC,CAGD,IAAIG,GAAS,EACb,MAAMC,EAAY,WACTH,SAASI,KAITF,IACDA,GAAS,EACTH,KALAM,WAAWF,EAAWG,KAAKC,MAAM,IAOzC,EACIP,SAASQ,kBACTR,SAASQ,iBAAiB,mBAAoBL,GAAW,GAEzDrD,OAAO0D,iBAAiB,OAAQL,GAAW,IAGtCH,SAASS,cAGdT,SAASS,YAAY,sBAAsB,KACX,aAAxBT,SAASC,YACTE,GACJ,IAIJrD,OAAO2D,YAAY,SAAUN,GAKrC,CACJ,EAIMO,EAAW,aAIXC,EAAW,aAIXC,EAAc,SAAUC,EAAGC,GAC7B,GAAID,IAAMC,EACN,OAAO,EAEN,GAAID,IAAMH,GAAYI,IAAMH,EAC7B,OAAQ,EAEP,GAAIG,IAAMJ,GAAYG,IAAMF,EAC7B,OAAO,EAEN,CACD,MAAMI,EAASC,EAAYH,GAAII,EAASD,EAAYF,GACpD,OAAe,OAAXC,EACe,OAAXE,EACOF,EAASE,IAAW,EAAIJ,EAAE5C,OAAS6C,EAAE7C,OAAS8C,EAASE,GAGtD,EAGI,OAAXA,EACE,EAGAJ,EAAIC,GAAK,EAAI,CAE5B,CACJ,EAIMI,EAAgB,SAAUL,EAAGC,GAC/B,OAAID,IAAMC,EACC,EAEFD,EAAIC,GACD,EAGD,CAEf,EACMK,EAAa,SAAUpF,EAAKqF,GAC9B,GAAIA,GAAOrF,KAAOqF,EACd,OAAOA,EAAIrF,GAGX,MAAM,IAAIoD,MAAM,yBAA2BpD,EAAM,iBAAkB,QAAUqF,GAErF,EACMC,EAAoB,SAAUD,GAChC,GAAmB,kBAARA,GAA4B,OAARA,EAC3B,OAAO,QAAUA,GAErB,MAAME,EAAO,GAEb,IAAK,MAAMC,KAAKH,EACZE,EAAKE,KAAKD,GAGdD,EAAKG,OACL,IAAI1F,EAAM,IACV,IAAK,IAAIiC,EAAI,EAAGA,EAAIsD,EAAKrD,OAAQD,IACnB,IAANA,IACAjC,GAAO,KAEXA,IAAO,QAAUuF,EAAKtD,IACtBjC,GAAO,IACPA,GAAOsF,EAAkBD,EAAIE,EAAKtD,KAGtC,OADAjC,GAAO,IACAA,CACX,EAOM2F,EAAoB,SAAUnE,EAAKoE,GACrC,MAAMC,EAAMrE,EAAIU,OAChB,GAAI2D,GAAOD,EACP,MAAO,CAACpE,GAEZ,MAAMsE,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKE,GAAKH,EACtBG,EAAIH,EAAUC,EACdC,EAASL,KAAKjE,EAAIwE,UAAUD,EAAGF,IAG/BC,EAASL,KAAKjE,EAAIwE,UAAUD,EAAGA,EAAIH,IAG3C,OAAOE,CACX,EAOA,SAASG,EAAKZ,EAAKrB,GACf,IAAK,MAAMhE,KAAOqF,EACVA,EAAIa,eAAelG,IACnBgE,EAAGhE,EAAKqF,EAAIrF,GAGxB,CAQA,MAAMmG,EAAwB,SAAUC,IACpC,SAAQ1C,EAAoB0C,GAAI,uBAChC,MAAMC,EAAQ,GAAIC,EAAQ,GACpBC,GAAQ,GAAMF,EAAQ,GAAM,EAClC,IAAIG,EAAGvF,EAAGwF,EAAGC,EAAIzE,EAGP,IAANmE,GACAnF,EAAI,EACJwF,EAAI,EACJD,EAAI,EAAIJ,KAAOO,IAAW,EAAI,IAG9BH,EAAIJ,EAAI,EACRA,EAAI7B,KAAKqC,IAAIR,GACTA,GAAK7B,KAAKsC,IAAI,EAAG,EAAIN,IAErBG,EAAKnC,KAAKuC,IAAIvC,KAAKC,MAAMD,KAAKzB,IAAIsD,GAAK7B,KAAKwC,KAAMR,GAClDtF,EAAIyF,EAAKH,EACTE,EAAIlC,KAAKyC,MAAMZ,EAAI7B,KAAKsC,IAAI,EAAGP,EAAQI,GAAMnC,KAAKsC,IAAI,EAAGP,MAIzDrF,EAAI,EACJwF,EAAIlC,KAAKyC,MAAMZ,EAAI7B,KAAKsC,IAAI,EAAG,EAAIN,EAAOD,MAIlD,MAAMW,EAAO,GACb,IAAKhF,EAAIqE,EAAOrE,EAAGA,GAAK,EACpBgF,EAAKxB,KAAKgB,EAAI,EAAI,EAAI,GACtBA,EAAIlC,KAAKC,MAAMiC,EAAI,GAEvB,IAAKxE,EAAIoE,EAAOpE,EAAGA,GAAK,EACpBgF,EAAKxB,KAAKxE,EAAI,EAAI,EAAI,GACtBA,EAAIsD,KAAKC,MAAMvD,EAAI,GAEvBgG,EAAKxB,KAAKe,EAAI,EAAI,GAClBS,EAAKC,UACL,MAAM1F,EAAMyF,EAAKE,KAAK,IAEtB,IAAIC,EAAgB,GACpB,IAAKnF,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CACxB,IAAIoF,EAAUC,SAAS9F,EAAI+F,OAAOtF,EAAG,GAAI,GAAGxB,SAAS,IAC9B,IAAnB4G,EAAQnF,SACRmF,EAAU,IAAMA,GAEpBD,GAAgCC,CACpC,CACA,OAAOD,EAAcI,aACzB,EAKMC,EAAiC,WACnC,QAA4B,kBAAX1G,SACbA,OAAO,YACPA,OAAO,UAAU,cAChB,UAAU2G,KAAK3G,OAAOwC,SAASoE,MACxC,EAIMC,EAAoB,WAEtB,MAA0B,kBAAZC,SAA8C,kBAAfA,QAAQC,EACzD,EAIA,SAASC,EAAmBC,EAAMC,GAC9B,IAAIC,EAAS,gBACA,YAATF,EACAE,EACI,0FAGU,sBAATF,EACLE,EAAS,6DAEK,gBAATF,IACLE,EAAS,8BAEb,MAAMhF,EAAQ,IAAIE,MAAM4E,EAAO,OAASC,EAAME,MAAM1H,WAAa,KAAOyH,GAGxE,OADAhF,EAAM8E,KAAOA,EAAKI,cACXlF,CACX,CAIA,MAAMmF,EAAkB,IAAIC,OAAO,qBAI7BC,GAAkB,WAIlBC,EAAiB,WAIjBvD,EAAc,SAAUzD,GAC1B,GAAI6G,EAAgBX,KAAKlG,GAAM,CAC3B,MAAMiH,EAAS7E,OAAOpC,GACtB,GAAIiH,GAAUF,GAAkBE,GAAUD,EACtC,OAAOC,CAEf,CACA,OAAO,IACX,EAkBMC,EAAiB,SAAU1E,GAC7B,IACIA,GACJ,CACA,MAAO/C,GAEHqD,YAAW,KAKP,MAAMqE,EAAQ1H,EAAE0H,OAAS,GAEzB,MADAtF,EAAK,yCAA0CsF,GACzC1H,CAAC,GACRsD,KAAKC,MAAM,GAClB,CACJ,EAIMoE,EAAe,WACjB,MAAMC,EAA+B,kBAAX9H,QACtBA,OAAO,cACPA,OAAO,aAAa,cACpB,GAKJ,OAAQ8H,EAAUC,OAAO,6FAA+F,CAC5H,EAUMC,EAAwB,SAAU/E,EAAIgF,GACxC,MAAMC,EAAU3E,WAAWN,EAAIgF,GAe/B,MAbuB,kBAAZC,GAES,qBAATC,MAEPA,KAAK,cAELA,KAAKC,WAAWF,GAGQ,kBAAZA,GAAwBA,EAAQ,UAE5CA,EAAQ,WAELA,CACX;;;;;;;;;;;;;;;;;AAqBA,MAAMG,EACF,WAAAxJ,CAAYyJ,EAAUC,GAClB9K,KAAK6K,SAAWA,EAChB7K,KAAK8K,iBAAmBA,EACxB9K,KAAK+K,SAAgC,OAArBD,QAAkD,IAArBA,OAA8B,EAASA,EAAiBE,aAAa,CAAEC,UAAU,IACzHjL,KAAK+K,UACe,OAArBD,QAAkD,IAArBA,GAAuCA,EAAiBlJ,MAAMsJ,MAAKH,GAAa/K,KAAK+K,SAAWA,GAErI,CACA,QAAAI,CAASC,GACL,OAAKpL,KAAK+K,SAgBH/K,KAAK+K,SAASI,SAASC,GAfnB,IAAIC,SAAQ,CAACC,EAASC,KAKzBzF,YAAW,KACH9F,KAAK+K,SACL/K,KAAKmL,SAASC,GAAcF,KAAKI,EAASC,GAG1CD,EAAQ,KACZ,GACD,EAAE,GAIjB,CACA,sBAAAE,CAAuBC,GACnB,IAAIC,EAC6B,QAAhCA,EAAK1L,KAAK8K,wBAAqC,IAAPY,GAAyBA,EAAG9J,MAAMsJ,MAAKH,GAAYA,EAASY,iBAAiBF,IAC1H,CACA,qBAAAG,GACI/G,EAAK,oDAAoD7E,KAAK6K,wFAElE;;;;;;;;;;;;;;;;GAsBJ,MAAMgB,EACF,WAAAzK,CAAYyJ,EAAUiB,EAAkBC,GACpC/L,KAAK6K,SAAWA,EAChB7K,KAAK8L,iBAAmBA,EACxB9L,KAAK+L,cAAgBA,EACrB/L,KAAKgM,MAAQ,KACbhM,KAAKgM,MAAQD,EAAcf,aAAa,CAAEC,UAAU,IAC/CjL,KAAKgM,OACND,EAAcE,QAAOC,GAASlM,KAAKgM,MAAQE,GAEnD,CACA,QAAAf,CAASC,GACL,OAAKpL,KAAKgM,MAgBHhM,KAAKgM,MAAMb,SAASC,GAAce,OAAMzH,GAGvCA,GAAwB,+BAAfA,EAAM8E,MACflF,EAAI,kEACG,MAGA+G,QAAQE,OAAO7G,KAvBnB,IAAI2G,SAAQ,CAACC,EAASC,KAKzBzF,YAAW,KACH9F,KAAKgM,MACLhM,KAAKmL,SAASC,GAAcF,KAAKI,EAASC,GAG1CD,EAAQ,KACZ,GACD,EAAE,GAcjB,CACA,sBAAAE,CAAuBC,GAGfzL,KAAKgM,MACLhM,KAAKgM,MAAMI,qBAAqBX,GAGhCzL,KAAK+L,cACAnK,MACAsJ,MAAKgB,GAAQA,EAAKE,qBAAqBX,IAEpD,CACA,yBAAAY,CAA0BZ,GACtBzL,KAAK+L,cACAnK,MACAsJ,MAAKgB,GAAQA,EAAKI,wBAAwBb,IACnD,CACA,qBAAAG,GACI,IAAIW,EAAe,0DACfvM,KAAK6K,SADU,iFAIf,eAAgB7K,KAAK8L,iBACrBS,GACI,uJAIC,mBAAoBvM,KAAK8L,iBAC9BS,GACI,2JAKJA,GACI,kKAIR1H,EAAK0H,EACT,EAGJ,MAAMC,EACF,WAAApL,CAAYqL,GACRzM,KAAKyM,YAAcA,CACvB,CACA,QAAAtB,CAASC,GACL,OAAOC,QAAQC,QAAQ,CACnBmB,YAAazM,KAAKyM,aAE1B,CACA,sBAAAjB,CAAuBC,GAGnBA,EAASzL,KAAKyM,YAClB,CACA,yBAAAJ,CAA0BZ,GAAY,CACtC,qBAAAG,GAA0B,EAG9BY,EAAsBE,MAAQ;;;;;;;;;;;;;;;;;AAkB9B,MAAMC,EAAmB,IACnBC,GAAgB,IAChBC,GAA0B,IAC1BC,GAAgB,IAChBC,GAAY,IAGZC,GAAkB,6EAClBC,GAAqB,KACrBC,GAAuB,IACvBC,GAAwB,KACxBC,GAAY,YACZC,GAAe;;;;;;;;;;;;;;;;;AAqBrB,MAAMC,GASF,WAAAlM,CAAYmM,EAAMC,EAAQC,EAAWC,EAAeC,GAAY,EAAOC,EAAiB,GAAIC,GAAgC,EAAOC,GAAkB,GACjJ9N,KAAKwN,OAASA,EACdxN,KAAKyN,UAAYA,EACjBzN,KAAK0N,cAAgBA,EACrB1N,KAAK2N,UAAYA,EACjB3N,KAAK4N,eAAiBA,EACtB5N,KAAK6N,8BAAgCA,EACrC7N,KAAK8N,gBAAkBA,EACvB9N,KAAK+N,MAAQR,EAAKvE,cAClBhJ,KAAKgO,QAAUhO,KAAK+N,MAAMhF,OAAO/I,KAAK+N,MAAM9I,QAAQ,KAAO,GAC3DjF,KAAKiO,aACDvL,EAAkBd,IAAI,QAAU2L,IAASvN,KAAK+N,KACtD,CACA,eAAAG,GACI,MAA0C,OAAnClO,KAAKiO,aAAalF,OAAO,EAAG,EACvC,CACA,YAAAoF,GACI,MAAyB,mBAAjBnO,KAAKgO,SACQ,wBAAjBhO,KAAKgO,OACb,CACA,QAAIT,GACA,OAAOvN,KAAK+N,KAChB,CACA,QAAIR,CAAKa,GACDA,IAAYpO,KAAKiO,eACjBjO,KAAKiO,aAAeG,EAChBpO,KAAKkO,mBACLxL,EAAkBnB,IAAI,QAAUvB,KAAK+N,MAAO/N,KAAKiO,cAG7D,CACA,QAAAhM,GACI,IAAIe,EAAMhD,KAAKqO,cAIf,OAHIrO,KAAK4N,iBACL5K,GAAO,IAAMhD,KAAK4N,eAAiB,KAEhC5K,CACX,CACA,WAAAqL,GACI,MAAMrJ,EAAWhF,KAAKwN,OAAS,WAAa,UACtC/D,EAAQzJ,KAAK6N,8BACb,OAAO7N,KAAKyN,YACZ,GACN,MAAO,GAAGzI,IAAWhF,KAAKuN,QAAQ9D,GACtC,EAEJ,SAAS6E,GAAwBC,GAC7B,OAAQA,EAAShB,OAASgB,EAASN,cAC/BM,EAASJ,gBACTI,EAASV,6BACjB,CAQA,SAASW,GAAsBD,EAAUE,EAAMC,GAG3C,IAAIC,EACJ,IAHA,QAAuB,kBAATF,EAAmB,+BACjC,QAAyB,kBAAXC,EAAqB,gCAE/BD,IAASrB,GACTuB,GACKJ,EAASf,OAAS,SAAW,SAAWe,EAASN,aAAe,YAEpE,IAAIQ,IAASpB,GAOd,MAAM,IAAIzI,MAAM,4BAA8B6J,GAN9CE,GACKJ,EAASf,OAAS,WAAa,WAC5Be,EAASN,aACT,OAIZ,CACIK,GAAwBC,KACxBG,EAAO,MAAQH,EAASd,WAE5B,MAAMmB,EAAQ,GAId,OAHAnH,EAAKiH,GAAQ,CAAClN,EAAKnB,KACfuO,EAAM3H,KAAKzF,EAAM,IAAMnB,EAAM,IAE1BsO,EAAUC,EAAMjG,KAAK,IAChC;;;;;;;;;;;;;;;;GAqBA,MAAMkG,GACF,WAAAzN,GACIpB,KAAK8O,UAAY,CAAC,CACtB,CACA,gBAAAC,CAAiB/M,EAAMgN,EAAS,IACvB,QAAShP,KAAK8O,UAAW9M,KAC1BhC,KAAK8O,UAAU9M,GAAQ,GAE3BhC,KAAK8O,UAAU9M,IAASgN,CAC5B,CACA,GAAApN,GACI,OAAO,QAAS5B,KAAK8O,UACzB;;;;;;;;;;;;;;;;GAmBJ,MAAMG,GAAc,CAAC,EACfC,GAAY,CAAC,EACnB,SAASC,GAA0BZ,GAC/B,MAAMa,EAAab,EAAStM,WAI5B,OAHKgN,GAAYG,KACbH,GAAYG,GAAc,IAAIP,IAE3BI,GAAYG,EACvB,CACA,SAASC,GAAgCd,EAAUe,GAC/C,MAAMF,EAAab,EAAStM,WAI5B,OAHKiN,GAAUE,KACXF,GAAUE,GAAcE,KAErBJ,GAAUE,EACrB;;;;;;;;;;;;;;;;GAsBA,MAAMG,GAIF,WAAAnO,CAAYoO,GACRxP,KAAKwP,WAAaA,EAClBxP,KAAKyP,iBAAmB,GACxBzP,KAAK0P,mBAAqB,EAC1B1P,KAAK2P,oBAAsB,EAC3B3P,KAAK4P,QAAU,IACnB,CACA,UAAAC,CAAWC,EAAaC,GACpB/P,KAAK2P,mBAAqBG,EAC1B9P,KAAK4P,QAAUG,EACX/P,KAAK2P,mBAAqB3P,KAAK0P,qBAC/B1P,KAAK4P,UACL5P,KAAK4P,QAAU,KAEvB,CAMA,cAAAI,CAAeC,EAAY9K,GACvBnF,KAAKyP,iBAAiBQ,GAAc9K,EACpC,MAAOnF,KAAKyP,iBAAiBzP,KAAK0P,oBAAqB,CACnD,MAAMQ,EAAYlQ,KAAKyP,iBAAiBzP,KAAK0P,2BACtC1P,KAAKyP,iBAAiBzP,KAAK0P,oBAClC,IAAK,IAAIjM,EAAI,EAAGA,EAAIyM,EAAUxM,SAAUD,EAChCyM,EAAUzM,IACVyG,GAAe,KACXlK,KAAKwP,WAAWU,EAAUzM,GAAG,IAIzC,GAAIzD,KAAK0P,qBAAuB1P,KAAK2P,mBAAoB,CACjD3P,KAAK4P,UACL5P,KAAK4P,UACL5P,KAAK4P,QAAU,MAEnB,KACJ,CACA5P,KAAK0P,oBACT,CACJ;;;;;;;;;;;;;;;;GAoBJ,MAAMS,GAAgC,QAChCC,GAAkC,QAClCC,GAAoC,aACpCC,GAAiC,UACjCC,GAA6B,KAC7BC,GAA6B,KAC7BC,GAAiC,MACjCC,GAAsC,KACtCC,GAAsC,MACtCC,GAAuC,KACvCC,GAA+B,IAC/BC,GAAgD,SAIhDC,GAAoB,KACpBC,GAAkB,GAClBC,GAAmBF,GAAoBC,GAMvCE,GAA6B,KAI7BC,GAAqB,IAI3B,MAAMC,GAYF,WAAAhQ,CAAYiQ,EAAQ9C,EAAU+C,EAAeC,EAAeC,EAAWC,EAAoBC,GACvF1R,KAAKqR,OAASA,EACdrR,KAAKuO,SAAWA,EAChBvO,KAAKsR,cAAgBA,EACrBtR,KAAKuR,cAAgBA,EACrBvR,KAAKwR,UAAYA,EACjBxR,KAAKyR,mBAAqBA,EAC1BzR,KAAK0R,cAAgBA,EACrB1R,KAAK2R,UAAY,EACjB3R,KAAK4R,cAAgB,EACrB5R,KAAK6R,gBAAiB,EACtB7R,KAAK8R,KAAOtN,EAAW6M,GACvBrR,KAAK+R,OAAS5C,GAA0BZ,GACxCvO,KAAKgS,MAAStD,IAEN1O,KAAKuR,gBACL7C,EAAOvB,IAAyBnN,KAAKuR,eAElC/C,GAAsBD,EAAUlB,GAAcqB,GAE7D,CAKA,IAAAuD,CAAKC,EAAWC,GACZnS,KAAKoS,cAAgB,EACrBpS,KAAKqS,cAAgBF,EACrBnS,KAAKsS,gBAAkB,IAAI/C,GAAe2C,GAC1ClS,KAAKuS,WAAY,EACjBvS,KAAKwS,qBAAuB1M,YAAW,KACnC9F,KAAK8R,KAAK,gCAEV9R,KAAKyS,YACLzS,KAAKwS,qBAAuB,IAAI,GAEjCzM,KAAKC,MAAMmL,KAEd5L,GAAoB,KAChB,GAAIvF,KAAKuS,UACL,OAGJvS,KAAK0S,gBAAkB,IAAIC,IAA2B,IAAIC,KACtD,MAAOC,EAASC,EAAMC,EAAMC,EAAMC,GAAQL,EAE1C,GADA5S,KAAKkT,wBAAwBN,GACxB5S,KAAK0S,gBAQV,GALI1S,KAAKwS,uBACLW,aAAanT,KAAKwS,sBAClBxS,KAAKwS,qBAAuB,MAEhCxS,KAAK6R,gBAAiB,EAClBgB,IAAY1C,GACZnQ,KAAK8C,GAAKgQ,EACV9S,KAAKoT,SAAWL,MAEf,IAAIF,IAAYzC,GAiBjB,MAAM,IAAIxL,MAAM,kCAAoCiO,GAfhDC,GAGA9S,KAAK0S,gBAAgBW,cAAe,EAGpCrT,KAAKsS,gBAAgBzC,WAAWiD,GAAM,KAClC9S,KAAKyS,WAAW,KAIpBzS,KAAKyS,WAKb,KACD,IAAIG,KACH,MAAOU,EAAInO,GAAQyN,EACnB5S,KAAKkT,wBAAwBN,GAC7B5S,KAAKsS,gBAAgBtC,eAAesD,EAAInO,EAAK,IAC9C,KACCnF,KAAKyS,WAAW,GACjBzS,KAAKgS,OAGR,MAAMuB,EAAY,CAAC,EACnBA,EAAUpD,IAAiC,IAC3CoD,EAAU9C,IAAkC1K,KAAKC,MAAsB,IAAhBD,KAAKyN,UACxDxT,KAAK0S,gBAAgBe,2BACrBF,EAAU7C,IACN1Q,KAAK0S,gBAAgBe,0BAE7BF,EAAU3G,IAAiBD,EACvB3M,KAAKyR,qBACL8B,EAAU1G,IAA2B7M,KAAKyR,oBAE1CzR,KAAK0R,gBACL6B,EAAUtG,IAAsBjN,KAAK0R,eAErC1R,KAAKsR,gBACLiC,EAAUrG,IAAwBlN,KAAKsR,eAEvCtR,KAAKuR,gBACLgC,EAAUpG,IAAyBnN,KAAKuR,eAEpB,qBAAbxM,UACPA,SAAS2O,UACT1G,GAAgB9D,KAAKnE,SAAS2O,YAC9BH,EAAUzG,IAAiBC,IAE/B,MAAM4G,EAAa3T,KAAKgS,MAAMuB,GAC9BvT,KAAK8R,KAAK,+BAAiC6B,GAC3C3T,KAAK0S,gBAAgBkB,OAAOD,GAAY,QAEtC,GAEV,CAIA,KAAAE,GACI7T,KAAK0S,gBAAgBoB,cAAc9T,KAAK8C,GAAI9C,KAAKoT,UACjDpT,KAAK+T,uBAAuB/T,KAAK8C,GAAI9C,KAAKoT,SAC9C,CAIA,iBAAOY,GACH5C,GAAsB6C,aAAc,CACxC,CAIA,oBAAOC,GACH9C,GAAsB+C,gBAAiB,CAC3C,CAEA,kBAAOC,GACH,QAAI,cAGKhD,GAAsB6C,cAMlB7C,GAAsB+C,gBACP,qBAAb1O,UACmB,MAA1BA,SAAS4O,gBACRpL,MACAG,IAEb,CAIA,qBAAAkL,GAA0B,CAI1B,SAAAC,GACIvU,KAAKuS,WAAY,EACbvS,KAAK0S,kBACL1S,KAAK0S,gBAAgB8B,QACrBxU,KAAK0S,gBAAkB,MAGvB1S,KAAKyU,iBACLhP,SAASI,KAAK6O,YAAY1U,KAAKyU,gBAC/BzU,KAAKyU,eAAiB,MAEtBzU,KAAKwS,uBACLW,aAAanT,KAAKwS,sBAClBxS,KAAKwS,qBAAuB,KAEpC,CAIA,SAAAC,GACSzS,KAAKuS,YACNvS,KAAK8R,KAAK,8BACV9R,KAAKuU,YACDvU,KAAKqS,gBACLrS,KAAKqS,cAAcrS,KAAK6R,gBACxB7R,KAAKqS,cAAgB,MAGjC,CAKA,KAAAmC,GACSxU,KAAKuS,YACNvS,KAAK8R,KAAK,6BACV9R,KAAKuU,YAEb,CAMA,IAAAI,CAAKxP,GACD,MAAMyP,GAAU,QAAUzP,GAC1BnF,KAAK2R,WAAaiD,EAAQlR,OAC1B1D,KAAK+R,OAAOhD,iBAAiB,aAAc6F,EAAQlR,QAEnD,MAAMmR,GAAa,QAAaD,GAG1BtN,EAAWH,EAAkB0N,EAAY5D,IAG/C,IAAK,IAAIxN,EAAI,EAAGA,EAAI6D,EAAS5D,OAAQD,IACjCzD,KAAK0S,gBAAgBoC,eAAe9U,KAAKoS,cAAe9K,EAAS5D,OAAQ4D,EAAS7D,IAClFzD,KAAKoS,eAEb,CAMA,sBAAA2B,CAAuBjR,EAAIiS,GACvB,IAAI,UACA,OAEJ/U,KAAKyU,eAAiBhP,SAAS4O,cAAc,UAC7C,MAAMd,EAAY,CAAC,EACnBA,EAAUzC,IAAiD,IAC3DyC,EAAUhD,IAA8BzN,EACxCyQ,EAAU/C,IAA8BuE,EACxC/U,KAAKyU,eAAeO,IAAMhV,KAAKgS,MAAMuB,GACrCvT,KAAKyU,eAAeQ,MAAMC,QAAU,OACpCzP,SAASI,KAAKsP,YAAYnV,KAAKyU,eACnC,CAIA,uBAAAvB,CAAwBN,GAEpB,MAAMhB,GAAgB,QAAUgB,GAAMlP,OACtC1D,KAAK4R,eAAiBA,EACtB5R,KAAK+R,OAAOhD,iBAAiB,iBAAkB6C,EACnD,EAKJ,MAAMe,GAOF,WAAAvR,CAAYgU,EAAWC,EAAalD,EAAcH,GAiB9C,GAhBAhS,KAAKmS,aAAeA,EACpBnS,KAAKgS,MAAQA,EAGbhS,KAAKsV,oBAAsB,IAAIC,IAE/BvV,KAAKwV,YAAc,GAMnBxV,KAAKyV,cAAgB1P,KAAKC,MAAsB,IAAhBD,KAAKyN,UAGrCxT,KAAKqT,cAAe,GACf,UAmCDrT,KAAKoV,UAAYA,EACjBpV,KAAKqV,YAAcA,MApCL,CAKdrV,KAAKyT,yBAA2B5Q,IAChCN,OAAO8N,GAAoCrQ,KAAKyT,0BAA4B2B,EAC5E7S,OAAO+N,GAAiCtQ,KAAKyT,0BACzC4B,EAEJrV,KAAK0V,SAAW/C,GAA2BgD,gBAE3C,IAAIC,EAAS,GAGb,GAAI5V,KAAK0V,SAASV,KACwC,gBAAtDhV,KAAK0V,SAASV,IAAIjM,OAAO,EAAG,IAAyC,CACrE,MAAM8M,EAAgBpQ,SAASqQ,OAC/BF,EAAS,4BAA8BC,EAAgB,cAC3D,CACA,MAAME,EAAiB,eAAiBH,EAAS,iBACjD,IACI5V,KAAK0V,SAASM,IAAI/D,OAClBjS,KAAK0V,SAASM,IAAIC,MAAMF,GACxB/V,KAAK0V,SAASM,IAAIxB,OACtB,CACA,MAAO/R,GACH6B,EAAI,2BACA7B,EAAE0H,OACF7F,EAAI7B,EAAE0H,OAEV7F,EAAI7B,EACR,CACJ,CAKJ,CAKA,oBAAOkT,GACH,MAAMO,EAASzQ,SAAS4O,cAAc,UAGtC,GAFA6B,EAAOjB,MAAMC,QAAU,QAEnBzP,SAASI,KAuBT,KAAM,oGAtBNJ,SAASI,KAAKsP,YAAYe,GAC1B,IAII,MAAM5P,EAAI4P,EAAOC,cAAc1Q,SAC1Ba,GAEDhC,EAAI,gCAEZ,CACA,MAAO7B,GACH,MAAMqT,EAASrQ,SAASqQ,OACxBI,EAAOlB,IACH,gEACIc,EACA,0BACZ,CAmBJ,OAXII,EAAOE,gBACPF,EAAOF,IAAME,EAAOE,gBAEfF,EAAOC,cACZD,EAAOF,IAAME,EAAOC,cAAc1Q,SAG7ByQ,EAAOzQ,WAEZyQ,EAAOF,IAAME,EAAOzQ,UAEjByQ,CACX,CAIA,KAAA1B,GAEIxU,KAAKqW,OAAQ,EACTrW,KAAK0V,WAIL1V,KAAK0V,SAASM,IAAInQ,KAAKyQ,YAAc,GACrCxQ,YAAW,KACe,OAAlB9F,KAAK0V,WACLjQ,SAASI,KAAK6O,YAAY1U,KAAK0V,UAC/B1V,KAAK0V,SAAW,KACpB,GACD3P,KAAKC,MAAM,KAGlB,MAAMmM,EAAenS,KAAKmS,aACtBA,IACAnS,KAAKmS,aAAe,KACpBA,IAER,CAMA,aAAA2B,CAAchR,EAAIiS,GACd/U,KAAKuW,KAAOzT,EACZ9C,KAAKwW,KAAOzB,EACZ/U,KAAKqW,OAAQ,EAEb,MAAOrW,KAAKyW,eAChB,CAQA,WAAAA,GAII,GAAIzW,KAAKqW,OACLrW,KAAKqT,cACLrT,KAAKsV,oBAAoBoB,MAAQ1W,KAAKwV,YAAY9R,OAAS,EAAI,EAAI,GAAI,CAEvE1D,KAAKyV,gBACL,MAAMlC,EAAY,CAAC,EACnBA,EAAUhD,IAA8BvQ,KAAKuW,KAC7ChD,EAAU/C,IAA8BxQ,KAAKwW,KAC7CjD,EAAU9C,IAAkCzQ,KAAKyV,cACjD,IAAIkB,EAAS3W,KAAKgS,MAAMuB,GAEpBqD,EAAgB,GAChBnT,EAAI,EACR,MAAOzD,KAAKwV,YAAY9R,OAAS,EAAG,CAEhC,MAAMmT,EAAU7W,KAAKwV,YAAY,GACjC,KAAIqB,EAAQC,EAAEpT,OACVsN,GACA4F,EAAclT,QACdqN,IAuBA,MAvBmB,CAEnB,MAAMgG,EAAS/W,KAAKwV,YAAYwB,QAChCJ,EACIA,EACI,IACAjG,GACAlN,EACA,IACAsT,EAAOE,IACP,IACArG,GACAnN,EACA,IACAsT,EAAOG,GACP,IACArG,GACApN,EACA,IACAsT,EAAOD,EACfrT,GACJ,CAIJ,CAGA,OAFAkT,GAAkBC,EAClB5W,KAAKmX,gBAAgBR,EAAQ3W,KAAKyV,gBAC3B,CACX,CAEI,OAAO,CAEf,CAOA,cAAAX,CAAesC,EAAQC,EAAWlS,GAE9BnF,KAAKwV,YAAYvO,KAAK,CAAEgQ,IAAKG,EAAQF,GAAIG,EAAWP,EAAG3R,IAGnDnF,KAAKqW,OACLrW,KAAKyW,aAEb,CAMA,eAAAU,CAAgBG,EAAKC,GAEjBvX,KAAKsV,oBAAoBkC,IAAID,GAC7B,MAAME,EAAe,KACjBzX,KAAKsV,oBAAoBoC,OAAOH,GAChCvX,KAAKyW,aAAa,EAIhBkB,EAAmB7R,WAAW2R,EAAc1R,KAAKC,MAAMkL,KACvD0G,EAAe,KAEjBzE,aAAawE,GAEbF,GAAc,EAElBzX,KAAK4T,OAAO0D,EAAKM,EACrB,CAMA,MAAAhE,CAAO0D,EAAKO,IACJ,UAEA7X,KAAK8X,eAAeR,EAAKO,GAGzB/R,YAAW,KACP,IAEI,IAAK9F,KAAKqT,aACN,OAEJ,MAAM0E,EAAY/X,KAAK0V,SAASM,IAAI3B,cAAc,UAClD0D,EAAUtJ,KAAO,kBACjBsJ,EAAUC,OAAQ,EAClBD,EAAU/C,IAAMsC,EAEhBS,EAAUE,OAASF,EAAUG,mBACzB,WAEI,MAAMC,EAASJ,EAAUrS,WACpByS,GAAqB,WAAXA,GAAkC,aAAXA,IAElCJ,EAAUE,OAASF,EAAUG,mBAAqB,KAC9CH,EAAUK,YACVL,EAAUK,WAAW1D,YAAYqD,GAErCF,IAER,EACJE,EAAUM,QAAU,KAChB/T,EAAI,oCAAsCgT,GAC1CtX,KAAKqT,cAAe,EACpBrT,KAAKwU,OAAO,EAEhBxU,KAAK0V,SAASM,IAAInQ,KAAKsP,YAAY4C,EACvC,CACA,MAAOtV,GAEP,IACDsD,KAAKC,MAAM,GAEtB;;;;;;;;;;;;;;;;GAmBJ,MAAMsS,GAA2B,MAC3BC,GAA+B,KACrC,IAAIC,GAAgB,KACQ,qBAAjBC,aACPD,GAAgBC,aAEU,qBAAdC,YACZF,GAAgBE,WAKpB,MAAMC,GAYF,WAAAvX,CAAYiQ,EAAQ9C,EAAU+C,EAAeC,EAAeC,EAAWC,EAAoBC,GACvF1R,KAAKqR,OAASA,EACdrR,KAAKsR,cAAgBA,EACrBtR,KAAKuR,cAAgBA,EACrBvR,KAAKwR,UAAYA,EACjBxR,KAAK4Y,eAAiB,KACtB5Y,KAAK6Y,OAAS,KACd7Y,KAAK8Y,YAAc,EACnB9Y,KAAK2R,UAAY,EACjB3R,KAAK4R,cAAgB,EACrB5R,KAAK8R,KAAOtN,EAAWxE,KAAKqR,QAC5BrR,KAAK+R,OAAS5C,GAA0BZ,GACxCvO,KAAK2O,QAAUgK,GAAoBI,eAAexK,EAAUkD,EAAoBC,EAAeH,EAAeD,GAC9GtR,KAAK2N,UAAYY,EAASZ,SAC9B,CAQA,qBAAOoL,CAAexK,EAAUkD,EAAoBC,EAAeH,EAAeD,GAC9E,MAAMiC,EAAY,CAAC,EAoBnB,OAnBAA,EAAU3G,IAAiBD,IACtB,WACmB,qBAAb5H,UACPA,SAAS2O,UACT1G,GAAgB9D,KAAKnE,SAAS2O,YAC9BH,EAAUzG,IAAiBC,IAE3B0E,IACA8B,EAAU1G,IAA2B4E,GAErCC,IACA6B,EAAUtG,IAAsByE,GAEhCH,IACAgC,EAAUpG,IAAyBoE,GAEnCD,IACAiC,EAAUrG,IAAwBoE,GAE/B9C,GAAsBD,EAAUnB,GAAWmG,EACtD,CAKA,IAAAtB,CAAKC,EAAWC,GACZnS,KAAKmS,aAAeA,EACpBnS,KAAKkS,UAAYA,EACjBlS,KAAK8R,KAAK,2BAA6B9R,KAAK2O,SAC5C3O,KAAK6R,gBAAiB,EAEtBnP,EAAkBnB,IAAI,8BAA8B,GACpD,IACI,IAAIyX,EACJ,IAAI,UAAa,CACb,MAAMC,EAASjZ,KAAK2N,UAAY,YAAc,OAE9CqL,EAAU,CACNE,QAAS,CACL,aAAc,YAAYvM,KAAoB1L,KAAekY,QAAQC,YAAYH,IACjF,mBAAoBjZ,KAAKsR,eAAiB,KAQ9CtR,KAAKwR,YACLwH,EAAQE,QAAQ,iBAAmB,UAAUlZ,KAAKwR,aAElDxR,KAAKuR,gBACLyH,EAAQE,QAAQ,uBAAyBlZ,KAAKuR,eAGlD,MAAM8H,EAAM,oDACNC,EAA2C,IAAnCtZ,KAAK2O,QAAQ1J,QAAQ,UAC7BoU,EAAI,gBAAkBA,EAAI,eAC1BA,EAAI,eAAiBA,EAAI,cAC3BC,IACAN,EAAQ,SAAW,CAAEO,OAAQD,GAErC,CACAtZ,KAAKwZ,OAAS,IAAIhB,GAAcxY,KAAK2O,QAAS,GAAIqK,EACtD,CACA,MAAOvW,GACHzC,KAAK8R,KAAK,kCACV,MAAMpN,EAAQjC,EAAEe,SAAWf,EAAE0C,KAK7B,OAJIT,GACA1E,KAAK8R,KAAKpN,QAEd1E,KAAKyS,WAET,CACAzS,KAAKwZ,OAAOC,OAAS,KACjBzZ,KAAK8R,KAAK,wBACV9R,KAAK6R,gBAAiB,CAAI,EAE9B7R,KAAKwZ,OAAOE,QAAU,KAClB1Z,KAAK8R,KAAK,0CACV9R,KAAKwZ,OAAS,KACdxZ,KAAKyS,WAAW,EAEpBzS,KAAKwZ,OAAOG,UAAYC,IACpB5Z,KAAK6Z,oBAAoBD,EAAE,EAE/B5Z,KAAKwZ,OAAOnB,QAAU5V,IAClBzC,KAAK8R,KAAK,yCAEV,MAAMpN,EAAQjC,EAAEe,SAAWf,EAAE0C,KACzBT,GACA1E,KAAK8R,KAAKpN,GAEd1E,KAAKyS,WAAW,CAExB,CAIA,KAAAoB,GAAU,CACV,oBAAOK,GACHyE,GAAoBxE,gBAAiB,CACzC,CACA,kBAAOC,GACH,IAAI0F,GAAe,EACnB,GAAyB,qBAAdC,WAA6BA,UAAU1P,UAAW,CACzD,MAAM2P,EAAkB,iCAClBC,EAAkBF,UAAU1P,UAAU6P,MAAMF,GAC9CC,GAAmBA,EAAgBvW,OAAS,GACxCyW,WAAWF,EAAgB,IAAM,MACjCH,GAAe,EAG3B,CACA,OAASA,GACa,OAAlBtB,KACCG,GAAoBxE,cAC7B,CAIA,uBAAOiG,GAGH,OAAQ1X,EAAkBN,oBACkC,IAAxDM,EAAkBd,IAAI,6BAC9B,CACA,qBAAA0S,GACI5R,EAAkBX,OAAO,6BAC7B,CACA,YAAAsY,CAAalV,GAET,GADAnF,KAAK6Y,OAAO5R,KAAK9B,GACbnF,KAAK6Y,OAAOnV,SAAW1D,KAAK8Y,YAAa,CACzC,MAAMwB,EAAWta,KAAK6Y,OAAOlQ,KAAK,IAClC3I,KAAK6Y,OAAS,KACd,MAAM0B,GAAW,QAASD,GAE1Bta,KAAKkS,UAAUqI,EACnB,CACJ,CAIA,oBAAAC,CAAqBC,GACjBza,KAAK8Y,YAAc2B,EACnBza,KAAK6Y,OAAS,EAClB,CAKA,kBAAA6B,CAAmBvV,GAIf,IAHA,QAAuB,OAAhBnF,KAAK6Y,OAAiB,kCAGzB1T,EAAKzB,QAAU,EAAG,CAClB,MAAM+W,EAAarV,OAAOD,GAC1B,IAAKwV,MAAMF,GAEP,OADAza,KAAKwa,qBAAqBC,GACnB,IAEf,CAEA,OADAza,KAAKwa,qBAAqB,GACnBrV,CACX,CAKA,mBAAA0U,CAAoBe,GAChB,GAAoB,OAAhB5a,KAAKwZ,OACL,OAEJ,MAAMrU,EAAOyV,EAAK,QAIlB,GAHA5a,KAAK4R,eAAiBzM,EAAKzB,OAC3B1D,KAAK+R,OAAOhD,iBAAiB,iBAAkB5J,EAAKzB,QACpD1D,KAAK6a,iBACe,OAAhB7a,KAAK6Y,OAEL7Y,KAAKqa,aAAalV,OAEjB,CAED,MAAM2V,EAAgB9a,KAAK0a,mBAAmBvV,GACxB,OAAlB2V,GACA9a,KAAKqa,aAAaS,EAE1B,CACJ,CAKA,IAAAnG,CAAKxP,GACDnF,KAAK6a,iBACL,MAAMjG,GAAU,QAAUzP,GAC1BnF,KAAK2R,WAAaiD,EAAQlR,OAC1B1D,KAAK+R,OAAOhD,iBAAiB,aAAc6F,EAAQlR,QAGnD,MAAM4D,EAAWH,EAAkByN,EAAS0D,IAExChR,EAAS5D,OAAS,GAClB1D,KAAK+a,YAAYC,OAAO1T,EAAS5D,SAGrC,IAAK,IAAID,EAAI,EAAGA,EAAI6D,EAAS5D,OAAQD,IACjCzD,KAAK+a,YAAYzT,EAAS7D,GAElC,CACA,SAAA8Q,GACIvU,KAAKuS,WAAY,EACbvS,KAAK4Y,iBACLqC,cAAcjb,KAAK4Y,gBACnB5Y,KAAK4Y,eAAiB,MAEtB5Y,KAAKwZ,SACLxZ,KAAKwZ,OAAOhF,QACZxU,KAAKwZ,OAAS,KAEtB,CACA,SAAA/G,GACSzS,KAAKuS,YACNvS,KAAK8R,KAAK,+BACV9R,KAAKuU,YAEDvU,KAAKmS,eACLnS,KAAKmS,aAAanS,KAAK6R,gBACvB7R,KAAKmS,aAAe,MAGhC,CAKA,KAAAqC,GACSxU,KAAKuS,YACNvS,KAAK8R,KAAK,6BACV9R,KAAKuU,YAEb,CAKA,cAAAsG,GACII,cAAcjb,KAAK4Y,gBACnB5Y,KAAK4Y,eAAiBsC,aAAY,KAE1Blb,KAAKwZ,QACLxZ,KAAK+a,YAAY,KAErB/a,KAAK6a,gBAAgB,GAEtB9U,KAAKC,MAAMuS,IAClB,CAMA,WAAAwC,CAAY/X,GAIR,IACIhD,KAAKwZ,OAAO7E,KAAK3R,EACrB,CACA,MAAOP,GACHzC,KAAK8R,KAAK,0CAA2CrP,EAAEe,SAAWf,EAAE0C,KAAM,uBAC1EW,WAAW9F,KAAKyS,UAAUlO,KAAKvE,MAAO,EAC1C,CACJ,EAKJ2Y,GAAoBwC,6BAA+B,EAInDxC,GAAoByC,eAAiB;;;;;;;;;;;;;;;;;AAyBrC,MAAMC,GAIF,WAAAja,CAAYmN,GACRvO,KAAKsb,gBAAgB/M,EACzB,CACA,yBAAWgN,GACP,MAAO,CAACnK,GAAuBuH,GACnC,CAKA,mCAAW6C,GACP,OAAOxb,KAAKyb,2BAChB,CACA,eAAAH,CAAgB/M,GACZ,MAAMmN,EAAwB/C,IAAuBA,GAAoB,iBACzE,IAAIgD,EAAuBD,IAA0B/C,GAAoByB,mBAOzE,GANI7L,EAASb,gBACJgO,GACD7W,EAAK,mFAET8W,GAAuB,GAEvBA,EACA3b,KAAK4b,YAAc,CAACjD,QAEnB,CACD,MAAMkD,EAAc7b,KAAK4b,YAAc,GACvC,IAAK,MAAME,KAAaT,GAAiBE,eACjCO,GAAaA,EAAU,kBACvBD,EAAW5U,KAAK6U,GAGxBT,GAAiBI,6BAA8B,CACnD,CACJ,CAIA,gBAAAM,GACI,GAAI/b,KAAK4b,YAAYlY,OAAS,EAC1B,OAAO1D,KAAK4b,YAAY,GAGxB,MAAM,IAAIhX,MAAM,0BAExB,CAIA,gBAAAoX,GACI,OAAIhc,KAAK4b,YAAYlY,OAAS,EACnB1D,KAAK4b,YAAY,GAGjB,IAEf,EAGJP,GAAiBI,6BAA8B;;;;;;;;;;;;;;;;;AAmB/C,MAAMQ,GAAkB,IAGlBC,GAAsC,IAItCC,GAA8B,MAC9BC,GAAkC,OAClCC,GAAe,IACfC,GAAe,IACfC,GAAmB,IACnBC,GAAgB,IAChBC,GAAgB,IAChBC,GAAe,IACfC,GAAa,IACbC,GAAmB,IACnBC,GAAO,IACPC,GAAe,IAKrB,MAAMC,GAaF,WAAA3b,CAAY0B,EAAIka,EAAWC,EAAgBC,EAAgBC,EAAY3N,EAAY4N,EAAU/K,EAAegL,EAAS3L,GACjH1R,KAAK8C,GAAKA,EACV9C,KAAKgd,UAAYA,EACjBhd,KAAKid,eAAiBA,EACtBjd,KAAKkd,eAAiBA,EACtBld,KAAKmd,WAAaA,EAClBnd,KAAKwP,WAAaA,EAClBxP,KAAKod,SAAWA,EAChBpd,KAAKqS,cAAgBA,EACrBrS,KAAKqd,QAAUA,EACfrd,KAAK0R,cAAgBA,EACrB1R,KAAKsd,gBAAkB,EACvBtd,KAAKud,oBAAsB,GAC3Bvd,KAAKwd,OAAS,EACdxd,KAAK8R,KAAOtN,EAAW,KAAOxE,KAAK8C,GAAK,KACxC9C,KAAKyd,kBAAoB,IAAIpC,GAAiB2B,GAC9Chd,KAAK8R,KAAK,sBACV9R,KAAK0d,QACT,CAIA,MAAAA,GACI,MAAMC,EAAO3d,KAAKyd,kBAAkB1B,mBACpC/b,KAAK4d,MAAQ,IAAID,EAAK3d,KAAK6d,mBAAoB7d,KAAKgd,UAAWhd,KAAKid,eAAgBjd,KAAKkd,eAAgBld,KAAKmd,WAAY,KAAMnd,KAAK0R,eAGrI1R,KAAK8d,0BAA4BH,EAAK,iCAAmC,EACzE,MAAMI,EAAoB/d,KAAKge,cAAche,KAAK4d,OAC5CK,EAAmBje,KAAKke,iBAAiBle,KAAK4d,OACpD5d,KAAKme,IAAMne,KAAK4d,MAChB5d,KAAKoe,IAAMpe,KAAK4d,MAChB5d,KAAKqe,eAAiB,KACtBre,KAAKse,YAAa,EAOlBxY,YAAW,KAEP9F,KAAK4d,OAAS5d,KAAK4d,MAAM3L,KAAK8L,EAAmBE,EAAiB,GACnElY,KAAKC,MAAM,IACd,MAAMuY,EAAmBZ,EAAK,mBAAqB,EAC/CY,EAAmB,IACnBve,KAAKwe,gBAAkBjU,GAAsB,KACzCvK,KAAKwe,gBAAkB,KAClBxe,KAAKse,aACFte,KAAK4d,OACL5d,KAAK4d,MAAMhM,cAAgBwK,IAC3Bpc,KAAK8R,KAAK,wDACN9R,KAAK4d,MAAMhM,cACX,wCACJ5R,KAAKse,YAAa,EAClBte,KAAK4d,MAAMtJ,yBAENtU,KAAK4d,OACV5d,KAAK4d,MAAMjM,UAAYwK,GACvBnc,KAAK8R,KAAK,oDACN9R,KAAK4d,MAAMjM,UACX,uCAKJ3R,KAAK8R,KAAK,+CACV9R,KAAKwU,SAEb,GAEDzO,KAAKC,MAAMuY,IAEtB,CACA,gBAAAV,GACI,MAAO,KAAO7d,KAAK8C,GAAK,IAAM9C,KAAKsd,iBACvC,CACA,gBAAAY,CAAiBP,GACb,OAAOc,IACCd,IAAS3d,KAAK4d,MACd5d,KAAK0e,kBAAkBD,GAElBd,IAAS3d,KAAKqe,gBACnBre,KAAK8R,KAAK,8BACV9R,KAAK2e,8BAGL3e,KAAK8R,KAAK,4BACd,CAER,CACA,aAAAkM,CAAcL,GACV,OAAQna,IACgB,IAAhBxD,KAAKwd,SACDG,IAAS3d,KAAKoe,IACdpe,KAAK4e,0BAA0Bpb,GAE1Bma,IAAS3d,KAAKqe,eACnBre,KAAK6e,4BAA4Brb,GAGjCxD,KAAK8R,KAAK,6BAElB,CAER,CAIA,WAAAgN,CAAYC,GAER,MAAMC,EAAM,CAAEC,EAAG,IAAKnI,EAAGiI,GACzB/e,KAAKkf,UAAUF,EACnB,CACA,oBAAAG,GACQnf,KAAKme,MAAQne,KAAKqe,gBAAkBre,KAAKoe,MAAQpe,KAAKqe,iBACtDre,KAAK8R,KAAK,2CAA6C9R,KAAKqe,eAAehN,QAC3ErR,KAAK4d,MAAQ5d,KAAKqe,eAClBre,KAAKqe,eAAiB,KAG9B,CACA,mBAAAe,CAAoBC,GAChB,GAAIhD,MAAgBgD,EAAa,CAC7B,MAAMC,EAAMD,EAAYhD,IACpBiD,IAAQ3C,GACR3c,KAAKuf,6BAEAD,IAAQ9C,IAEbxc,KAAK8R,KAAK,wCACV9R,KAAKqe,eAAe7J,QAEhBxU,KAAKme,MAAQne,KAAKqe,gBAClBre,KAAKoe,MAAQpe,KAAKqe,gBAClBre,KAAKwU,SAGJ8K,IAAQ5C,KACb1c,KAAK8R,KAAK,0BACV9R,KAAKwf,8BACLxf,KAAKuf,6BAEb,CACJ,CACA,2BAAAV,CAA4BY,GACxB,MAAMC,EAAQ9Y,EAAW,IAAK6Y,GACxBta,EAAOyB,EAAW,IAAK6Y,GAC7B,GAAc,MAAVC,EACA1f,KAAKof,oBAAoBja,OAExB,IAAc,MAAVua,EAKL,MAAM,IAAI9a,MAAM,2BAA6B8a,GAH7C1f,KAAKud,oBAAoBtW,KAAK9B,EAIlC,CACJ,CACA,0BAAAoa,GACQvf,KAAKwf,6BAA+B,GACpCxf,KAAK8R,KAAK,oCACV9R,KAAKse,YAAa,EAClBte,KAAKqe,eAAe/J,wBACpBtU,KAAK2f,wBAIL3f,KAAK8R,KAAK,8BACV9R,KAAKqe,eAAe1J,KAAK,CAAEsK,EAAG,IAAKnI,EAAG,CAAEmI,EAAGpC,GAAM/F,EAAG,CAAC,KAE7D,CACA,mBAAA6I,GAEI3f,KAAKqe,eAAexK,QAEpB7T,KAAK8R,KAAK,mCACV9R,KAAKqe,eAAe1J,KAAK,CAAEsK,EAAG,IAAKnI,EAAG,CAAEmI,EAAGtC,GAAY7F,EAAG,CAAC,KAG3D9W,KAAK8R,KAAK,kCACV9R,KAAK4d,MAAMjJ,KAAK,CAAEsK,EAAG,IAAKnI,EAAG,CAAEmI,EAAGrC,GAAkB9F,EAAG,CAAC,KACxD9W,KAAKme,IAAMne,KAAKqe,eAChBre,KAAKmf,sBACT,CACA,yBAAAP,CAA0Ba,GAEtB,MAAMC,EAAQ9Y,EAAW,IAAK6Y,GACxBta,EAAOyB,EAAW,IAAK6Y,GACf,MAAVC,EACA1f,KAAK4f,WAAWza,GAED,MAAVua,GACL1f,KAAK6f,eAAe1a,EAE5B,CACA,cAAA0a,CAAerc,GACXxD,KAAK8f,qBAEL9f,KAAKwP,WAAWhM,EACpB,CACA,kBAAAsc,GACS9f,KAAKse,aACNte,KAAK8d,4BACD9d,KAAK8d,2BAA6B,IAClC9d,KAAK8R,KAAK,kCACV9R,KAAKse,YAAa,EAClBte,KAAK4d,MAAMtJ,yBAGvB,CACA,UAAAsL,CAAWP,GACP,MAAMC,EAAM1Y,EAAWyV,GAAcgD,GACrC,GAAI/C,MAAgB+C,EAAa,CAC7B,MAAMU,EAAUV,EAAY/C,IAC5B,GAAIgD,IAAQxC,GAAc,CACtB,MAAMkD,EAAmBC,OAAOC,OAAO,CAAC,EAAGH,GACvC/f,KAAKgd,UAAUlP,kBAEfkS,EAAiBG,EAAIngB,KAAKgd,UAAUzP,MAExCvN,KAAKogB,aAAaJ,EACtB,MACK,GAAIV,IAAQ1C,GAAkB,CAC/B5c,KAAK8R,KAAK,qCACV9R,KAAKoe,IAAMpe,KAAKqe,eAChB,IAAK,IAAI5a,EAAI,EAAGA,EAAIzD,KAAKud,oBAAoB7Z,SAAUD,EACnDzD,KAAK6f,eAAe7f,KAAKud,oBAAoB9Z,IAEjDzD,KAAKud,oBAAsB,GAC3Bvd,KAAKmf,sBACT,MACSG,IAAQ/C,GAGbvc,KAAKqgB,sBAAsBN,GAEtBT,IAAQ9C,GAEbxc,KAAKsgB,SAASP,GAETT,IAAQ7C,GACb/X,EAAM,iBAAmBqb,GAEpBT,IAAQ5C,IACb1c,KAAK8R,KAAK,wBACV9R,KAAK8f,qBACL9f,KAAKugB,iCAGL7b,EAAM,mCAAqC4a,EAEnD,CACJ,CAIA,YAAAc,CAAaI,GACT,MAAMC,EAAYD,EAAUtJ,GACtBlW,EAAUwf,EAAU5Y,EACpB2F,EAAOiT,EAAUL,EACvBngB,KAAK0gB,UAAYF,EAAUxY,EAC3BhI,KAAKgd,UAAUzP,KAAOA,EAEF,IAAhBvN,KAAKwd,SACLxd,KAAK4d,MAAM/J,QACX7T,KAAK2gB,yBAAyB3gB,KAAK4d,MAAO6C,GACtC9T,IAAqB3L,GACrB6D,EAAK,sCAGT7E,KAAK4gB,mBAEb,CACA,gBAAAA,GACI,MAAMjD,EAAO3d,KAAKyd,kBAAkBzB,mBAChC2B,GACA3d,KAAK6gB,cAAclD,EAE3B,CACA,aAAAkD,CAAclD,GACV3d,KAAKqe,eAAiB,IAAIV,EAAK3d,KAAK6d,mBAAoB7d,KAAKgd,UAAWhd,KAAKid,eAAgBjd,KAAKkd,eAAgBld,KAAKmd,WAAYnd,KAAK0gB,WAGxI1gB,KAAKwf,4BACD7B,EAAK,iCAAmC,EAC5C,MAAMzL,EAAYlS,KAAKge,cAAche,KAAKqe,gBACpClM,EAAenS,KAAKke,iBAAiBle,KAAKqe,gBAChDre,KAAKqe,eAAepM,KAAKC,EAAWC,GAEpC5H,GAAsB,KACdvK,KAAKqe,iBACLre,KAAK8R,KAAK,gCACV9R,KAAKqe,eAAe7J,QACxB,GACDzO,KAAKC,MAAMiW,IAClB,CACA,QAAAqE,CAAS/S,GACLvN,KAAK8R,KAAK,qCAAuCvE,GACjDvN,KAAKgd,UAAUzP,KAAOA,EAGF,IAAhBvN,KAAKwd,OACLxd,KAAKwU,SAILxU,KAAK8gB,oBACL9gB,KAAK0d,SAEb,CACA,wBAAAiD,CAAyBhD,EAAM8C,GAC3BzgB,KAAK8R,KAAK,oCACV9R,KAAK4d,MAAQD,EACb3d,KAAKwd,OAAS,EACVxd,KAAKod,WACLpd,KAAKod,SAASqD,EAAWzgB,KAAK0gB,WAC9B1gB,KAAKod,SAAW,MAImB,IAAnCpd,KAAK8d,2BACL9d,KAAK8R,KAAK,kCACV9R,KAAKse,YAAa,GAGlB/T,GAAsB,KAClBvK,KAAKugB,+BAA+B,GACrCxa,KAAKC,MAAMkW,IAEtB,CACA,6BAAAqE,GAESvgB,KAAKse,YAA8B,IAAhBte,KAAKwd,SACzBxd,KAAK8R,KAAK,4BACV9R,KAAKkf,UAAU,CAAED,EAAG,IAAKnI,EAAG,CAAEmI,EAAGpC,GAAM/F,EAAG,CAAC,KAEnD,CACA,0BAAA6H,GACI,MAAMhB,EAAO3d,KAAKqe,eAClBre,KAAKqe,eAAiB,KAClBre,KAAKme,MAAQR,GAAQ3d,KAAKoe,MAAQT,GAElC3d,KAAKwU,OAEb,CAKA,iBAAAkK,CAAkBD,GACdze,KAAK4d,MAAQ,KAGRa,GAAiC,IAAhBze,KAAKwd,OASF,IAAhBxd,KAAKwd,QACVxd,KAAK8R,KAAK,8BATV9R,KAAK8R,KAAK,+BAEN9R,KAAKgd,UAAU9O,oBACfxL,EAAkBX,OAAO,QAAU/B,KAAKgd,UAAUzP,MAElDvN,KAAKgd,UAAU/O,aAAejO,KAAKgd,UAAUzP,OAMrDvN,KAAKwU,OACT,CACA,qBAAA6L,CAAsB3W,GAClB1J,KAAK8R,KAAK,0DACN9R,KAAKqd,UACLrd,KAAKqd,QAAQ3T,GACb1J,KAAKqd,QAAU,MAInBrd,KAAKqS,cAAgB,KACrBrS,KAAKwU,OACT,CACA,SAAA0K,CAAU/Z,GACN,GAAoB,IAAhBnF,KAAKwd,OACL,KAAM,8BAGNxd,KAAKme,IAAIxJ,KAAKxP,EAEtB,CAIA,KAAAqP,GACwB,IAAhBxU,KAAKwd,SACLxd,KAAK8R,KAAK,gCACV9R,KAAKwd,OAAS,EACdxd,KAAK8gB,oBACD9gB,KAAKqS,gBACLrS,KAAKqS,gBACLrS,KAAKqS,cAAgB,MAGjC,CACA,iBAAAyO,GACI9gB,KAAK8R,KAAK,iCACN9R,KAAK4d,QACL5d,KAAK4d,MAAMpJ,QACXxU,KAAK4d,MAAQ,MAEb5d,KAAKqe,iBACLre,KAAKqe,eAAe7J,QACpBxU,KAAKqe,eAAiB,MAEtBre,KAAKwe,kBACLrL,aAAanT,KAAKwe,iBAClBxe,KAAKwe,gBAAkB,KAE/B;;;;;;;;;;;;;;;;GAyBJ,MAAMuC,GACF,GAAAC,CAAIC,EAAY9b,EAAM+b,EAAYC,GAAQ,CAC1C,KAAAC,CAAMH,EAAY9b,EAAM+b,EAAYC,GAAQ,CAK5C,gBAAAE,CAAiBC,GAAS,CAK1B,oBAAAC,CAAqBD,GAAS,CAC9B,eAAAE,CAAgBP,EAAY9b,EAAM+b,GAAc,CAChD,iBAAAO,CAAkBR,EAAY9b,EAAM+b,GAAc,CAClD,kBAAAQ,CAAmBT,EAAYC,GAAc,CAC7C,WAAAS,CAAYC,GAAS;;;;;;;;;;;;;;;;GAuBzB,MAAMC,GACF,WAAAzgB,CAAY0gB,GACR9hB,KAAK8hB,eAAiBA,EACtB9hB,KAAK+hB,WAAa,CAAC,GACnB,QAAOne,MAAMC,QAAQie,IAAmBA,EAAepe,OAAS,EAAG,6BACvE,CAIA,OAAAse,CAAQC,KAAc1e,GAClB,GAAIK,MAAMC,QAAQ7D,KAAK+hB,WAAWE,IAAa,CAE3C,MAAMC,EAAY,IAAIliB,KAAK+hB,WAAWE,IACtC,IAAK,IAAIxe,EAAI,EAAGA,EAAIye,EAAUxe,OAAQD,IAClCye,EAAUze,GAAGsM,SAASjM,MAAMoe,EAAUze,GAAG0e,QAAS5e,EAE1D,CACJ,CACA,EAAA6e,CAAGH,EAAWlS,EAAUoS,GACpBniB,KAAKqiB,mBAAmBJ,GACxBjiB,KAAK+hB,WAAWE,GAAajiB,KAAK+hB,WAAWE,IAAc,GAC3DjiB,KAAK+hB,WAAWE,GAAWhb,KAAK,CAAE8I,WAAUoS,YAC5C,MAAMG,EAAYtiB,KAAKuiB,gBAAgBN,GACnCK,GACAvS,EAASjM,MAAMqe,EAASG,EAEhC,CACA,GAAAE,CAAIP,EAAWlS,EAAUoS,GACrBniB,KAAKqiB,mBAAmBJ,GACxB,MAAMC,EAAYliB,KAAK+hB,WAAWE,IAAc,GAChD,IAAK,IAAIxe,EAAI,EAAGA,EAAIye,EAAUxe,OAAQD,IAClC,GAAIye,EAAUze,GAAGsM,WAAaA,KACxBoS,GAAWA,IAAYD,EAAUze,GAAG0e,SAEtC,YADAD,EAAUO,OAAOhf,EAAG,EAIhC,CACA,kBAAA4e,CAAmBJ,IACf,QAAOjiB,KAAK8hB,eAAeY,MAAKC,GACrBA,IAAOV,IACd,kBAAoBA,EAC5B;;;;;;;;;;;;;;;;GA0BJ,MAAMW,WAAsBf,GACxB,WAAAzgB,GACIyhB,MAAM,CAAC,WACP7iB,KAAK8iB,SAAU,EAKO,qBAAXvgB,QAC4B,qBAA5BA,OAAO0D,mBACb,YACD1D,OAAO0D,iBAAiB,UAAU,KACzBjG,KAAK8iB,UACN9iB,KAAK8iB,SAAU,EACf9iB,KAAKgiB,QAAQ,UAAU,GAC3B,IACD,GACHzf,OAAO0D,iBAAiB,WAAW,KAC3BjG,KAAK8iB,UACL9iB,KAAK8iB,SAAU,EACf9iB,KAAKgiB,QAAQ,UAAU,GAC3B,IACD,GAEX,CACA,kBAAOe,GACH,OAAO,IAAIH,EACf,CACA,eAAAL,CAAgBN,GAEZ,OADA,QAAqB,WAAdA,EAAwB,uBAAyBA,GACjD,CAACjiB,KAAK8iB,QACjB,CACA,eAAAE,GACI,OAAOhjB,KAAK8iB,OAChB;;;;;;;;;;;;;;;;GAoBJ,MAAMG,GAAiB,GAEjBC,GAAwB,IAM9B,MAAMC,GAKF,WAAA/hB,CAAYgiB,EAAcC,GACtB,QAAiB,IAAbA,EAAqB,CACrBrjB,KAAKsjB,QAAUF,EAAaG,MAAM,KAElC,IAAIC,EAAS,EACb,IAAK,IAAI/f,EAAI,EAAGA,EAAIzD,KAAKsjB,QAAQ5f,OAAQD,IACjCzD,KAAKsjB,QAAQ7f,GAAGC,OAAS,IACzB1D,KAAKsjB,QAAQE,GAAUxjB,KAAKsjB,QAAQ7f,GACpC+f,KAGRxjB,KAAKsjB,QAAQ5f,OAAS8f,EACtBxjB,KAAKyjB,UAAY,CACrB,MAEIzjB,KAAKsjB,QAAUF,EACfpjB,KAAKyjB,UAAYJ,CAEzB,CACA,QAAAphB,GACI,IAAIgf,EAAa,GACjB,IAAK,IAAIxd,EAAIzD,KAAKyjB,UAAWhgB,EAAIzD,KAAKsjB,QAAQ5f,OAAQD,IAC1B,KAApBzD,KAAKsjB,QAAQ7f,KACbwd,GAAc,IAAMjhB,KAAKsjB,QAAQ7f,IAGzC,OAAOwd,GAAc,GACzB,EAEJ,SAASyC,KACL,OAAO,IAAIP,GAAK,GACpB,CACA,SAASQ,GAAaC,GAClB,OAAIA,EAAKH,WAAaG,EAAKN,QAAQ5f,OACxB,KAEJkgB,EAAKN,QAAQM,EAAKH,UAC7B,CAIA,SAASI,GAAcD,GACnB,OAAOA,EAAKN,QAAQ5f,OAASkgB,EAAKH,SACtC,CACA,SAASK,GAAaF,GAClB,IAAIP,EAAWO,EAAKH,UAIpB,OAHIJ,EAAWO,EAAKN,QAAQ5f,QACxB2f,IAEG,IAAIF,GAAKS,EAAKN,QAASD,EAClC,CACA,SAASU,GAAYH,GACjB,OAAIA,EAAKH,UAAYG,EAAKN,QAAQ5f,OACvBkgB,EAAKN,QAAQM,EAAKN,QAAQ5f,OAAS,GAEvC,IACX,CACA,SAASsgB,GAAuBJ,GAC5B,IAAI3C,EAAa,GACjB,IAAK,IAAIxd,EAAImgB,EAAKH,UAAWhgB,EAAImgB,EAAKN,QAAQ5f,OAAQD,IAC1B,KAApBmgB,EAAKN,QAAQ7f,KACbwd,GAAc,IAAMgD,mBAAmBjJ,OAAO4I,EAAKN,QAAQ7f,MAGnE,OAAOwd,GAAc,GACzB,CAKA,SAASiD,GAAUN,EAAMO,EAAQ,GAC7B,OAAOP,EAAKN,QAAQc,MAAMR,EAAKH,UAAYU,EAC/C,CACA,SAASE,GAAWT,GAChB,GAAIA,EAAKH,WAAaG,EAAKN,QAAQ5f,OAC/B,OAAO,KAEX,MAAM4gB,EAAS,GACf,IAAK,IAAI7gB,EAAImgB,EAAKH,UAAWhgB,EAAImgB,EAAKN,QAAQ5f,OAAS,EAAGD,IACtD6gB,EAAOrd,KAAK2c,EAAKN,QAAQ7f,IAE7B,OAAO,IAAI0f,GAAKmB,EAAQ,EAC5B,CACA,SAASC,GAAUX,EAAMY,GACrB,MAAMF,EAAS,GACf,IAAK,IAAI7gB,EAAImgB,EAAKH,UAAWhgB,EAAImgB,EAAKN,QAAQ5f,OAAQD,IAClD6gB,EAAOrd,KAAK2c,EAAKN,QAAQ7f,IAE7B,GAAI+gB,aAAwBrB,GACxB,IAAK,IAAI1f,EAAI+gB,EAAaf,UAAWhgB,EAAI+gB,EAAalB,QAAQ5f,OAAQD,IAClE6gB,EAAOrd,KAAKud,EAAalB,QAAQ7f,QAGpC,CACD,MAAMghB,EAAcD,EAAajB,MAAM,KACvC,IAAK,IAAI9f,EAAI,EAAGA,EAAIghB,EAAY/gB,OAAQD,IAChCghB,EAAYhhB,GAAGC,OAAS,GACxB4gB,EAAOrd,KAAKwd,EAAYhhB,GAGpC,CACA,OAAO,IAAI0f,GAAKmB,EAAQ,EAC5B,CAIA,SAASI,GAAYd,GACjB,OAAOA,EAAKH,WAAaG,EAAKN,QAAQ5f,MAC1C,CAIA,SAASihB,GAAgBC,EAAWC,GAChC,MAAMC,EAAQnB,GAAaiB,GAAYG,EAAQpB,GAAakB,GAC5D,GAAc,OAAVC,EACA,OAAOD,EAEN,GAAIC,IAAUC,EACf,OAAOJ,GAAgBb,GAAac,GAAYd,GAAae,IAG7D,MAAM,IAAIjgB,MAAM,8BACZigB,EADY,8BAIZD,EACA,IAEZ,CAIA,SAASI,GAAYC,EAAMC,GACvB,MAAMC,EAAWjB,GAAUe,EAAM,GAC3BG,EAAYlB,GAAUgB,EAAO,GACnC,IAAK,IAAIzhB,EAAI,EAAGA,EAAI0hB,EAASzhB,QAAUD,EAAI2hB,EAAU1hB,OAAQD,IAAK,CAC9D,MAAM4hB,EAAMhf,EAAY8e,EAAS1hB,GAAI2hB,EAAU3hB,IAC/C,GAAY,IAAR4hB,EACA,OAAOA,CAEf,CACA,OAAIF,EAASzhB,SAAW0hB,EAAU1hB,OACvB,EAEJyhB,EAASzhB,OAAS0hB,EAAU1hB,QAAU,EAAI,CACrD,CAIA,SAAS4hB,GAAW1B,EAAM2B,GACtB,GAAI1B,GAAcD,KAAUC,GAAc0B,GACtC,OAAO,EAEX,IAAK,IAAI9hB,EAAImgB,EAAKH,UAAW+B,EAAID,EAAM9B,UAAWhgB,GAAKmgB,EAAKN,QAAQ5f,OAAQD,IAAK+hB,IAC7E,GAAI5B,EAAKN,QAAQ7f,KAAO8hB,EAAMjC,QAAQkC,GAClC,OAAO,EAGf,OAAO,CACX,CAIA,SAASC,GAAa7B,EAAM2B,GACxB,IAAI9hB,EAAImgB,EAAKH,UACT+B,EAAID,EAAM9B,UACd,GAAII,GAAcD,GAAQC,GAAc0B,GACpC,OAAO,EAEX,MAAO9hB,EAAImgB,EAAKN,QAAQ5f,OAAQ,CAC5B,GAAIkgB,EAAKN,QAAQ7f,KAAO8hB,EAAMjC,QAAQkC,GAClC,OAAO,IAET/hB,IACA+hB,CACN,CACA,OAAO,CACX,CAWA,MAAME,GAKF,WAAAtkB,CAAYwiB,EAAM+B,GACd3lB,KAAK2lB,aAAeA,EACpB3lB,KAAK4lB,OAAS1B,GAAUN,EAAM,GAE9B5jB,KAAK6lB,YAAc9f,KAAK+f,IAAI,EAAG9lB,KAAK4lB,OAAOliB,QAC3C,IAAK,IAAID,EAAI,EAAGA,EAAIzD,KAAK4lB,OAAOliB,OAAQD,IACpCzD,KAAK6lB,cAAe,QAAa7lB,KAAK4lB,OAAOniB,IAEjDsiB,GAAyB/lB,KAC7B,EAEJ,SAASgmB,GAAmBC,EAAgBC,GAEpCD,EAAeL,OAAOliB,OAAS,IAC/BuiB,EAAeJ,aAAe,GAElCI,EAAeL,OAAO3e,KAAKif,GAC3BD,EAAeJ,cAAe,QAAaK,GAC3CH,GAAyBE,EAC7B,CACA,SAASE,GAAkBF,GACvB,MAAMG,EAAOH,EAAeL,OAAOS,MACnCJ,EAAeJ,cAAe,QAAaO,GAEvCH,EAAeL,OAAOliB,OAAS,IAC/BuiB,EAAeJ,aAAe,EAEtC,CACA,SAASE,GAAyBE,GAC9B,GAAIA,EAAeJ,YAAc3C,GAC7B,MAAM,IAAIte,MAAMqhB,EAAeN,aAC3B,8BACAzC,GACA,WACA+C,EAAeJ,YACf,MAER,GAAII,EAAeL,OAAOliB,OAASuf,GAC/B,MAAM,IAAIre,MAAMqhB,EAAeN,aAC3B,iEACA1C,GACA,gCACAqD,GAA4BL,GAExC,CAIA,SAASK,GAA4BL,GACjC,OAAqC,IAAjCA,EAAeL,OAAOliB,OACf,GAEJ,gBAAkBuiB,EAAeL,OAAOjd,KAAK,KAAO,GAC/D;;;;;;;;;;;;;;;;GAkBA,MAAM4d,WAA0B1E,GAC5B,WAAAzgB,GAEI,IAAIolB,EACAC,EAFJ5D,MAAM,CAAC,YAGiB,qBAAbpd,UAC8B,qBAA9BA,SAASQ,mBACkB,qBAAvBR,SAAS,WAEhBghB,EAAmB,mBACnBD,EAAS,UAE6B,qBAA1B/gB,SAAS,cACrBghB,EAAmB,sBACnBD,EAAS,aAE4B,qBAAzB/gB,SAAS,aACrBghB,EAAmB,qBACnBD,EAAS,YAEgC,qBAA7B/gB,SAAS,kBACrBghB,EAAmB,yBACnBD,EAAS,iBAOjBxmB,KAAK0mB,UAAW,EACZD,GACAhhB,SAASQ,iBAAiBwgB,GAAkB,KACxC,MAAME,GAAWlhB,SAAS+gB,GACtBG,IAAY3mB,KAAK0mB,WACjB1mB,KAAK0mB,SAAWC,EAChB3mB,KAAKgiB,QAAQ,UAAW2E,GAC5B,IACD,EAEX,CACA,kBAAO5D,GACH,OAAO,IAAIwD,EACf,CACA,eAAAhE,CAAgBN,GAEZ,OADA,QAAqB,YAAdA,EAAyB,uBAAyBA,GAClD,CAACjiB,KAAK0mB,SACjB;;;;;;;;;;;;;;;;GAmBJ,MAAME,GAAsB,IACtBC,GAA8B,IAC9BC,GAAiC,IACjCC,GAA6B,IAC7BC,GAAgC,IAChCC,GAA+B,cAE/BC,GAA0B,EAOhC,MAAMC,WAA6BpG,GAM/B,WAAA3f,CAAY4b,EAAWC,EAAgBmK,EAAeC,EAAkBC,EAAqBC,EAAoBC,EAAwBC,GAuCrI,GAtCA5E,QACA7iB,KAAKgd,UAAYA,EACjBhd,KAAKid,eAAiBA,EACtBjd,KAAKonB,cAAgBA,EACrBpnB,KAAKqnB,iBAAmBA,EACxBrnB,KAAKsnB,oBAAsBA,EAC3BtnB,KAAKunB,mBAAqBA,EAC1BvnB,KAAKwnB,uBAAyBA,EAC9BxnB,KAAKynB,cAAgBA,EAErBznB,KAAK8C,GAAKqkB,GAAqBO,8BAC/B1nB,KAAK8R,KAAOtN,EAAW,KAAOxE,KAAK8C,GAAK,KACxC9C,KAAK2nB,kBAAoB,CAAC,EAC1B3nB,KAAK4nB,QAAU,IAAIC,IACnB7nB,KAAK8nB,iBAAmB,GACxB9nB,KAAK+nB,iBAAmB,GACxB/nB,KAAKgoB,qBAAuB,EAC5BhoB,KAAKioB,qBAAuB,EAC5BjoB,KAAKkoB,0BAA4B,GACjCloB,KAAKmoB,YAAa,EAClBnoB,KAAKooB,gBAAkBxB,GACvB5mB,KAAKqoB,mBAAqBxB,GAC1B7mB,KAAKsoB,uBAAyB,KAC9BtoB,KAAK0R,cAAgB,KACrB1R,KAAKuoB,0BAA4B,KACjCvoB,KAAK0mB,UAAW,EAEhB1mB,KAAKwoB,eAAiB,CAAC,EACvBxoB,KAAKyoB,eAAiB,EACtBzoB,KAAK0oB,UAAY,KACjB1oB,KAAKmd,WAAa,KAClBnd,KAAKkd,eAAiB,KACtBld,KAAK2oB,oBAAqB,EAC1B3oB,KAAK4oB,uBAAyB,EAC9B5oB,KAAK6oB,2BAA6B,EAClC7oB,KAAK8oB,kBAAmB,EACxB9oB,KAAK+oB,2BAA6B,KAClC/oB,KAAKgpB,+BAAiC,KAClCvB,KAAkB,UAClB,MAAM,IAAI7iB,MAAM,kFAEpB2hB,GAAkBxD,cAAcX,GAAG,UAAWpiB,KAAKipB,WAAYjpB,OACpB,IAAvCgd,EAAUzP,KAAKtI,QAAQ,YACvB2d,GAAcG,cAAcX,GAAG,SAAUpiB,KAAKkpB,UAAWlpB,KAEjE,CACA,WAAA8e,CAAYqK,EAAQtjB,EAAMujB,GACtB,MAAMC,IAAcrpB,KAAKyoB,eACnBzJ,EAAM,CAAEsK,EAAGD,EAAW/iB,EAAG6iB,EAAQ5iB,EAAGV,GAC1C7F,KAAK8R,MAAK,QAAUkN,KACpB,QAAOhf,KAAKmoB,WAAY,0DACxBnoB,KAAK0oB,UAAU5J,YAAYE,GACvBoK,IACAppB,KAAKwoB,eAAea,GAAaD,EAEzC,CACA,GAAAxnB,CAAI6H,GACAzJ,KAAKupB,kBACL,MAAMC,EAAW,IAAI,KACfC,EAAU,CACZC,EAAGjgB,EAAME,MAAM1H,WACf0nB,EAAGlgB,EAAMmgB,cAEPC,EAAiB,CACnBV,OAAQ,IACRM,UACAvI,WAAa1d,IACT,MAAMuc,EAAUvc,EAAQ,KACH,OAAjBA,EAAQ,KACRgmB,EAASle,QAAQyU,GAGjByJ,EAASje,OAAOwU,EACpB,GAGR/f,KAAK+nB,iBAAiB9gB,KAAK4iB,GAC3B7pB,KAAKioB,uBACL,MAAM6B,EAAQ9pB,KAAK+nB,iBAAiBrkB,OAAS,EAI7C,OAHI1D,KAAKmoB,YACLnoB,KAAK+pB,SAASD,GAEXN,EAASQ,OACpB,CACA,MAAAC,CAAOxgB,EAAOygB,EAAeC,EAAKjJ,GAC9BlhB,KAAKupB,kBACL,MAAMa,EAAU3gB,EAAM4gB,iBAChBpJ,EAAaxX,EAAME,MAAM1H,WAC/BjC,KAAK8R,KAAK,qBAAuBmP,EAAa,IAAMmJ,GAC/CpqB,KAAK4nB,QAAQ0C,IAAIrJ,IAClBjhB,KAAK4nB,QAAQrmB,IAAI0f,EAAY,IAAI4G,MAErC,QAAOpe,EAAM8gB,aAAaC,cAAgB/gB,EAAM8gB,aAAaE,eAAgB,uDAC7E,SAAQzqB,KAAK4nB,QAAQhmB,IAAIqf,GAAYqJ,IAAIF,GAAU,gDACnD,MAAMM,EAAa,CACfxJ,aACAyJ,OAAQT,EACRzgB,QACA0gB,OAEJnqB,KAAK4nB,QAAQhmB,IAAIqf,GAAY1f,IAAI6oB,EAASM,GACtC1qB,KAAKmoB,YACLnoB,KAAK4qB,YAAYF,EAEzB,CACA,QAAAX,CAASD,GACL,MAAMloB,EAAM5B,KAAK+nB,iBAAiB+B,GAClC9pB,KAAK8e,YAAY,IAAKld,EAAI6nB,SAAUjmB,WACzBxD,KAAK+nB,iBAAiB+B,GAC7B9pB,KAAKioB,uBAC6B,IAA9BjoB,KAAKioB,uBACLjoB,KAAK+nB,iBAAmB,IAExBnmB,EAAIsf,YACJtf,EAAIsf,WAAW1d,EACnB,GAER,CACA,WAAAonB,CAAYF,GACR,MAAMjhB,EAAQihB,EAAWjhB,MACnBwX,EAAaxX,EAAME,MAAM1H,WACzBmoB,EAAU3gB,EAAM4gB,iBACtBrqB,KAAK8R,KAAK,aAAemP,EAAa,QAAUmJ,GAChD,MAAMS,EAAM,CAAWnB,EAAGzI,GACpBkI,EAAS,IAEXuB,EAAWP,MACXU,EAAI,KAAOphB,EAAMmgB,aACjBiB,EAAI,KAAOH,EAAWP,KAE1BU,EAAa,KAAOH,EAAWC,SAC/B3qB,KAAK8e,YAAYqK,EAAQ0B,GAAMrnB,IAC3B,MAAMuc,EAAUvc,EAAiB,KAC3BsnB,EAAStnB,EAAmB,KAElC2jB,GAAqB4D,sBAAsBhL,EAAStW,GACpD,MAAMuhB,EAAoBhrB,KAAK4nB,QAAQhmB,IAAIqf,IACvCjhB,KAAK4nB,QAAQhmB,IAAIqf,GAAYrf,IAAIwoB,GAEjCY,IAAsBN,IACtB1qB,KAAK8R,KAAK,kBAAmBtO,GACd,OAAXsnB,GACA9qB,KAAKirB,cAAchK,EAAYmJ,GAE/BM,EAAWxJ,YACXwJ,EAAWxJ,WAAW4J,EAAQ/K,GAEtC,GAER,CACA,4BAAOgL,CAAsBhL,EAAStW,GAClC,GAAIsW,GAA8B,kBAAZA,IAAwB,QAASA,EAAS,KAAM,CAElE,MAAMmL,GAAW,QAAQnL,EAAS,KAClC,GAAInc,MAAMC,QAAQqnB,KAAcA,EAASjmB,QAAQ,YAAa,CAC1D,MAAMkmB,EAAY,gBAAkB1hB,EAAM8gB,aAAaa,WAAWnpB,WAAa,IACzEopB,EAAY5hB,EAAME,MAAM1H,WAC9B4C,EACI,wGAA2CsmB,QACxCE,mDACX,CACJ,CACJ,CACA,gBAAAhK,CAAiBC,GACbthB,KAAKmd,WAAamE,EAClBthB,KAAK8R,KAAK,wBACN9R,KAAKmd,WACLnd,KAAKsrB,UAKDtrB,KAAKmoB,YACLnoB,KAAK8e,YAAY,SAAU,CAAC,GAAG,SAGvC9e,KAAKurB,uCAAuCjK,EAChD,CACA,sCAAAiK,CAAuCC,GAGnC,MAAMC,EAAmBD,GAAoC,KAAtBA,EAAW9nB,QAC9C+nB,IAAoB,QAAQD,MAC5BxrB,KAAK8R,KAAK,iEACV9R,KAAKqoB,mBAAqBvB,GAElC,CACA,oBAAAvF,CAAqBD,GACjBthB,KAAKkd,eAAiBoE,EACtBthB,KAAK8R,KAAK,6BACN9R,KAAKkd,eACLld,KAAK0rB,cAMD1rB,KAAKmoB,YACLnoB,KAAK8e,YAAY,WAAY,CAAC,GAAG,QAG7C,CAKA,OAAAwM,GACI,GAAItrB,KAAKmoB,YAAcnoB,KAAKmd,WAAY,CACpC,MAAMmE,EAAQthB,KAAKmd,WACbwO,GAAa,QAAcrK,GAAS,OAAS,QAC7CsK,EAAc,CAAEC,KAAMvK,GACD,OAAvBthB,KAAKynB,cACLmE,EAAY,WAAY,EAEW,kBAAvB5rB,KAAKynB,gBACjBmE,EAAY,WAAa5rB,KAAKynB,eAElCznB,KAAK8e,YAAY6M,EAAYC,GAAcE,IACvC,MAAMhB,EAASgB,EAAe,KACxB3mB,EAAO2mB,EAAa,MAAQ,QAC9B9rB,KAAKmd,aAAemE,IACL,OAAXwJ,EACA9qB,KAAK4oB,uBAAyB,EAI9B5oB,KAAK+rB,eAAejB,EAAQ3lB,GAEpC,GAER,CACJ,CAMA,WAAAumB,GACQ1rB,KAAKmoB,YAAcnoB,KAAKkd,gBACxBld,KAAK8e,YAAY,WAAY,CAAE,MAAS9e,KAAKkd,iBAAmB4O,IAC5D,MAAMhB,EAASgB,EAAe,KACxB3mB,EAAO2mB,EAAa,MAAQ,QACnB,OAAXhB,EACA9qB,KAAK6oB,2BAA6B,EAGlC7oB,KAAKgsB,mBAAmBlB,EAAQ3lB,EACpC,GAGZ,CAIA,QAAA8mB,CAASxiB,EAAO0gB,GACZ,MAAMlJ,EAAaxX,EAAME,MAAM1H,WACzBmoB,EAAU3gB,EAAM4gB,iBACtBrqB,KAAK8R,KAAK,uBAAyBmP,EAAa,IAAMmJ,IACtD,QAAO3gB,EAAM8gB,aAAaC,cAAgB/gB,EAAM8gB,aAAaE,eAAgB,wDAC7E,MAAMR,EAASjqB,KAAKirB,cAAchK,EAAYmJ,GAC1CH,GAAUjqB,KAAKmoB,YACfnoB,KAAKksB,cAAcjL,EAAYmJ,EAAS3gB,EAAMmgB,aAAcO,EAEpE,CACA,aAAA+B,CAAcjL,EAAYmJ,EAAS+B,EAAUhC,GACzCnqB,KAAK8R,KAAK,eAAiBmP,EAAa,QAAUmJ,GAClD,MAAMS,EAAM,CAAWnB,EAAGzI,GACpBkI,EAAS,IAEXgB,IACAU,EAAI,KAAOsB,EACXtB,EAAI,KAAOV,GAEfnqB,KAAK8e,YAAYqK,EAAQ0B,EAC7B,CACA,eAAArJ,CAAgBP,EAAY9b,EAAM+b,GAC9BlhB,KAAKupB,kBACDvpB,KAAKmoB,WACLnoB,KAAKosB,kBAAkB,IAAKnL,EAAY9b,EAAM+b,GAG9ClhB,KAAKkoB,0BAA0BjhB,KAAK,CAChCga,aACAkI,OAAQ,IACRhkB,OACA+b,cAGZ,CACA,iBAAAO,CAAkBR,EAAY9b,EAAM+b,GAChClhB,KAAKupB,kBACDvpB,KAAKmoB,WACLnoB,KAAKosB,kBAAkB,KAAMnL,EAAY9b,EAAM+b,GAG/ClhB,KAAKkoB,0BAA0BjhB,KAAK,CAChCga,aACAkI,OAAQ,KACRhkB,OACA+b,cAGZ,CACA,kBAAAQ,CAAmBT,EAAYC,GAC3BlhB,KAAKupB,kBACDvpB,KAAKmoB,WACLnoB,KAAKosB,kBAAkB,KAAMnL,EAAY,KAAMC,GAG/ClhB,KAAKkoB,0BAA0BjhB,KAAK,CAChCga,aACAkI,OAAQ,KACRhkB,KAAM,KACN+b,cAGZ,CACA,iBAAAkL,CAAkBjD,EAAQlI,EAAY9b,EAAM+b,GACxC,MAAMuI,EAAU,CAAWC,EAAGzI,EAAqBnK,EAAG3R,GACtDnF,KAAK8R,KAAK,gBAAkBqX,EAAQM,GACpCzpB,KAAK8e,YAAYqK,EAAQM,GAAU4C,IAC3BnL,GACApb,YAAW,KACPob,EAAWmL,EAAoB,KAAMA,EAAoB,KAAK,GAC/DtmB,KAAKC,MAAM,GAClB,GAER,CACA,GAAAgb,CAAIC,EAAY9b,EAAM+b,EAAYC,GAC9BnhB,KAAKssB,YAAY,IAAKrL,EAAY9b,EAAM+b,EAAYC,EACxD,CACA,KAAAC,CAAMH,EAAY9b,EAAM+b,EAAYC,GAChCnhB,KAAKssB,YAAY,IAAKrL,EAAY9b,EAAM+b,EAAYC,EACxD,CACA,WAAAmL,CAAYnD,EAAQlI,EAAY9b,EAAM+b,EAAYC,GAC9CnhB,KAAKupB,kBACL,MAAME,EAAU,CACHC,EAAGzI,EACHnK,EAAG3R,QAEHonB,IAATpL,IACAsI,EAAiB,KAAOtI,GAG5BnhB,KAAK8nB,iBAAiB7gB,KAAK,CACvBkiB,SACAM,UACAvI,eAEJlhB,KAAKgoB,uBACL,MAAM8B,EAAQ9pB,KAAK8nB,iBAAiBpkB,OAAS,EACzC1D,KAAKmoB,WACLnoB,KAAKwsB,SAAS1C,GAGd9pB,KAAK8R,KAAK,kBAAoBmP,EAEtC,CACA,QAAAuL,CAAS1C,GACL,MAAMX,EAASnpB,KAAK8nB,iBAAiBgC,GAAOX,OACtCM,EAAUzpB,KAAK8nB,iBAAiBgC,GAAOL,QACvCvI,EAAalhB,KAAK8nB,iBAAiBgC,GAAO5I,WAChDlhB,KAAK8nB,iBAAiBgC,GAAO2C,OAASzsB,KAAKmoB,WAC3CnoB,KAAK8e,YAAYqK,EAAQM,GAAUjmB,IAC/BxD,KAAK8R,KAAKqX,EAAS,YAAa3lB,UACzBxD,KAAK8nB,iBAAiBgC,GAC7B9pB,KAAKgoB,uBAE6B,IAA9BhoB,KAAKgoB,uBACLhoB,KAAK8nB,iBAAmB,IAExB5G,GACAA,EAAW1d,EAAmB,KAAMA,EAAmB,KAC3D,GAER,CACA,WAAAme,CAAYC,GAER,GAAI5hB,KAAKmoB,WAAY,CACjB,MAAMsB,EAAU,CAAeliB,EAAGqa,GAClC5hB,KAAK8R,KAAK,cAAe2X,GACzBzpB,KAAK8e,YAAsB,IAAK2K,GAASxpB,IACrC,MAAM6qB,EAAS7qB,EAAkB,KACjC,GAAe,OAAX6qB,EAAiB,CACjB,MAAM4B,EAAczsB,EAAkB,KACtCD,KAAK8R,KAAK,cAAe,wBAA0B4a,EACvD,IAER,CACJ,CACA,cAAA7M,CAAerc,GACX,GAAI,MAAOA,EAAS,CAEhBxD,KAAK8R,KAAK,iBAAkB,QAAUtO,IACtC,MAAMmpB,EAASnpB,EAAQ,KACjB4lB,EAAappB,KAAKwoB,eAAemE,GACnCvD,WACOppB,KAAKwoB,eAAemE,GAC3BvD,EAAW5lB,EAAiB,MAEpC,KACK,IAAI,UAAWA,EAChB,KAAM,qCAAuCA,EAAQ,SAEhD,MAAOA,GAEZxD,KAAK4sB,YAAYppB,EAAQ,KAAMA,EAAQ,KAC3C,CACJ,CACA,WAAAopB,CAAYzD,EAAQtjB,GAChB7F,KAAK8R,KAAK,sBAAuBqX,EAAQtjB,GAC1B,MAAXsjB,EACAnpB,KAAKonB,cAAcvhB,EAAc,KAAMA,EAAc,MACzC,EAAOA,EAAK,MAER,MAAXsjB,EACLnpB,KAAKonB,cAAcvhB,EAAc,KAAMA,EAAc,MACxC,EAAMA,EAAK,MAER,MAAXsjB,EACLnpB,KAAK6sB,iBAAiBhnB,EAAc,KAAMA,EAAe,MAEzC,OAAXsjB,EACLnpB,KAAK+rB,eAAelmB,EAAqB,KAAMA,EAAuB,MAEtD,QAAXsjB,EACLnpB,KAAKgsB,mBAAmBnmB,EAAqB,KAAMA,EAAuB,MAE1D,OAAXsjB,EACLnpB,KAAK8sB,uBAAuBjnB,GAG5BnB,EAAM,8CACF,QAAUykB,GACV,qCAEZ,CACA,QAAA/L,CAASqD,EAAWC,GAChB1gB,KAAK8R,KAAK,oBACV9R,KAAKmoB,YAAa,EAClBnoB,KAAKgpB,gCAAiC,IAAI+D,MAAOC,UACjDhtB,KAAKitB,iBAAiBxM,GACtBzgB,KAAK0R,cAAgBgP,EACjB1gB,KAAK8oB,kBACL9oB,KAAKktB,oBAETltB,KAAKmtB,gBACLntB,KAAK8oB,kBAAmB,EACxB9oB,KAAKqnB,kBAAiB,EAC1B,CACA,gBAAA+F,CAAiB3iB,IACb,SAAQzK,KAAK0oB,UAAW,0DACpB1oB,KAAKuoB,2BACLpV,aAAanT,KAAKuoB,2BAItBvoB,KAAKuoB,0BAA4BziB,YAAW,KACxC9F,KAAKuoB,0BAA4B,KACjCvoB,KAAKqtB,sBAAsB,GAE5BtnB,KAAKC,MAAMyE,GAClB,CACA,eAAA8e,IACSvpB,KAAK0oB,WAAa1oB,KAAK8oB,kBACxB9oB,KAAKotB,iBAAiB,EAE9B,CACA,UAAAnE,CAAWtC,GAEHA,IACC3mB,KAAK0mB,UACN1mB,KAAKooB,kBAAoBpoB,KAAKqoB,qBAC9BroB,KAAK8R,KAAK,2CACV9R,KAAKooB,gBAAkBxB,GAClB5mB,KAAK0oB,WACN1oB,KAAKotB,iBAAiB,IAG9BptB,KAAK0mB,SAAWC,CACpB,CACA,SAAAuC,CAAUoE,GACFA,GACAttB,KAAK8R,KAAK,wBACV9R,KAAKooB,gBAAkBxB,GAClB5mB,KAAK0oB,WACN1oB,KAAKotB,iBAAiB,KAI1BptB,KAAK8R,KAAK,8CACN9R,KAAK0oB,WACL1oB,KAAK0oB,UAAUlU,QAG3B,CACA,qBAAA+Y,GAQI,GAPAvtB,KAAK8R,KAAK,4BACV9R,KAAKmoB,YAAa,EAClBnoB,KAAK0oB,UAAY,KAEjB1oB,KAAKwtB,0BAELxtB,KAAKwoB,eAAiB,CAAC,EACnBxoB,KAAKytB,mBAAoB,CACzB,GAAKztB,KAAK0mB,UAKL,GAAI1mB,KAAKgpB,+BAAgC,CAE1C,MAAM0E,GAAgC,IAAIX,MAAOC,UAAYhtB,KAAKgpB,+BAC9D0E,EAAgC1G,KAChChnB,KAAKooB,gBAAkBxB,IAE3B5mB,KAAKgpB,+BAAiC,IAC1C,OAXIhpB,KAAK8R,KAAK,8CACV9R,KAAKooB,gBAAkBpoB,KAAKqoB,mBAC5BroB,KAAK+oB,4BAA6B,IAAIgE,MAAOC,UAUjD,MAAMW,GAA8B,IAAIZ,MAAOC,UAAYhtB,KAAK+oB,2BAChE,IAAI6E,EAAiB7nB,KAAK+f,IAAI,EAAG9lB,KAAKooB,gBAAkBuF,GACxDC,EAAiB7nB,KAAKyN,SAAWoa,EACjC5tB,KAAK8R,KAAK,0BAA4B8b,EAAiB,MACvD5tB,KAAKotB,iBAAiBQ,GAEtB5tB,KAAKooB,gBAAkBriB,KAAKuC,IAAItI,KAAKqoB,mBAAoBroB,KAAKooB,gBAAkBrB,GACpF,CACA/mB,KAAKqnB,kBAAiB,EAC1B,CACA,0BAAMgG,GACF,GAAIrtB,KAAKytB,mBAAoB,CACzBztB,KAAK8R,KAAK,+BACV9R,KAAK+oB,4BAA6B,IAAIgE,MAAOC,UAC7ChtB,KAAKgpB,+BAAiC,KACtC,MAAM6E,EAAgB7tB,KAAK6f,eAAetb,KAAKvE,MACzC8tB,EAAU9tB,KAAKod,SAAS7Y,KAAKvE,MAC7BmS,EAAenS,KAAKutB,sBAAsBhpB,KAAKvE,MAC/CqR,EAASrR,KAAK8C,GAAK,IAAMqkB,GAAqB4G,oBAC9Crc,EAAgB1R,KAAK0R,cAC3B,IAAIsc,GAAW,EACXC,EAAa,KACjB,MAAMC,EAAU,WACRD,EACAA,EAAWzZ,SAGXwZ,GAAW,EACX7b,IAER,EACMgc,EAAgB,SAAUnP,IAC5B,QAAOiP,EAAY,0DACnBA,EAAWnP,YAAYE,EAC3B,EACAhf,KAAK0oB,UAAY,CACblU,MAAO0Z,EACPpP,YAAaqP,GAEjB,MAAM/iB,EAAepL,KAAK2oB,mBAC1B3oB,KAAK2oB,oBAAqB,EAC1B,IAGI,MAAOnX,EAAWD,SAAuBlG,QAAQ+iB,IAAI,CACjDpuB,KAAKunB,mBAAmBpc,SAASC,GACjCpL,KAAKwnB,uBAAuBrc,SAASC,KAEpC4iB,EAWD1pB,EAAI,0CAVJA,EAAI,8CACJtE,KAAKmd,WAAa3L,GAAaA,EAAU/E,YACzCzM,KAAKkd,eAAiB3L,GAAiBA,EAAc+P,MACrD2M,EAAa,IAAIlR,GAAW1L,EAAQrR,KAAKgd,UAAWhd,KAAKid,eAAgBjd,KAAKkd,eAAgBld,KAAKmd,WAAY0Q,EAAeC,EAAS3b,GACzHzI,IACV7E,EAAK6E,EAAS,KAAO1J,KAAKgd,UAAU/a,WAAa,KACjDjC,KAAKquB,UAAUpH,GAA6B,GAC7CvV,GAKX,CACA,MAAOhN,GACH1E,KAAK8R,KAAK,wBAA0BpN,GAC/BspB,IACGhuB,KAAKgd,UAAUrP,WAIf9I,EAAKH,GAETwpB,IAER,CACJ,CACJ,CACA,SAAAG,CAAU3kB,GACNpF,EAAI,uCAAyCoF,GAC7C1J,KAAK2nB,kBAAkBje,IAAU,EAC7B1J,KAAK0oB,UACL1oB,KAAK0oB,UAAUlU,SAGXxU,KAAKuoB,4BACLpV,aAAanT,KAAKuoB,2BAClBvoB,KAAKuoB,0BAA4B,MAEjCvoB,KAAKmoB,YACLnoB,KAAKutB,wBAGjB,CACA,MAAAe,CAAO5kB,GACHpF,EAAI,mCAAqCoF,UAClC1J,KAAK2nB,kBAAkBje,IAC1B,QAAQ1J,KAAK2nB,qBACb3nB,KAAKooB,gBAAkBxB,GAClB5mB,KAAK0oB,WACN1oB,KAAKotB,iBAAiB,GAGlC,CACA,gBAAAH,CAAiBxM,GACb,MAAM8N,EAAQ9N,GAAY,IAAIsM,MAAOC,UACrChtB,KAAKsnB,oBAAoB,CAAEkH,iBAAkBD,GACjD,CACA,uBAAAf,GACI,IAAK,IAAI/pB,EAAI,EAAGA,EAAIzD,KAAK8nB,iBAAiBpkB,OAAQD,IAAK,CACnD,MAAMud,EAAMhhB,KAAK8nB,iBAAiBrkB,GAC9Bud,GAAgB,MAAOA,EAAIyI,SAAWzI,EAAIyL,SACtCzL,EAAIE,YACJF,EAAIE,WAAW,qBAEZlhB,KAAK8nB,iBAAiBrkB,GAC7BzD,KAAKgoB,uBAEb,CAEkC,IAA9BhoB,KAAKgoB,uBACLhoB,KAAK8nB,iBAAmB,GAEhC,CACA,gBAAA+E,CAAiB5L,EAAYxX,GAEzB,IAAI2gB,EAKAA,EAJC3gB,EAISA,EAAM/I,KAAIipB,GAAK7iB,EAAkB6iB,KAAIhhB,KAAK,KAH1C,UAKd,MAAMshB,EAASjqB,KAAKirB,cAAchK,EAAYmJ,GAC1CH,GAAUA,EAAO/I,YACjB+I,EAAO/I,WAAW,oBAE1B,CACA,aAAA+J,CAAchK,EAAYmJ,GACtB,MAAMqE,EAAuB,IAAItL,GAAKlC,GAAYhf,WAClD,IAAIgoB,EACJ,GAAIjqB,KAAK4nB,QAAQ0C,IAAImE,GAAuB,CACxC,MAAM/tB,EAAMV,KAAK4nB,QAAQhmB,IAAI6sB,GAC7BxE,EAASvpB,EAAIkB,IAAIwoB,GACjB1pB,EAAIgX,OAAO0S,GACM,IAAb1pB,EAAIgW,MACJ1W,KAAK4nB,QAAQlQ,OAAO+W,EAE5B,MAGIxE,OAASsC,EAEb,OAAOtC,CACX,CACA,cAAA8B,CAAe2C,EAAYC,GACvBrqB,EAAI,uBAAyBoqB,EAAa,IAAMC,GAChD3uB,KAAKmd,WAAa,KAClBnd,KAAK2oB,oBAAqB,EAC1B3oB,KAAK0oB,UAAUlU,QACI,kBAAfka,GAAiD,sBAAfA,IAIlC1uB,KAAK4oB,yBACD5oB,KAAK4oB,wBAA0B1B,KAE/BlnB,KAAKooB,gBAAkBtB,GAGvB9mB,KAAKunB,mBAAmB3b,yBAGpC,CACA,kBAAAogB,CAAmB0C,EAAYC,GAC3BrqB,EAAI,4BAA8BoqB,EAAa,IAAMC,GACrD3uB,KAAKkd,eAAiB,KACtBld,KAAK2oB,oBAAqB,EAGP,kBAAf+F,GAAiD,sBAAfA,IAIlC1uB,KAAK6oB,6BACD7oB,KAAK6oB,4BAA8B3B,IACnClnB,KAAKwnB,uBAAuB5b,wBAGxC,CACA,sBAAAkhB,CAAuBjnB,GACf7F,KAAKsoB,uBACLtoB,KAAKsoB,uBAAuBziB,GAGxB,QAASA,GACT+oB,QAAQtqB,IAAI,aAAeuB,EAAK,OAAOgpB,QAAQ,KAAM,gBAGjE,CACA,aAAA1B,GAEIntB,KAAKsrB,UACLtrB,KAAK0rB,cAGL,IAAK,MAAMoD,KAAW9uB,KAAK4nB,QAAQmH,SAC/B,IAAK,MAAMrE,KAAcoE,EAAQC,SAC7B/uB,KAAK4qB,YAAYF,GAGzB,IAAK,IAAIjnB,EAAI,EAAGA,EAAIzD,KAAK8nB,iBAAiBpkB,OAAQD,IAC1CzD,KAAK8nB,iBAAiBrkB,IACtBzD,KAAKwsB,SAAS/oB,GAGtB,MAAOzD,KAAKkoB,0BAA0BxkB,OAAQ,CAC1C,MAAM+lB,EAAUzpB,KAAKkoB,0BAA0BlR,QAC/ChX,KAAKosB,kBAAkB3C,EAAQN,OAAQM,EAAQxI,WAAYwI,EAAQtkB,KAAMskB,EAAQvI,WACrF,CACA,IAAK,IAAIzd,EAAI,EAAGA,EAAIzD,KAAK+nB,iBAAiBrkB,OAAQD,IAC1CzD,KAAK+nB,iBAAiBtkB,IACtBzD,KAAK+pB,SAAStmB,EAG1B,CAIA,iBAAAypB,GACI,MAAMtL,EAAQ,CAAC,EACf,IAAIoN,EAAa,MACb,YAEIA,EADAhvB,KAAKgd,UAAUrP,UACF,aAGA,QAGrBiU,EAAM,OAASoN,EAAa,IAAM/tB,EAAY4tB,QAAQ,MAAO,MAAQ,GACjE,UACAjN,EAAM,qBAAuB,GAExB,YACLA,EAAM,yBAA2B,GAErC5hB,KAAK2hB,YAAYC,EACrB,CACA,gBAAA6L,GACI,MAAMH,EAAS1K,GAAcG,cAAcC,kBAC3C,OAAO,QAAQhjB,KAAK2nB,oBAAsB2F,CAC9C,EAEJnG,GAAqBO,4BAA8B,EAInDP,GAAqB4G,kBAAoB;;;;;;;;;;;;;;;;;AAkBzC,MAAMkB,GACF,WAAA7tB,CAAYY,EAAMktB,GACdlvB,KAAKgC,KAAOA,EACZhC,KAAKkvB,KAAOA,CAChB,CACA,WAAOC,CAAKntB,EAAMktB,GACd,OAAO,IAAID,GAAUjtB,EAAMktB,EAC/B;;;;;;;;;;;;;;;;GAmBJ,MAAME,GAKF,UAAAC,GACI,OAAOrvB,KAAKsvB,QAAQ/qB,KAAKvE,KAC7B,CAQA,mBAAAuvB,CAAoBC,EAASC,GACzB,MAAMC,EAAa,IAAIT,GAAU9oB,EAAUqpB,GACrCG,EAAa,IAAIV,GAAU9oB,EAAUspB,GAC3C,OAAgD,IAAzCzvB,KAAKsvB,QAAQI,EAAYC,EACpC,CAKA,OAAAC,GAEI,OAAOX,GAAUY,GACrB;;;;;;;;;;;;;;;;GAmBJ,IAAIC,GACJ,MAAMC,WAAiBX,GACnB,uBAAWU,GACP,OAAOA,EACX,CACA,uBAAWA,CAAaE,GACpBF,GAAeE,CACnB,CACA,OAAAV,CAAQhpB,EAAGC,GACP,OAAOF,EAAYC,EAAEtE,KAAMuE,EAAEvE,KACjC,CACA,WAAAiuB,CAAYf,GAGR,MAAM,QAAe,kDACzB,CACA,mBAAAK,CAAoBC,EAASC,GACzB,OAAO,CACX,CACA,OAAAG,GAEI,OAAOX,GAAUY,GACrB,CACA,OAAAK,GAGI,OAAO,IAAIjB,GAAU7oB,EAAU0pB,GACnC,CACA,QAAAK,CAASC,EAAYpuB,GAGjB,OAFA,QAA6B,kBAAfouB,EAAyB,gDAEhC,IAAInB,GAAUmB,EAAYN,GACrC,CAIA,QAAA7tB,GACI,MAAO,MACX,EAEJ,MAAMouB,GAAY,IAAIN;;;;;;;;;;;;;;;;GAqBtB,MAAMO,GAKF,WAAAlvB,CAAY8tB,EAAMqB,EAAUC,EAAYC,EAAYC,EAAmB,MACnE1wB,KAAKywB,WAAaA,EAClBzwB,KAAK0wB,iBAAmBA,EACxB1wB,KAAK2wB,WAAa,GAClB,IAAItL,EAAM,EACV,OAAQ6J,EAAK0B,UAOT,GALAvL,EAAMkL,EAAWC,EAAWtB,EAAK1tB,IAAK+uB,GAAY,EAE9CE,IACApL,IAAQ,GAERA,EAAM,EAGF6J,EADAlvB,KAAKywB,WACEvB,EAAKjK,KAGLiK,EAAKhK,UAGf,IAAY,IAARG,EAAW,CAEhBrlB,KAAK2wB,WAAW1pB,KAAKioB,GACrB,KACJ,CAGIlvB,KAAK2wB,WAAW1pB,KAAKioB,GAEjBA,EADAlvB,KAAKywB,WACEvB,EAAKhK,MAGLgK,EAAKjK,IAEpB,CAER,CACA,OAAA4L,GACI,GAA+B,IAA3B7wB,KAAK2wB,WAAWjtB,OAChB,OAAO,KAEX,IACIzD,EADAivB,EAAOlvB,KAAK2wB,WAAWtK,MAQ3B,GALIpmB,EADAD,KAAK0wB,iBACI1wB,KAAK0wB,iBAAiBxB,EAAK1tB,IAAK0tB,EAAK7uB,OAGrC,CAAEmB,IAAK0tB,EAAK1tB,IAAKnB,MAAO6uB,EAAK7uB,OAEtCL,KAAKywB,WAAY,CACjBvB,EAAOA,EAAKjK,KACZ,OAAQiK,EAAK0B,UACT5wB,KAAK2wB,WAAW1pB,KAAKioB,GACrBA,EAAOA,EAAKhK,KAEpB,KACK,CACDgK,EAAOA,EAAKhK,MACZ,OAAQgK,EAAK0B,UACT5wB,KAAK2wB,WAAW1pB,KAAKioB,GACrBA,EAAOA,EAAKjK,IAEpB,CACA,OAAOhlB,CACX,CACA,OAAA6wB,GACI,OAAO9wB,KAAK2wB,WAAWjtB,OAAS,CACpC,CACA,IAAAqtB,GACI,GAA+B,IAA3B/wB,KAAK2wB,WAAWjtB,OAChB,OAAO,KAEX,MAAMwrB,EAAOlvB,KAAK2wB,WAAW3wB,KAAK2wB,WAAWjtB,OAAS,GACtD,OAAI1D,KAAK0wB,iBACE1wB,KAAK0wB,iBAAiBxB,EAAK1tB,IAAK0tB,EAAK7uB,OAGrC,CAAEmB,IAAK0tB,EAAK1tB,IAAKnB,MAAO6uB,EAAK7uB,MAE5C,EAKJ,MAAM2wB,GAQF,WAAA5vB,CAAYI,EAAKnB,EAAO4wB,EAAOhM,EAAMC,GACjCllB,KAAKwB,IAAMA,EACXxB,KAAKK,MAAQA,EACbL,KAAKixB,MAAiB,MAATA,EAAgBA,EAAQD,GAASE,IAC9ClxB,KAAKilB,KACO,MAARA,EAAeA,EAAOkM,GAAUC,WACpCpxB,KAAKklB,MACQ,MAATA,EAAgBA,EAAQiM,GAAUC,UAC1C,CAWA,IAAAC,CAAK7vB,EAAKnB,EAAO4wB,EAAOhM,EAAMC,GAC1B,OAAO,IAAI8L,GAAgB,MAAPxvB,EAAcA,EAAMxB,KAAKwB,IAAc,MAATnB,EAAgBA,EAAQL,KAAKK,MAAgB,MAAT4wB,EAAgBA,EAAQjxB,KAAKixB,MAAe,MAARhM,EAAeA,EAAOjlB,KAAKilB,KAAe,MAATC,EAAgBA,EAAQllB,KAAKklB,MAC5L,CAIA,KAAAoM,GACI,OAAOtxB,KAAKilB,KAAKqM,QAAU,EAAItxB,KAAKklB,MAAMoM,OAC9C,CAIA,OAAAV,GACI,OAAO,CACX,CAUA,gBAAAW,CAAiBpI,GACb,OAAQnpB,KAAKilB,KAAKsM,iBAAiBpI,MAC7BA,EAAOnpB,KAAKwB,IAAKxB,KAAKK,QACxBL,KAAKklB,MAAMqM,iBAAiBpI,EACpC,CASA,gBAAAqI,CAAiBrI,GACb,OAAQnpB,KAAKklB,MAAMsM,iBAAiBrI,IAChCA,EAAOnpB,KAAKwB,IAAKxB,KAAKK,QACtBL,KAAKilB,KAAKuM,iBAAiBrI,EACnC,CAIA,IAAAsI,GACI,OAAIzxB,KAAKilB,KAAK2L,UACH5wB,KAGAA,KAAKilB,KAAKwM,MAEzB,CAIA,MAAAC,GACI,OAAO1xB,KAAKyxB,OAAOjwB,GACvB,CAIA,MAAAmwB,GACI,OAAI3xB,KAAKklB,MAAM0L,UACJ5wB,KAAKwB,IAGLxB,KAAKklB,MAAMyM,QAE1B,CAOA,MAAAC,CAAOpwB,EAAKnB,EAAOmwB,GACf,IAAIqB,EAAI7xB,KACR,MAAMqlB,EAAMmL,EAAWhvB,EAAKqwB,EAAErwB,KAU9B,OARIqwB,EADAxM,EAAM,EACFwM,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAE5M,KAAK2M,OAAOpwB,EAAKnB,EAAOmwB,GAAa,MAEvD,IAARnL,EACDwM,EAAER,KAAK,KAAMhxB,EAAO,KAAM,KAAM,MAGhCwxB,EAAER,KAAK,KAAM,KAAM,KAAM,KAAMQ,EAAE3M,MAAM0M,OAAOpwB,EAAKnB,EAAOmwB,IAE3DqB,EAAEC,QACb,CAIA,UAAAC,GACI,GAAI/xB,KAAKilB,KAAK2L,UACV,OAAOO,GAAUC,WAErB,IAAIS,EAAI7xB,KAKR,OAJK6xB,EAAE5M,KAAK+M,UAAaH,EAAE5M,KAAKA,KAAK+M,WACjCH,EAAIA,EAAEI,gBAEVJ,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAE5M,KAAK8M,aAAc,MAC3CF,EAAEC,QACb,CAMA,MAAA/vB,CAAOP,EAAKgvB,GACR,IAAIqB,EAAGK,EAEP,GADAL,EAAI7xB,KACAwwB,EAAWhvB,EAAKqwB,EAAErwB,KAAO,EACpBqwB,EAAE5M,KAAK2L,WAAciB,EAAE5M,KAAK+M,UAAaH,EAAE5M,KAAKA,KAAK+M,WACtDH,EAAIA,EAAEI,gBAEVJ,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAE5M,KAAKljB,OAAOP,EAAKgvB,GAAa,UAE5D,CAOD,GANIqB,EAAE5M,KAAK+M,WACPH,EAAIA,EAAEM,gBAELN,EAAE3M,MAAM0L,WAAciB,EAAE3M,MAAM8M,UAAaH,EAAE3M,MAAMD,KAAK+M,WACzDH,EAAIA,EAAEO,iBAEqB,IAA3B5B,EAAWhvB,EAAKqwB,EAAErwB,KAAY,CAC9B,GAAIqwB,EAAE3M,MAAM0L,UACR,OAAOO,GAAUC,WAGjBc,EAAWL,EAAE3M,MAAMuM,OACnBI,EAAIA,EAAER,KAAKa,EAAS1wB,IAAK0wB,EAAS7xB,MAAO,KAAM,KAAMwxB,EAAE3M,MAAM6M,aAErE,CACAF,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAM,KAAMQ,EAAE3M,MAAMnjB,OAAOP,EAAKgvB,GAC3D,CACA,OAAOqB,EAAEC,QACb,CAIA,MAAAE,GACI,OAAOhyB,KAAKixB,KAChB,CAIA,MAAAa,GACI,IAAID,EAAI7xB,KAUR,OATI6xB,EAAE3M,MAAM8M,WAAaH,EAAE5M,KAAK+M,WAC5BH,EAAIA,EAAEQ,eAENR,EAAE5M,KAAK+M,UAAYH,EAAE5M,KAAKA,KAAK+M,WAC/BH,EAAIA,EAAEM,gBAENN,EAAE5M,KAAK+M,UAAYH,EAAE3M,MAAM8M,WAC3BH,EAAIA,EAAES,cAEHT,CACX,CAIA,YAAAI,GACI,IAAIJ,EAAI7xB,KAAKsyB,aAMb,OALIT,EAAE3M,MAAMD,KAAK+M,WACbH,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAM,KAAMQ,EAAE3M,MAAMiN,gBAC3CN,EAAIA,EAAEQ,cACNR,EAAIA,EAAES,cAEHT,CACX,CAIA,aAAAO,GACI,IAAIP,EAAI7xB,KAAKsyB,aAKb,OAJIT,EAAE5M,KAAKA,KAAK+M,WACZH,EAAIA,EAAEM,eACNN,EAAIA,EAAES,cAEHT,CACX,CAIA,WAAAQ,GACI,MAAME,EAAKvyB,KAAKqxB,KAAK,KAAM,KAAML,GAASE,IAAK,KAAMlxB,KAAKklB,MAAMD,MAChE,OAAOjlB,KAAKklB,MAAMmM,KAAK,KAAM,KAAMrxB,KAAKixB,MAAOsB,EAAI,KACvD,CAIA,YAAAJ,GACI,MAAMK,EAAKxyB,KAAKqxB,KAAK,KAAM,KAAML,GAASE,IAAKlxB,KAAKilB,KAAKC,MAAO,MAChE,OAAOllB,KAAKilB,KAAKoM,KAAK,KAAM,KAAMrxB,KAAKixB,MAAO,KAAMuB,EACxD,CAIA,UAAAF,GACI,MAAMrN,EAAOjlB,KAAKilB,KAAKoM,KAAK,KAAM,MAAOrxB,KAAKilB,KAAKgM,MAAO,KAAM,MAC1D/L,EAAQllB,KAAKklB,MAAMmM,KAAK,KAAM,MAAOrxB,KAAKklB,MAAM+L,MAAO,KAAM,MACnE,OAAOjxB,KAAKqxB,KAAK,KAAM,MAAOrxB,KAAKixB,MAAOhM,EAAMC,EACpD,CAMA,cAAAuN,GACI,MAAMC,EAAa1yB,KAAK2yB,SACxB,OAAO5sB,KAAKsC,IAAI,EAAKqqB,IAAe1yB,KAAKsxB,QAAU,CACvD,CACA,MAAAqB,GACI,GAAI3yB,KAAKgyB,UAAYhyB,KAAKilB,KAAK+M,SAC3B,MAAM,IAAIptB,MAAM,0BAA4B5E,KAAKwB,IAAM,IAAMxB,KAAKK,MAAQ,KAE9E,GAAIL,KAAKklB,MAAM8M,SACX,MAAM,IAAIptB,MAAM,mBAAqB5E,KAAKwB,IAAM,IAAMxB,KAAKK,MAAQ,YAEvE,MAAMqyB,EAAa1yB,KAAKilB,KAAK0N,SAC7B,GAAID,IAAe1yB,KAAKklB,MAAMyN,SAC1B,MAAM,IAAI/tB,MAAM,uBAGhB,OAAO8tB,GAAc1yB,KAAKgyB,SAAW,EAAI,EAEjD,EAEJhB,GAASE,KAAM,EACfF,GAAS4B,OAAQ,EAIjB,MAAMC,GAMF,IAAAxB,CAAK7vB,EAAKnB,EAAO4wB,EAAOhM,EAAMC,GAC1B,OAAOllB,IACX,CASA,MAAA4xB,CAAOpwB,EAAKnB,EAAOmwB,GACf,OAAO,IAAIQ,GAASxvB,EAAKnB,EAAO,KACpC,CAQA,MAAA0B,CAAOP,EAAKgvB,GACR,OAAOxwB,IACX,CAIA,KAAAsxB,GACI,OAAO,CACX,CAIA,OAAAV,GACI,OAAO,CACX,CASA,gBAAAW,CAAiBpI,GACb,OAAO,CACX,CASA,gBAAAqI,CAAiBrI,GACb,OAAO,CACX,CACA,MAAAuI,GACI,OAAO,IACX,CACA,MAAAC,GACI,OAAO,IACX,CACA,MAAAgB,GACI,OAAO,CACX,CAIA,MAAAX,GACI,OAAO,CACX,EAMJ,MAAMb,GAKF,WAAA/vB,CAAY0xB,EAAaC,EAAQ5B,GAAUC,YACvCpxB,KAAK8yB,YAAcA,EACnB9yB,KAAK+yB,MAAQA,CACjB,CASA,MAAAnB,CAAOpwB,EAAKnB,GACR,OAAO,IAAI8wB,GAAUnxB,KAAK8yB,YAAa9yB,KAAK+yB,MACvCnB,OAAOpwB,EAAKnB,EAAOL,KAAK8yB,aACxBzB,KAAK,KAAM,KAAML,GAAS4B,MAAO,KAAM,MAChD,CAOA,MAAA7wB,CAAOP,GACH,OAAO,IAAI2vB,GAAUnxB,KAAK8yB,YAAa9yB,KAAK+yB,MACvChxB,OAAOP,EAAKxB,KAAK8yB,aACjBzB,KAAK,KAAM,KAAML,GAAS4B,MAAO,KAAM,MAChD,CAQA,GAAAhxB,CAAIJ,GACA,IAAI6jB,EACA6J,EAAOlvB,KAAK+yB,MAChB,OAAQ7D,EAAK0B,UAAW,CAEpB,GADAvL,EAAMrlB,KAAK8yB,YAAYtxB,EAAK0tB,EAAK1tB,KACrB,IAAR6jB,EACA,OAAO6J,EAAK7uB,MAEPglB,EAAM,EACX6J,EAAOA,EAAKjK,KAEPI,EAAM,IACX6J,EAAOA,EAAKhK,MAEpB,CACA,OAAO,IACX,CAMA,iBAAA8N,CAAkBxxB,GACd,IAAI6jB,EAAK6J,EAAOlvB,KAAK+yB,MAAOE,EAAc,KAC1C,OAAQ/D,EAAK0B,UAAW,CAEpB,GADAvL,EAAMrlB,KAAK8yB,YAAYtxB,EAAK0tB,EAAK1tB,KACrB,IAAR6jB,EAAW,CACX,GAAK6J,EAAKjK,KAAK2L,UAOV,OAAIqC,EACEA,EAAYzxB,IAGZ,KAVP0tB,EAAOA,EAAKjK,KACZ,OAAQiK,EAAKhK,MAAM0L,UACf1B,EAAOA,EAAKhK,MAEhB,OAAOgK,EAAK1tB,GAQpB,CACS6jB,EAAM,EACX6J,EAAOA,EAAKjK,KAEPI,EAAM,IACX4N,EAAc/D,EACdA,EAAOA,EAAKhK,MAEpB,CACA,MAAM,IAAItgB,MAAM,wEACpB,CAIA,OAAAgsB,GACI,OAAO5wB,KAAK+yB,MAAMnC,SACtB,CAIA,KAAAU,GACI,OAAOtxB,KAAK+yB,MAAMzB,OACtB,CAIA,MAAAI,GACI,OAAO1xB,KAAK+yB,MAAMrB,QACtB,CAIA,MAAAC,GACI,OAAO3xB,KAAK+yB,MAAMpB,QACtB,CAUA,gBAAAJ,CAAiBpI,GACb,OAAOnpB,KAAK+yB,MAAMxB,iBAAiBpI,EACvC,CASA,gBAAAqI,CAAiBrI,GACb,OAAOnpB,KAAK+yB,MAAMvB,iBAAiBrI,EACvC,CAKA,WAAA+J,CAAYC,GACR,OAAO,IAAI7C,GAAkBtwB,KAAK+yB,MAAO,KAAM/yB,KAAK8yB,aAAa,EAAOK,EAC5E,CACA,eAAAC,CAAgB5xB,EAAK2xB,GACjB,OAAO,IAAI7C,GAAkBtwB,KAAK+yB,MAAOvxB,EAAKxB,KAAK8yB,aAAa,EAAOK,EAC3E,CACA,sBAAAE,CAAuB7xB,EAAK2xB,GACxB,OAAO,IAAI7C,GAAkBtwB,KAAK+yB,MAAOvxB,EAAKxB,KAAK8yB,aAAa,EAAMK,EAC1E,CACA,kBAAAG,CAAmBH,GACf,OAAO,IAAI7C,GAAkBtwB,KAAK+yB,MAAO,KAAM/yB,KAAK8yB,aAAa,EAAMK,EAC3E;;;;;;;;;;;;;;;;;AAuBJ,SAASI,GAAqBtO,EAAMC,GAChC,OAAO7e,EAAY4e,EAAKjjB,KAAMkjB,EAAMljB,KACxC,CACA,SAASwxB,GAAgBvO,EAAMC,GAC3B,OAAO7e,EAAY4e,EAAMC,EAC7B;;;;;;;;;;;;;;;;GAkBA,IAAIuO,GACJ,SAASC,GAAa1D,GAClByD,GAAazD,CACjB,CA5CAmB,GAAUC,WAAa,IAAIyB,GA6C3B,MAAMc,GAAmB,SAAUC,GAC/B,MAAwB,kBAAbA,EACA,UAAYjsB,EAAsBisB,GAGlC,UAAYA,CAE3B,EAIMC,GAAuB,SAAUC,GACnC,GAAIA,EAAaC,aAAc,CAC3B,MAAM/D,EAAM8D,EAAa9D,OACzB,QAAsB,kBAARA,GACK,kBAARA,GACS,kBAARA,IAAoB,QAASA,EAAK,OAAS,uCAC3D,MAEI,QAAO8D,IAAiBL,IAAcK,EAAalD,UAAW,iCAGlE,QAAOkD,IAAiBL,IAAcK,EAAaE,cAAcpD,UAAW,qDAChF;;;;;;;;;;;;;;;;;AAkBA,IAAIqD,GAuOAC,GACAC,GAlOJ,MAAMC,GAMF,WAAAhzB,CAAYizB,EAAQC,EAAgBF,GAASH,0BAA0B7C,YACnEpxB,KAAKq0B,OAASA,EACdr0B,KAAKs0B,cAAgBA,EACrBt0B,KAAKu0B,UAAY,MACjB,aAAuBhI,IAAhBvsB,KAAKq0B,QAAwC,OAAhBr0B,KAAKq0B,OAAiB,4DAC1DR,GAAqB7zB,KAAKs0B,cAC9B,CACA,oCAAWL,CAA0BjE,GACjCiE,GAA4BjE,CAChC,CACA,oCAAWiE,GACP,OAAOA,EACX,CAEA,UAAAF,GACI,OAAO,CACX,CAEA,WAAAC,GACI,OAAOh0B,KAAKs0B,aAChB,CAEA,cAAAE,CAAeC,GACX,OAAO,IAAIL,GAASp0B,KAAKq0B,OAAQI,EACrC,CAEA,iBAAAC,CAAkBC,GAEd,MAAkB,cAAdA,EACO30B,KAAKs0B,cAGLF,GAASH,0BAA0B7C,UAElD,CAEA,QAAAwD,CAAShR,GACL,OAAIc,GAAYd,GACL5jB,KAEqB,cAAvB2jB,GAAaC,GACX5jB,KAAKs0B,cAGLF,GAASH,0BAA0B7C,UAElD,CACA,QAAAyD,GACI,OAAO,CACX,CAEA,uBAAAC,CAAwBH,EAAWI,GAC/B,OAAO,IACX,CAEA,oBAAAC,CAAqBL,EAAWM,GAC5B,MAAkB,cAAdN,EACO30B,KAAKw0B,eAAeS,GAEtBA,EAAarE,WAA2B,cAAd+D,EACxB30B,KAGAo0B,GAASH,0BAA0B7C,WAAW4D,qBAAqBL,EAAWM,GAAcT,eAAex0B,KAAKs0B,cAE/H,CAEA,WAAAY,CAAYtR,EAAMqR,GACd,MAAME,EAAQxR,GAAaC,GAC3B,OAAc,OAAVuR,EACOF,EAEFA,EAAarE,WAAuB,cAAVuE,EACxBn1B,OAGP,QAAiB,cAAVm1B,GAAiD,IAAxBtR,GAAcD,GAAa,8CACpD5jB,KAAKg1B,qBAAqBG,EAAOf,GAASH,0BAA0B7C,WAAW8D,YAAYpR,GAAaF,GAAOqR,IAE9H,CAEA,OAAArE,GACI,OAAO,CACX,CAEA,WAAAwE,GACI,OAAO,CACX,CAEA,YAAAC,CAAavL,EAAOX,GAChB,OAAO,CACX,CACA,GAAA6G,CAAIsF,GACA,OAAIA,IAAiBt1B,KAAKg0B,cAAcpD,UAC7B,CACH,SAAU5wB,KAAKu1B,WACf,YAAav1B,KAAKg0B,cAAchE,OAI7BhwB,KAAKu1B,UAEpB,CAEA,IAAApU,GACI,GAAuB,OAAnBnhB,KAAKu0B,UAAoB,CACzB,IAAIiB,EAAS,GACRx1B,KAAKs0B,cAAc1D,YACpB4E,GACI,YACI7B,GAAiB3zB,KAAKs0B,cAActE,OACpC,KAEZ,MAAMvhB,SAAczO,KAAKq0B,OACzBmB,GAAU/mB,EAAO,IAEb+mB,GADS,WAAT/mB,EACU9G,EAAsB3H,KAAKq0B,QAG3Br0B,KAAKq0B,OAEnBr0B,KAAKu0B,UAAYxxB,EAAKyyB,EAC1B,CACA,OAAOx1B,KAAKu0B,SAChB,CAKA,QAAAgB,GACI,OAAOv1B,KAAKq0B,MAChB,CACA,SAAAoB,CAAUlQ,GACN,OAAIA,IAAU6O,GAASH,0BAA0B7C,WACtC,EAEF7L,aAAiB6O,GAASH,2BACvB,IAGR,QAAO1O,EAAMwO,aAAc,qBACpB/zB,KAAK01B,mBAAmBnQ,GAEvC,CAIA,kBAAAmQ,CAAmBC,GACf,MAAMC,SAAuBD,EAAUtB,OACjCwB,SAAsB71B,KAAKq0B,OAC3ByB,EAAa1B,GAAS2B,iBAAiB9wB,QAAQ2wB,GAC/CI,EAAY5B,GAAS2B,iBAAiB9wB,QAAQ4wB,GAGpD,OAFA,QAAOC,GAAc,EAAG,sBAAwBF,IAChD,QAAOI,GAAa,EAAG,sBAAwBH,GAC3CC,IAAeE,EAEM,WAAjBH,EAEO,EAIH71B,KAAKq0B,OAASsB,EAAUtB,QAChB,EAEHr0B,KAAKq0B,SAAWsB,EAAUtB,OACxB,EAGA,EAKR2B,EAAYF,CAE3B,CACA,SAAAG,GACI,OAAOj2B,IACX,CACA,SAAAk2B,GACI,OAAO,CACX,CACA,MAAAC,CAAO5Q,GACH,GAAIA,IAAUvlB,KACV,OAAO,EAEN,GAAIulB,EAAMwO,aAAc,CACzB,MAAM4B,EAAYpQ,EAClB,OAAQvlB,KAAKq0B,SAAWsB,EAAUtB,QAC9Br0B,KAAKs0B,cAAc6B,OAAOR,EAAUrB,cAC5C,CAEI,OAAO,CAEf,EA0BJ,SAAS8B,GAAgBpG,GACrBkE,GAAiBlE,CACrB,CACA,SAASqG,GAAWrG,GAChBmE,GAAanE,CACjB,CAzBAoE,GAAS2B,iBAAmB,CAAC,SAAU,UAAW,SAAU,UA0B5D,MAAMO,WAAsBlH,GACxB,OAAAE,CAAQhpB,EAAGC,GACP,MAAMgwB,EAAYjwB,EAAE4oB,KAAK8E,cACnBwC,EAAYjwB,EAAE2oB,KAAK8E,cACnByC,EAAWF,EAAUd,UAAUe,GACrC,OAAiB,IAAbC,EACOpwB,EAAYC,EAAEtE,KAAMuE,EAAEvE,MAGtBy0B,CAEf,CACA,WAAAxG,CAAYf,GACR,OAAQA,EAAK8E,cAAcpD,SAC/B,CACA,mBAAArB,CAAoBC,EAASC,GACzB,OAAQD,EAAQwE,cAAcmC,OAAO1G,EAAQuE,cACjD,CACA,OAAApE,GAEI,OAAOX,GAAUY,GACrB,CACA,OAAAK,GACI,OAAO,IAAIjB,GAAU7oB,EAAU,IAAIguB,GAAS,kBAAmBD,IACnE,CACA,QAAAhE,CAASC,EAAYpuB,GACjB,MAAM8xB,EAAeI,GAAe9D,GACpC,OAAO,IAAInB,GAAUjtB,EAAM,IAAIoyB,GAAS,kBAAmBN,GAC/D,CAIA,QAAA7xB,GACI,MAAO,WACX,EAEJ,MAAMy0B,GAAiB,IAAIJ,GAkBrBK,GAAQ5wB,KAAKzB,IAAI;;;;;;;;;;;;;;;;GACvB,MAAMsyB,GACF,WAAAx1B,CAAYsC,GACR,MAAMmzB,EAAYC,GAElBhuB,SAAU/C,KAAKzB,IAAIwyB,GAAOH,GAAQ,IAC5BI,EAAWtuB,GAASK,SAASlF,MAAM6E,EAAO,GAAGE,KAAK,KAAM,GAC9D3I,KAAKsxB,MAAQuF,EAASnzB,EAAS,GAC/B1D,KAAKg3B,SAAWh3B,KAAKsxB,MAAQ,EAC7B,MAAM2F,EAAOF,EAAQ/2B,KAAKsxB,OAC1BtxB,KAAKk3B,MAASxzB,EAAS,EAAKuzB,CAChC,CACA,YAAAE,GAEI,MAAMl3B,IAAWD,KAAKk3B,MAAS,GAAOl3B,KAAKg3B,UAE3C,OADAh3B,KAAKg3B,WACE/2B,CACX,EAeJ,MAAMm3B,GAAgB,SAAUC,EAAWhS,EAAKiS,EAAOC,GACnDF,EAAUnwB,KAAKme,GACf,MAAMmS,EAAoB,SAAUC,EAAKC,GACrC,MAAMh0B,EAASg0B,EAAOD,EACtB,IAAIE,EACAn2B,EACJ,GAAe,IAAXkC,EACA,OAAO,KAEN,GAAe,IAAXA,EAGL,OAFAi0B,EAAYN,EAAUI,GACtBj2B,EAAM81B,EAAQA,EAAMK,GAAaA,EAC1B,IAAI3G,GAASxvB,EAAKm2B,EAAUzI,KAAM8B,GAAS4B,MAAO,KAAM,MAE9D,CAED,MAAMgF,EAAS9uB,SAAUpF,EAAS,EAAI,IAAM+zB,EACtCxS,EAAOuS,EAAkBC,EAAKG,GAC9B1S,EAAQsS,EAAkBI,EAAS,EAAGF,GAG5C,OAFAC,EAAYN,EAAUO,GACtBp2B,EAAM81B,EAAQA,EAAMK,GAAaA,EAC1B,IAAI3G,GAASxvB,EAAKm2B,EAAUzI,KAAM8B,GAAS4B,MAAO3N,EAAMC,EACnE,CACJ,EACM2S,EAAmB,SAAUC,GAC/B,IAAI5I,EAAO,KACP6I,EAAO,KACPjO,EAAQuN,EAAU3zB,OACtB,MAAMs0B,EAAe,SAAUC,EAAWhH,GACtC,MAAMwG,EAAM3N,EAAQmO,EACdP,EAAO5N,EACbA,GAASmO,EACT,MAAMC,EAAYV,EAAkBC,EAAM,EAAGC,GACvCC,EAAYN,EAAUI,GACtBj2B,EAAM81B,EAAQA,EAAMK,GAAaA,EACvCQ,EAAc,IAAInH,GAASxvB,EAAKm2B,EAAUzI,KAAM+B,EAAO,KAAMiH,GACjE,EACMC,EAAgB,SAAUC,GACxBlJ,GACAA,EAAKjK,KAAOmT,EACZlJ,EAAOkJ,IAGPL,EAAOK,EACPlJ,EAAOkJ,EAEf,EACA,IAAK,IAAI30B,EAAI,EAAGA,EAAIq0B,EAAOxG,QAAS7tB,EAAG,CACnC,MAAM40B,EAAQP,EAAOX,eAEfc,EAAYlyB,KAAKsC,IAAI,EAAGyvB,EAAOxG,OAAS7tB,EAAI,IAC9C40B,EACAL,EAAaC,EAAWjH,GAAS4B,QAIjCoF,EAAaC,EAAWjH,GAAS4B,OACjCoF,EAAaC,EAAWjH,GAASE,KAEzC,CACA,OAAO6G,CACX,EACMD,EAAS,IAAIlB,GAAUS,EAAU3zB,QACjCq0B,EAAOF,EAAiBC,GAE9B,OAAO,IAAI3G,GAAUoG,GAAalS,EAAK0S,EAC3C;;;;;;;;;;;;;;;;GAkBA,IAAIO,GACJ,MAAMC,GAAiB,CAAC,EACxB,MAAMC,GACF,WAAAp3B,CAAYq3B,EAAUC,GAClB14B,KAAKy4B,SAAWA,EAChBz4B,KAAK04B,UAAYA,CACrB,CAIA,kBAAWC,GAKP,OAJA,QAAOJ,IAAkB7B,GAAgB,uCACzC4B,GACIA,IACI,IAAIE,GAAS,CAAE,YAAaD,IAAkB,CAAE,YAAa7B,KAC9D4B,EACX,CACA,GAAA12B,CAAIg3B,GACA,MAAMC,GAAY,QAAQ74B,KAAKy4B,SAAUG,GACzC,IAAKC,EACD,MAAM,IAAIj0B,MAAM,wBAA0Bg0B,GAE9C,OAAIC,aAAqB1H,GACd0H,EAKA,IAEf,CACA,QAAAC,CAASC,GACL,OAAO,QAAS/4B,KAAK04B,UAAWK,EAAgB92B,WACpD,CACA,QAAA+2B,CAASD,EAAiBE,IACtB,QAAOF,IAAoB1I,GAAW,uEACtC,MAAMgH,EAAY,GAClB,IAAI6B,GAAkB,EACtB,MAAMC,EAAOF,EAAiB/F,YAAYjE,GAAUE,MACpD,IAOIiK,EAPAl5B,EAAOi5B,EAAKtI,UAChB,MAAO3wB,EACHg5B,EACIA,GAAmBH,EAAgB9I,YAAY/vB,EAAKgvB,MACxDmI,EAAUpwB,KAAK/G,GACfA,EAAOi5B,EAAKtI,UAIZuI,EADAF,EACW9B,GAAcC,EAAW0B,EAAgB1J,cAGzCkJ,GAEf,MAAMc,EAAYN,EAAgB92B,WAC5Bq3B,EAAcrZ,OAAOC,OAAO,CAAC,EAAGlgB,KAAK04B,WAC3CY,EAAYD,GAAaN,EACzB,MAAMQ,EAAatZ,OAAOC,OAAO,CAAC,EAAGlgB,KAAKy4B,UAE1C,OADAc,EAAWF,GAAaD,EACjB,IAAIZ,GAASe,EAAYD,EACpC,CAIA,YAAAE,CAAa7B,EAAWsB,GACpB,MAAMM,GAAa,QAAIv5B,KAAKy4B,UAAU,CAACgB,EAAiBJ,KACpD,MAAMvP,GAAQ,QAAQ9pB,KAAK04B,UAAWW,GAEtC,IADA,QAAOvP,EAAO,oCAAsCuP,GAChDI,IAAoBlB,GAAgB,CAEpC,GAAIzO,EAAMmG,YAAY0H,EAAUzI,MAAO,CAEnC,MAAMmI,EAAY,GACZ8B,EAAOF,EAAiB/F,YAAYjE,GAAUE,MACpD,IAAIjvB,EAAOi5B,EAAKtI,UAChB,MAAO3wB,EACCA,EAAK8B,OAAS21B,EAAU31B,MACxBq1B,EAAUpwB,KAAK/G,GAEnBA,EAAOi5B,EAAKtI,UAGhB,OADAwG,EAAUpwB,KAAK0wB,GACRP,GAAcC,EAAWvN,EAAMuF,aAC1C,CAGI,OAAOkJ,EAEf,CACK,CACD,MAAMmB,EAAeT,EAAiBr3B,IAAI+1B,EAAU31B,MACpD,IAAI23B,EAAcF,EAIlB,OAHIC,IACAC,EAAcA,EAAY53B,OAAO,IAAIktB,GAAU0I,EAAU31B,KAAM03B,KAE5DC,EAAY/H,OAAO+F,EAAWA,EAAUzI,KACnD,KAEJ,OAAO,IAAIsJ,GAASe,EAAYv5B,KAAK04B,UACzC,CAIA,iBAAAkB,CAAkBjC,EAAWsB,GACzB,MAAMM,GAAa,QAAIv5B,KAAKy4B,UAAWgB,IACnC,GAAIA,IAAoBlB,GAEpB,OAAOkB,EAEN,CACD,MAAMC,EAAeT,EAAiBr3B,IAAI+1B,EAAU31B,MACpD,OAAI03B,EACOD,EAAgB13B,OAAO,IAAIktB,GAAU0I,EAAU31B,KAAM03B,IAIrDD,CAEf,KAEJ,OAAO,IAAIjB,GAASe,EAAYv5B,KAAK04B,UACzC;;;;;;;;;;;;;;;;GAoBJ,IAAItH,GAMJ,MAAMyI,GAKF,WAAAz4B,CAAY04B,EAAWxF,EAAeyF,GAClC/5B,KAAK85B,UAAYA,EACjB95B,KAAKs0B,cAAgBA,EACrBt0B,KAAK+5B,UAAYA,EACjB/5B,KAAKu0B,UAAY,KAMbv0B,KAAKs0B,eACLT,GAAqB7zB,KAAKs0B,eAE1Bt0B,KAAK85B,UAAUlJ,YACf,SAAQ5wB,KAAKs0B,eAAiBt0B,KAAKs0B,cAAc1D,UAAW,uCAEpE,CACA,qBAAWQ,GACP,OAAQA,KACHA,GAAa,IAAIyI,GAAa,IAAI1I,GAAUqC,IAAkB,KAAMgF,GAASG,SACtF,CAEA,UAAA5E,GACI,OAAO,CACX,CAEA,WAAAC,GACI,OAAOh0B,KAAKs0B,eAAiBlD,EACjC,CAEA,cAAAoD,CAAeC,GACX,OAAIz0B,KAAK85B,UAAUlJ,UAER5wB,KAGA,IAAI65B,GAAa75B,KAAK85B,UAAWrF,EAAiBz0B,KAAK+5B,UAEtE,CAEA,iBAAArF,CAAkBC,GAEd,GAAkB,cAAdA,EACA,OAAO30B,KAAKg0B,cAEX,CACD,MAAM9N,EAAQlmB,KAAK85B,UAAUl4B,IAAI+yB,GACjC,OAAiB,OAAVzO,EAAiBkL,GAAalL,CACzC,CACJ,CAEA,QAAA0O,CAAShR,GACL,MAAMuR,EAAQxR,GAAaC,GAC3B,OAAc,OAAVuR,EACOn1B,KAEJA,KAAK00B,kBAAkBS,GAAOP,SAAS9Q,GAAaF,GAC/D,CAEA,QAAAiR,CAASF,GACL,OAAyC,OAAlC30B,KAAK85B,UAAUl4B,IAAI+yB,EAC9B,CAEA,oBAAAK,CAAqBL,EAAWM,GAE5B,IADA,QAAOA,EAAc,8CACH,cAAdN,EACA,OAAO30B,KAAKw0B,eAAeS,GAE1B,CACD,MAAM0C,EAAY,IAAI1I,GAAU0F,EAAWM,GAC3C,IAAI0E,EAAaK,EACb/E,EAAarE,WACb+I,EAAc35B,KAAK85B,UAAU/3B,OAAO4yB,GACpCqF,EAAch6B,KAAK+5B,UAAUH,kBAAkBjC,EAAW33B,KAAK85B,aAG/DH,EAAc35B,KAAK85B,UAAUlI,OAAO+C,EAAWM,GAC/C+E,EAAch6B,KAAK+5B,UAAUP,aAAa7B,EAAW33B,KAAK85B,YAE9D,MAAMG,EAAcN,EAAY/I,UAC1BQ,GACApxB,KAAKs0B,cACX,OAAO,IAAIuF,GAAaF,EAAaM,EAAaD,EACtD,CACJ,CAEA,WAAA9E,CAAYtR,EAAMqR,GACd,MAAME,EAAQxR,GAAaC,GAC3B,GAAc,OAAVuR,EACA,OAAOF,EAEN,EACD,QAA8B,cAAvBtR,GAAaC,IAAiD,IAAxBC,GAAcD,GAAa,8CACxE,MAAMsW,EAAoBl6B,KAAK00B,kBAAkBS,GAAOD,YAAYpR,GAAaF,GAAOqR,GACxF,OAAOj1B,KAAKg1B,qBAAqBG,EAAO+E,EAC5C,CACJ,CAEA,OAAAtJ,GACI,OAAO5wB,KAAK85B,UAAUlJ,SAC1B,CAEA,WAAAwE,GACI,OAAOp1B,KAAK85B,UAAUxI,OAC1B,CAEA,GAAAtB,CAAIsF,GACA,GAAIt1B,KAAK4wB,UACL,OAAO,KAEX,MAAM/pB,EAAM,CAAC,EACb,IAAIszB,EAAU,EAAGxI,EAAS,EAAGyI,GAAiB,EAW9C,GAVAp6B,KAAKq1B,aAAaqB,IAAgB,CAACl1B,EAAKuzB,KACpCluB,EAAIrF,GAAOuzB,EAAU/E,IAAIsF,GACzB6E,IACIC,GAAkBP,GAAahwB,gBAAgBX,KAAK1H,GACpDmwB,EAAS5rB,KAAK+f,IAAI6L,EAAQvsB,OAAO5D,IAGjC44B,GAAiB,CACrB,KAEC9E,GAAgB8E,GAAkBzI,EAAS,EAAIwI,EAAS,CAEzD,MAAME,EAAQ,GAEd,IAAK,MAAM74B,KAAOqF,EACdwzB,EAAM74B,GAAOqF,EAAIrF,GAErB,OAAO64B,CACX,CAKI,OAHI/E,IAAiBt1B,KAAKg0B,cAAcpD,YACpC/pB,EAAI,aAAe7G,KAAKg0B,cAAchE,OAEnCnpB,CAEf,CAEA,IAAAsa,GACI,GAAuB,OAAnBnhB,KAAKu0B,UAAoB,CACzB,IAAIiB,EAAS,GACRx1B,KAAKg0B,cAAcpD,YACpB4E,GACI,YACI7B,GAAiB3zB,KAAKg0B,cAAchE,OACpC,KAEZhwB,KAAKq1B,aAAaqB,IAAgB,CAACl1B,EAAKuzB,KACpC,MAAMuF,EAAYvF,EAAU5T,OACV,KAAdmZ,IACA9E,GAAU,IAAMh0B,EAAM,IAAM84B,EAChC,IAEJt6B,KAAKu0B,UAAuB,KAAXiB,EAAgB,GAAKzyB,EAAKyyB,EAC/C,CACA,OAAOx1B,KAAKu0B,SAChB,CAEA,uBAAAO,CAAwBH,EAAWI,EAAWjL,GAC1C,MAAMyQ,EAAMv6B,KAAKw6B,cAAc1Q,GAC/B,GAAIyQ,EAAK,CACL,MAAME,EAAcF,EAAIvH,kBAAkB,IAAI/D,GAAU0F,EAAWI,IACnE,OAAO0F,EAAcA,EAAYz4B,KAAO,IAC5C,CAEI,OAAOhC,KAAK85B,UAAU9G,kBAAkB2B,EAEhD,CACA,iBAAA+F,CAAkB3B,GACd,MAAMwB,EAAMv6B,KAAKw6B,cAAczB,GAC/B,GAAIwB,EAAK,CACL,MAAM7I,EAAS6I,EAAI7I,SACnB,OAAOA,GAAUA,EAAO1vB,IAC5B,CAEI,OAAOhC,KAAK85B,UAAUpI,QAE9B,CACA,aAAAiJ,CAAc5B,GACV,MAAMrH,EAAS1xB,KAAK06B,kBAAkB3B,GACtC,OAAIrH,EACO,IAAIzC,GAAUyC,EAAQ1xB,KAAK85B,UAAUl4B,IAAI8vB,IAGzC,IAEf,CAIA,gBAAAkJ,CAAiB7B,GACb,MAAMwB,EAAMv6B,KAAKw6B,cAAczB,GAC/B,GAAIwB,EAAK,CACL,MAAM5I,EAAS4I,EAAI5I,SACnB,OAAOA,GAAUA,EAAO3vB,IAC5B,CAEI,OAAOhC,KAAK85B,UAAUnI,QAE9B,CACA,YAAAkJ,CAAa9B,GACT,MAAMpH,EAAS3xB,KAAK46B,iBAAiB7B,GACrC,OAAIpH,EACO,IAAI1C,GAAU0C,EAAQ3xB,KAAK85B,UAAUl4B,IAAI+vB,IAGzC,IAEf,CACA,YAAA0D,CAAavL,EAAOX,GAChB,MAAMoR,EAAMv6B,KAAKw6B,cAAc1Q,GAC/B,OAAIyQ,EACOA,EAAIhJ,kBAAiBuJ,GACjB3R,EAAO2R,EAAY94B,KAAM84B,EAAY5L,QAIzClvB,KAAK85B,UAAUvI,iBAAiBpI,EAE/C,CACA,WAAA+J,CAAY6F,GACR,OAAO/4B,KAAKozB,gBAAgB2F,EAAgBnJ,UAAWmJ,EAC3D,CACA,eAAA3F,CAAgB2H,EAAWhC,GACvB,MAAMwB,EAAMv6B,KAAKw6B,cAAczB,GAC/B,GAAIwB,EACA,OAAOA,EAAInH,gBAAgB2H,GAAWv5B,GAAOA,IAE5C,CACD,MAAMzB,EAAWC,KAAK85B,UAAU1G,gBAAgB2H,EAAU/4B,KAAMitB,GAAUE,MAC1E,IAAIjvB,EAAOH,EAASgxB,OACpB,MAAe,MAAR7wB,GAAgB64B,EAAgBzJ,QAAQpvB,EAAM66B,GAAa,EAC9Dh7B,EAAS8wB,UACT3wB,EAAOH,EAASgxB,OAEpB,OAAOhxB,CACX,CACJ,CACA,kBAAAuzB,CAAmByF,GACf,OAAO/4B,KAAKqzB,uBAAuB0F,EAAgB7I,UAAW6I,EAClE,CACA,sBAAA1F,CAAuB2H,EAASjC,GAC5B,MAAMwB,EAAMv6B,KAAKw6B,cAAczB,GAC/B,GAAIwB,EACA,OAAOA,EAAIlH,uBAAuB2H,GAASx5B,GAChCA,IAGV,CACD,MAAMzB,EAAWC,KAAK85B,UAAUzG,uBAAuB2H,EAAQh5B,KAAMitB,GAAUE,MAC/E,IAAIjvB,EAAOH,EAASgxB,OACpB,MAAe,MAAR7wB,GAAgB64B,EAAgBzJ,QAAQpvB,EAAM86B,GAAW,EAC5Dj7B,EAAS8wB,UACT3wB,EAAOH,EAASgxB,OAEpB,OAAOhxB,CACX,CACJ,CACA,SAAA01B,CAAUlQ,GACN,OAAIvlB,KAAK4wB,UACDrL,EAAMqL,UACC,GAGC,EAGPrL,EAAMwO,cAAgBxO,EAAMqL,UAC1B,EAEFrL,IAAU0V,IACP,EAID,CAEf,CACA,SAAAhF,CAAU8C,GACN,GAAIA,IAAoB1I,IACpBrwB,KAAK+5B,UAAUjB,SAASC,GACxB,OAAO/4B,KAEN,CACD,MAAMg6B,EAAch6B,KAAK+5B,UAAUf,SAASD,EAAiB/4B,KAAK85B,WAClE,OAAO,IAAID,GAAa75B,KAAK85B,UAAW95B,KAAKs0B,cAAe0F,EAChE,CACJ,CACA,SAAA9D,CAAUpM,GACN,OAAOA,IAAUuG,IAAarwB,KAAK+5B,UAAUjB,SAAShP,EAC1D,CACA,MAAAqM,CAAO5Q,GACH,GAAIA,IAAUvlB,KACV,OAAO,EAEN,GAAIulB,EAAMwO,aACX,OAAO,EAEN,CACD,MAAMmH,EAAoB3V,EAC1B,GAAKvlB,KAAKg0B,cAAcmC,OAAO+E,EAAkBlH,eAG5C,IAAIh0B,KAAK85B,UAAUxI,UAAY4J,EAAkBpB,UAAUxI,QAAS,CACrE,MAAM6J,EAAWn7B,KAAKkzB,YAAYwD,IAC5B0E,EAAYF,EAAkBhI,YAAYwD,IAChD,IAAI2E,EAAcF,EAAStK,UACvByK,EAAeF,EAAUvK,UAC7B,MAAOwK,GAAeC,EAAc,CAChC,GAAID,EAAYr5B,OAASs5B,EAAat5B,OACjCq5B,EAAYnM,KAAKiH,OAAOmF,EAAapM,MACtC,OAAO,EAEXmM,EAAcF,EAAStK,UACvByK,EAAeF,EAAUvK,SAC7B,CACA,OAAuB,OAAhBwK,GAAyC,OAAjBC,CACnC,CAEI,OAAO,CACX,CAnBI,OAAO,CAoBf,CACJ,CAMA,aAAAd,CAAczB,GACV,OAAIA,IAAoB1I,GACb,KAGArwB,KAAK+5B,UAAUn4B,IAAIm3B,EAAgB92B,WAElD,EAEJ43B,GAAahwB,gBAAkB,iBAC/B,MAAM0xB,WAAgB1B,GAClB,WAAAz4B,GACIyhB,MAAM,IAAIsO,GAAUqC,IAAkBqG,GAAazI,WAAYoH,GAASG,QAC5E,CACA,SAAAlD,CAAUlQ,GACN,OAAIA,IAAUvlB,KACH,EAGA,CAEf,CACA,MAAAm2B,CAAO5Q,GAEH,OAAOA,IAAUvlB,IACrB,CACA,WAAAg0B,GACI,OAAOh0B,IACX,CACA,iBAAA00B,CAAkBC,GACd,OAAOkF,GAAazI,UACxB,CACA,OAAAR,GACI,OAAO,CACX,EAKJ,MAAMqK,GAAW,IAAIM,GACrBtb,OAAOub,iBAAiBvM,GAAW,CAC/BY,IAAK,CACDxvB,MAAO,IAAI4uB,GAAU9oB,EAAU0zB,GAAazI,aAEhDqK,IAAK,CACDp7B,MAAO,IAAI4uB,GAAU7oB,EAAU60B,OAMvClL,GAASD,aAAe+J,GAAazI,WACrCgD,GAASH,0BAA4B4F,GACrCnG,GAAauH,IACb5E,GAAW4E;;;;;;;;;;;;;;;;;AAkBX,MAAMS,IAAY,EAOlB,SAASC,GAAaC,EAAMhI,EAAW,MACnC,GAAa,OAATgI,EACA,OAAO/B,GAAazI,WAaxB,GAXoB,kBAATwK,GAAqB,cAAeA,IAC3ChI,EAAWgI,EAAK,eAEpB,QAAoB,OAAbhI,GACiB,kBAAbA,GACa,kBAAbA,GACc,kBAAbA,GAAyB,QAASA,EAAW,uCAAyCA,GAC9E,kBAATgI,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACrDA,EAAOA,EAAK,WAGI,kBAATA,GAAqB,QAASA,EAAM,CAC3C,MAAMC,EAAWD,EACjB,OAAO,IAAIxH,GAASyH,EAAUF,GAAa/H,GAC/C,CACA,GAAMgI,aAAgBh4B,QAAU83B,GA2B3B,CACD,IAAIxM,EAAO2K,GAAazI,WAYxB,OAXA3pB,EAAKm0B,GAAM,CAACp6B,EAAKs6B,KACb,IAAI,QAASF,EAAMp6B,IACa,MAAxBA,EAAIgG,UAAU,EAAG,GAAY,CAE7B,MAAMutB,EAAY4G,GAAaG,IAC3B/G,EAAUhB,cAAiBgB,EAAUnE,YACrC1B,EAAOA,EAAK8F,qBAAqBxzB,EAAKuzB,GAE9C,CACJ,IAEG7F,EAAKsF,eAAemH,GAAa/H,GAC5C,CAzC2C,CACvC,MAAMmI,EAAW,GACjB,IAAIC,GAAuB,EAC3B,MAAMC,EAAeL,EAYrB,GAXAn0B,EAAKw0B,GAAc,CAACz6B,EAAK0kB,KACrB,GAA4B,MAAxB1kB,EAAIgG,UAAU,EAAG,GAAY,CAE7B,MAAMutB,EAAY4G,GAAazV,GAC1B6O,EAAUnE,YACXoL,EACIA,IAAyBjH,EAAUf,cAAcpD,UACrDmL,EAAS90B,KAAK,IAAIgoB,GAAUztB,EAAKuzB,IAEzC,KAEoB,IAApBgH,EAASr4B,OACT,OAAOm2B,GAAazI,WAExB,MAAM8K,EAAW9E,GAAc2E,EAAUxI,IAAsBoE,GAAaA,EAAU31B,MAAMwxB,IAC5F,GAAIwI,EAAsB,CACtB,MAAMG,EAAiB/E,GAAc2E,EAAUrF,GAAerH,cAC9D,OAAO,IAAIwK,GAAaqC,EAAUP,GAAa/H,GAAW,IAAI4E,GAAS,CAAE,YAAa2D,GAAkB,CAAE,YAAazF,KAC3H,CAEI,OAAO,IAAImD,GAAaqC,EAAUP,GAAa/H,GAAW4E,GAASG,QAE3E,CAgBJ,CACAvC,GAAgBuF;;;;;;;;;;;;;;;;;AAkBhB,MAAMS,WAAkBhN,GACpB,WAAAhuB,CAAYi7B,GACRxZ,QACA7iB,KAAKq8B,WAAaA,GAClB,SAAQ3X,GAAY2X,IAA4C,cAA7B1Y,GAAa0Y,GAA6B,0DACjF,CACA,YAAAC,CAAaC,GACT,OAAOA,EAAK3H,SAAS50B,KAAKq8B,WAC9B,CACA,WAAApM,CAAYf,GACR,OAAQA,EAAK0F,SAAS50B,KAAKq8B,YAAYzL,SAC3C,CACA,OAAAtB,CAAQhpB,EAAGC,GACP,MAAMi2B,EAASx8B,KAAKs8B,aAAah2B,EAAE4oB,MAC7BuN,EAASz8B,KAAKs8B,aAAa/1B,EAAE2oB,MAC7BuH,EAAW+F,EAAO/G,UAAUgH,GAClC,OAAiB,IAAbhG,EACOpwB,EAAYC,EAAEtE,KAAMuE,EAAEvE,MAGtBy0B,CAEf,CACA,QAAAtG,CAASC,EAAYpuB,GACjB,MAAM06B,EAAYf,GAAavL,GACzBlB,EAAO2K,GAAazI,WAAW8D,YAAYl1B,KAAKq8B,WAAYK,GAClE,OAAO,IAAIzN,GAAUjtB,EAAMktB,EAC/B,CACA,OAAAgB,GACI,MAAMhB,EAAO2K,GAAazI,WAAW8D,YAAYl1B,KAAKq8B,WAAYpB,IAClE,OAAO,IAAIhM,GAAU7oB,EAAU8oB,EACnC,CACA,QAAAjtB,GACI,OAAOiiB,GAAUlkB,KAAKq8B,WAAY,GAAG1zB,KAAK,IAC9C;;;;;;;;;;;;;;;;GAmBJ,MAAMg0B,WAAmBvN,GACrB,OAAAE,CAAQhpB,EAAGC,GACP,MAAMkwB,EAAWnwB,EAAE4oB,KAAKuG,UAAUlvB,EAAE2oB,MACpC,OAAiB,IAAbuH,EACOpwB,EAAYC,EAAEtE,KAAMuE,EAAEvE,MAGtBy0B,CAEf,CACA,WAAAxG,CAAYf,GACR,OAAO,CACX,CACA,mBAAAK,CAAoBC,EAASC,GACzB,OAAQD,EAAQ2G,OAAO1G,EAC3B,CACA,OAAAG,GAEI,OAAOX,GAAUY,GACrB,CACA,OAAAK,GAEI,OAAOjB,GAAUwM,GACrB,CACA,QAAAtL,CAASC,EAAYpuB,GACjB,MAAM06B,EAAYf,GAAavL,GAC/B,OAAO,IAAInB,GAAUjtB,EAAM06B,EAC/B,CAIA,QAAAz6B,GACI,MAAO,QACX,EAEJ,MAAM26B,GAAc,IAAID;;;;;;;;;;;;;;;;GAkBxB,SAASE,GAAYC,GACjB,MAAO,CAAEruB,KAAM,QAAgCquB,eACnD,CACA,SAASC,GAAiBpI,EAAWmI,GACjC,MAAO,CAAEruB,KAAM,cAA4CquB,eAAcnI,YAC7E,CACA,SAASqI,GAAmBrI,EAAWmI,GACnC,MAAO,CAAEruB,KAAM,gBAAgDquB,eAAcnI,YACjF,CACA,SAASsI,GAAmBtI,EAAWmI,EAAcI,GACjD,MAAO,CACHzuB,KAAM,gBACNquB,eACAnI,YACAuI,UAER,CACA,SAASC,GAAiBxI,EAAWmI,GACjC,MAAO,CAAEruB,KAAM,cAA4CquB,eAAcnI,YAC7E;;;;;;;;;;;;;;;;GAqBA,MAAMyI,GACF,WAAAh8B,CAAYi8B,GACRr9B,KAAKq9B,OAASA,CAClB,CACA,WAAAnI,CAAYqH,EAAM/6B,EAAK87B,EAAUC,EAAcC,EAAQC,IACnD,QAAOlB,EAAKrG,UAAUl2B,KAAKq9B,QAAS,qDACpC,MAAMK,EAAWnB,EAAK7H,kBAAkBlzB,GAExC,OAAIk8B,EAAS9I,SAAS2I,GAAcpH,OAAOmH,EAAS1I,SAAS2I,KAIrDG,EAAS9M,YAAc0M,EAAS1M,UAIzB2L,GAGa,MAAxBkB,IACIH,EAAS1M,UACL2L,EAAK1H,SAASrzB,GACdi8B,EAAqBE,iBAAiBX,GAAmBx7B,EAAKk8B,KAG9D,QAAOnB,EAAKxI,aAAc,uEAGzB2J,EAAS9M,UACd6M,EAAqBE,iBAAiBZ,GAAiBv7B,EAAK87B,IAG5DG,EAAqBE,iBAAiBV,GAAmBz7B,EAAK87B,EAAUI,KAG5EnB,EAAKxI,cAAgBuJ,EAAS1M,UACvB2L,EAIAA,EAAKvH,qBAAqBxzB,EAAK87B,GAAUrH,UAAUj2B,KAAKq9B,QAEvE,CACA,cAAAO,CAAeV,EAASW,EAASJ,GAuB7B,OAtB4B,MAAxBA,IACKP,EAAQnJ,cACTmJ,EAAQ7H,aAAaqB,IAAgB,CAACl1B,EAAKuzB,KAClC8I,EAAQhJ,SAASrzB,IAClBi8B,EAAqBE,iBAAiBX,GAAmBx7B,EAAKuzB,GAClE,IAGH8I,EAAQ9J,cACT8J,EAAQxI,aAAaqB,IAAgB,CAACl1B,EAAKuzB,KACvC,GAAImI,EAAQrI,SAASrzB,GAAM,CACvB,MAAMk8B,EAAWR,EAAQxI,kBAAkBlzB,GACtCk8B,EAASvH,OAAOpB,IACjB0I,EAAqBE,iBAAiBV,GAAmBz7B,EAAKuzB,EAAW2I,GAEjF,MAEID,EAAqBE,iBAAiBZ,GAAiBv7B,EAAKuzB,GAChE,KAIL8I,EAAQ5H,UAAUj2B,KAAKq9B,OAClC,CACA,cAAA7I,CAAe0I,EAASjD,GACpB,OAAIiD,EAAQtM,UACDiJ,GAAazI,WAGb8L,EAAQ1I,eAAeyF,EAEtC,CACA,YAAA6D,GACI,OAAO,CACX,CACA,gBAAAC,GACI,OAAO/9B,IACX,CACA,QAAAorB,GACI,OAAOprB,KAAKq9B,MAChB;;;;;;;;;;;;;;;;GAsBJ,MAAMW,GACF,WAAA58B,CAAYsN,GACR1O,KAAKi+B,eAAiB,IAAIb,GAAc1uB,EAAO0c,YAC/CprB,KAAKq9B,OAAS3uB,EAAO0c,WACrBprB,KAAKk+B,WAAaF,GAAaG,cAAczvB,GAC7C1O,KAAKo+B,SAAWJ,GAAaK,YAAY3vB,GACzC1O,KAAKs+B,mBAAqB5vB,EAAO6vB,eACjCv+B,KAAKw+B,iBAAmB9vB,EAAO+vB,aACnC,CACA,YAAAC,GACI,OAAO1+B,KAAKk+B,UAChB,CACA,UAAAS,GACI,OAAO3+B,KAAKo+B,QAChB,CACA,OAAAQ,CAAQ1P,GACJ,MAAM2P,EAAgB7+B,KAAKs+B,kBACrBt+B,KAAKq9B,OAAO/N,QAAQtvB,KAAK0+B,eAAgBxP,IAAS,EAClDlvB,KAAKq9B,OAAO/N,QAAQtvB,KAAK0+B,eAAgBxP,GAAQ,EACjD4P,EAAc9+B,KAAKw+B,gBACnBx+B,KAAKq9B,OAAO/N,QAAQJ,EAAMlvB,KAAK2+B,eAAiB,EAChD3+B,KAAKq9B,OAAO/N,QAAQJ,EAAMlvB,KAAK2+B,cAAgB,EACrD,OAAOE,GAAiBC,CAC5B,CACA,WAAA5J,CAAYqH,EAAM/6B,EAAK87B,EAAUC,EAAcC,EAAQC,GAInD,OAHKz9B,KAAK4+B,QAAQ,IAAI3P,GAAUztB,EAAK87B,MACjCA,EAAWzD,GAAazI,YAErBpxB,KAAKi+B,eAAe/I,YAAYqH,EAAM/6B,EAAK87B,EAAUC,EAAcC,EAAQC,EACtF,CACA,cAAAG,CAAeV,EAASW,EAASJ,GACzBI,EAAQ9J,eAER8J,EAAUhE,GAAazI,YAE3B,IAAI2N,EAAWlB,EAAQ5H,UAAUj2B,KAAKq9B,QAEtC0B,EAAWA,EAASvK,eAAeqF,GAAazI,YAChD,MAAM4N,EAAOh/B,KAMb,OALA69B,EAAQxI,aAAaqB,IAAgB,CAACl1B,EAAKuzB,KAClCiK,EAAKJ,QAAQ,IAAI3P,GAAUztB,EAAKuzB,MACjCgK,EAAWA,EAAS/J,qBAAqBxzB,EAAKq4B,GAAazI,YAC/D,IAEGpxB,KAAKi+B,eAAeL,eAAeV,EAAS6B,EAAUtB,EACjE,CACA,cAAAjJ,CAAe0I,EAASjD,GAEpB,OAAOiD,CACX,CACA,YAAAY,GACI,OAAO,CACX,CACA,gBAAAC,GACI,OAAO/9B,KAAKi+B,cAChB,CACA,QAAA7S,GACI,OAAOprB,KAAKq9B,MAChB,CACA,oBAAOc,CAAczvB,GACjB,GAAIA,EAAOuwB,WAAY,CACnB,MAAMC,EAAYxwB,EAAOywB,oBACzB,OAAOzwB,EAAO0c,WAAW+E,SAASzhB,EAAO0wB,qBAAsBF,EACnE,CAEI,OAAOxwB,EAAO0c,WAAWwE,SAEjC,CACA,kBAAOyO,CAAY3vB,GACf,GAAIA,EAAO2wB,SAAU,CACjB,MAAMC,EAAU5wB,EAAO6wB,kBACvB,OAAO7wB,EAAO0c,WAAW+E,SAASzhB,EAAO8wB,mBAAoBF,EACjE,CAEI,OAAO5wB,EAAO0c,WAAW8E,SAEjC;;;;;;;;;;;;;;;;GAsBJ,MAAMuP,GACF,WAAAr+B,CAAYsN,GACR1O,KAAK0/B,uBAA0BxQ,GAASlvB,KAAK2/B,SAAW3/B,KAAK4/B,cAAc1Q,GAAQlvB,KAAK6/B,gBAAgB3Q,GACxGlvB,KAAK8/B,qBAAwB5Q,GAASlvB,KAAK2/B,SAAW3/B,KAAK6/B,gBAAgB3Q,GAAQlvB,KAAK4/B,cAAc1Q,GACtGlvB,KAAK6/B,gBAAmB3Q,IACpB,MAAM6Q,EAAa//B,KAAKq9B,OAAO/N,QAAQtvB,KAAKggC,cAActB,eAAgBxP,GAC1E,OAAOlvB,KAAKs+B,kBAAoByB,GAAc,EAAIA,EAAa,CAAC,EAEpE//B,KAAK4/B,cAAiB1Q,IAClB,MAAM6Q,EAAa//B,KAAKq9B,OAAO/N,QAAQJ,EAAMlvB,KAAKggC,cAAcrB,cAChE,OAAO3+B,KAAKw+B,gBAAkBuB,GAAc,EAAIA,EAAa,CAAC,EAElE//B,KAAKggC,cAAgB,IAAIhC,GAAatvB,GACtC1O,KAAKq9B,OAAS3uB,EAAO0c,WACrBprB,KAAKigC,OAASvxB,EAAOwxB,WACrBlgC,KAAK2/B,UAAYjxB,EAAOyxB,iBACxBngC,KAAKs+B,mBAAqB5vB,EAAO6vB,eACjCv+B,KAAKw+B,iBAAmB9vB,EAAO+vB,aACnC,CACA,WAAAvJ,CAAYqH,EAAM/6B,EAAK87B,EAAUC,EAAcC,EAAQC,GAInD,OAHKz9B,KAAKggC,cAAcpB,QAAQ,IAAI3P,GAAUztB,EAAK87B,MAC/CA,EAAWzD,GAAazI,YAExBmL,EAAK7H,kBAAkBlzB,GAAK20B,OAAOmH,GAE5Bf,EAEFA,EAAKnH,cAAgBp1B,KAAKigC,OACxBjgC,KAAKggC,cACPjC,mBACA7I,YAAYqH,EAAM/6B,EAAK87B,EAAUC,EAAcC,EAAQC,GAGrDz9B,KAAKogC,sBAAsB7D,EAAM/6B,EAAK87B,EAAUE,EAAQC,EAEvE,CACA,cAAAG,CAAeV,EAASW,EAASJ,GAC7B,IAAIsB,EACJ,GAAIlB,EAAQ9J,cAAgB8J,EAAQjN,UAEhCmO,EAAWlF,GAAazI,WAAW6E,UAAUj2B,KAAKq9B,aAGlD,GAAkB,EAAdr9B,KAAKigC,OAAapC,EAAQzI,eAC1ByI,EAAQ3H,UAAUl2B,KAAKq9B,QAAS,CAIhC,IAAIt9B,EAFJg/B,EAAWlF,GAAazI,WAAW6E,UAAUj2B,KAAKq9B,QAI9Ct9B,EADAC,KAAK2/B,SACM9B,EAAQxK,uBAAuBrzB,KAAKggC,cAAcrB,aAAc3+B,KAAKq9B,QAGrEQ,EAAQzK,gBAAgBpzB,KAAKggC,cAActB,eAAgB1+B,KAAKq9B,QAE/E,IAAI/L,EAAQ,EACZ,MAAOvxB,EAAS+wB,WAAaQ,EAAQtxB,KAAKigC,OAAQ,CAC9C,MAAM//B,EAAOH,EAAS8wB,UACtB,GAAK7wB,KAAK0/B,uBAAuBx/B,GAAjC,CAIK,IAAKF,KAAK8/B,qBAAqB5/B,GAEhC,MAGA6+B,EAAWA,EAAS/J,qBAAqB90B,EAAK8B,KAAM9B,EAAKgvB,MACzDoC,GACJ,CACJ,CACJ,KACK,CAKD,IAAIvxB,EAHJg/B,EAAWlB,EAAQ5H,UAAUj2B,KAAKq9B,QAElC0B,EAAWA,EAASvK,eAAeqF,GAAazI,YAG5CrxB,EADAC,KAAK2/B,SACMZ,EAASzL,mBAAmBtzB,KAAKq9B,QAGjC0B,EAAS7L,YAAYlzB,KAAKq9B,QAEzC,IAAI/L,EAAQ,EACZ,MAAOvxB,EAAS+wB,UAAW,CACvB,MAAM5wB,EAAOH,EAAS8wB,UAChBwP,EAAU/O,EAAQtxB,KAAKigC,QACzBjgC,KAAK0/B,uBAAuBx/B,IAC5BF,KAAK8/B,qBAAqB5/B,GAC1BmgC,EACA/O,IAGAyN,EAAWA,EAAS/J,qBAAqB90B,EAAK8B,KAAM63B,GAAazI,WAEzE,CACJ,CAEJ,OAAOpxB,KAAKggC,cACPjC,mBACAH,eAAeV,EAAS6B,EAAUtB,EAC3C,CACA,cAAAjJ,CAAe0I,EAASjD,GAEpB,OAAOiD,CACX,CACA,YAAAY,GACI,OAAO,CACX,CACA,gBAAAC,GACI,OAAO/9B,KAAKggC,cAAcjC,kBAC9B,CACA,QAAA3S,GACI,OAAOprB,KAAKq9B,MAChB,CACA,qBAAA+C,CAAsB7D,EAAM+D,EAAUC,EAAW/C,EAAQgD,GAErD,IAAInb,EACJ,GAAIrlB,KAAK2/B,SAAU,CACf,MAAMlJ,EAAWz2B,KAAKq9B,OAAOhO,aAC7BhK,EAAM,CAAC/e,EAAGC,IAAMkwB,EAASlwB,EAAGD,EAChC,MAEI+e,EAAMrlB,KAAKq9B,OAAOhO,aAEtB,MAAMoR,EAAgBlE,GACtB,QAAOkE,EAAcrL,gBAAkBp1B,KAAKigC,OAAQ,IACpD,MAAMS,EAAoB,IAAIzR,GAAUqR,EAAUC,GAC5CI,EAAiB3gC,KAAK2/B,SACtBc,EAAc9F,cAAc36B,KAAKq9B,QACjCoD,EAAc5F,aAAa76B,KAAKq9B,QAChCgD,EAAUrgC,KAAKggC,cAAcpB,QAAQ8B,GAC3C,GAAID,EAAc5L,SAASyL,GAAW,CAClC,MAAMM,EAAeH,EAAc/L,kBAAkB4L,GACrD,IAAIO,EAAYrD,EAAOsD,mBAAmB9gC,KAAKq9B,OAAQsD,EAAgB3gC,KAAK2/B,UAC5E,MAAoB,MAAbkB,IACFA,EAAU7+B,OAASs+B,GAAYG,EAAc5L,SAASgM,EAAU7+B,OAIjE6+B,EAAYrD,EAAOsD,mBAAmB9gC,KAAKq9B,OAAQwD,EAAW7gC,KAAK2/B,UAEvE,MAAMoB,EAA2B,MAAbF,EAAoB,EAAIxb,EAAIwb,EAAWH,GACrDM,EAAkBX,IAAYE,EAAU3P,WAAamQ,GAAe,EAC1E,GAAIC,EAIA,OAHyB,MAArBR,GACAA,EAAkB7C,iBAAiBV,GAAmBqD,EAAUC,EAAWK,IAExEH,EAAczL,qBAAqBsL,EAAUC,GAEnD,CACwB,MAArBC,GACAA,EAAkB7C,iBAAiBX,GAAmBsD,EAAUM,IAEpE,MAAMK,EAAgBR,EAAczL,qBAAqBsL,EAAUzG,GAAazI,YAC1E8P,EAAgC,MAAbL,GAAqB7gC,KAAKggC,cAAcpB,QAAQiC,GACzE,OAAIK,GACyB,MAArBV,GACAA,EAAkB7C,iBAAiBZ,GAAiB8D,EAAU7+B,KAAM6+B,EAAU3R,OAE3E+R,EAAcjM,qBAAqB6L,EAAU7+B,KAAM6+B,EAAU3R,OAG7D+R,CAEf,CACJ,CACK,OAAIV,EAAU3P,UAER2L,EAEF8D,GACDhb,EAAIsb,EAAgBD,IAAsB,GACjB,MAArBF,IACAA,EAAkB7C,iBAAiBX,GAAmB2D,EAAe3+B,KAAM2+B,EAAezR,OAC1FsR,EAAkB7C,iBAAiBZ,GAAiBuD,EAAUC,KAE3DE,EACFzL,qBAAqBsL,EAAUC,GAC/BvL,qBAAqB2L,EAAe3+B,KAAM63B,GAAazI,aAOzDmL,CAEf;;;;;;;;;;;;;;;;GA0BJ,MAAM4E,GACF,WAAA//B,GACIpB,KAAKohC,WAAY,EACjBphC,KAAKqhC,WAAY,EACjBrhC,KAAKshC,eAAgB,EACrBthC,KAAKu+B,gBAAiB,EACtBv+B,KAAKuhC,SAAU,EACfvhC,KAAKwhC,aAAc,EACnBxhC,KAAKy+B,eAAgB,EACrBz+B,KAAKigC,OAAS,EACdjgC,KAAKyhC,UAAY,GACjBzhC,KAAK0hC,iBAAmB,KACxB1hC,KAAK2hC,gBAAkB,GACvB3hC,KAAK4hC,eAAiB,KACtB5hC,KAAK6hC,cAAgB,GACrB7hC,KAAKq9B,OAAS3G,EAClB,CACA,QAAAuI,GACI,OAAOj/B,KAAKqhC,SAChB,CAIA,cAAAlB,GACI,MAAuB,KAAnBngC,KAAKyhC,UAKEzhC,KAAKqhC,UAGc,MAAnBrhC,KAAKyhC,SAEpB,CAIA,kBAAArC,GAEI,OADA,QAAOp/B,KAAKqhC,UAAW,oCAChBrhC,KAAK0hC,gBAChB,CAKA,iBAAAvC,GAEI,OADA,QAAOn/B,KAAKqhC,UAAW,oCACnBrhC,KAAKshC,cACEthC,KAAK2hC,gBAGLx7B,CAEf,CACA,MAAAk5B,GACI,OAAOr/B,KAAKuhC,OAChB,CAIA,gBAAA/B,GAEI,OADA,QAAOx/B,KAAKuhC,QAAS,kCACdvhC,KAAK4hC,cAChB,CAKA,eAAArC,GAEI,OADA,QAAOv/B,KAAKuhC,QAAS,kCACjBvhC,KAAKwhC,YACExhC,KAAK6hC,cAGLz7B,CAEf,CACA,QAAA07B,GACI,OAAO9hC,KAAKohC,SAChB,CAIA,gBAAAW,GACI,OAAO/hC,KAAKohC,WAAgC,KAAnBphC,KAAKyhC,SAClC,CAIA,QAAAvB,GAEI,OADA,QAAOlgC,KAAKohC,UAAW,oCAChBphC,KAAKigC,MAChB,CACA,QAAA7U,GACI,OAAOprB,KAAKq9B,MAChB,CACA,YAAA5S,GACI,QAASzqB,KAAKqhC,WAAarhC,KAAKuhC,SAAWvhC,KAAKohC,UACpD,CACA,SAAA5W,GACI,OAAOxqB,KAAKyqB,gBAAkBzqB,KAAKq9B,SAAW3G,EAClD,CACA,IAAArF,GACI,MAAMA,EAAO,IAAI8P,GAejB,OAdA9P,EAAK+P,UAAYphC,KAAKohC,UACtB/P,EAAK4O,OAASjgC,KAAKigC,OACnB5O,EAAKgQ,UAAYrhC,KAAKqhC,UACtBhQ,EAAKkN,eAAiBv+B,KAAKu+B,eAC3BlN,EAAKqQ,iBAAmB1hC,KAAK0hC,iBAC7BrQ,EAAKiQ,cAAgBthC,KAAKshC,cAC1BjQ,EAAKsQ,gBAAkB3hC,KAAK2hC,gBAC5BtQ,EAAKkQ,QAAUvhC,KAAKuhC,QACpBlQ,EAAKoN,cAAgBz+B,KAAKy+B,cAC1BpN,EAAKuQ,eAAiB5hC,KAAK4hC,eAC3BvQ,EAAKmQ,YAAcxhC,KAAKwhC,YACxBnQ,EAAKwQ,cAAgB7hC,KAAK6hC,cAC1BxQ,EAAKgM,OAASr9B,KAAKq9B,OACnBhM,EAAKoQ,UAAYzhC,KAAKyhC,UACfpQ,CACX,EAEJ,SAAS2Q,GAAyBC,GAC9B,OAAIA,EAAYxX,eACL,IAAI2S,GAAc6E,EAAY7W,YAEhC6W,EAAYH,WACV,IAAIrC,GAAcwC,GAGlB,IAAIjE,GAAaiE,EAEhC,CAiFA,SAASC,GAAuCD,GAC5C,MAAME,EAAK,CAAC,EACZ,GAAIF,EAAYzX,YACZ,OAAO2X,EAEX,IAAIC,EAeJ,GAdIH,EAAY5E,SAAW3G,GACvB0L,EAAU,YAELH,EAAY5E,SAAWT,GAC5BwF,EAAU,SAELH,EAAY5E,SAAWhN,GAC5B+R,EAAU,SAGV,QAAOH,EAAY5E,kBAAkBjB,GAAW,4BAChDgG,EAAUH,EAAY5E,OAAOp7B,YAEjCkgC,EAAG,YAAiD,QAAUC,GAC1DH,EAAYZ,UAAW,CACvB,MAAMgB,EAAaJ,EAAY1D,eACzB,aACA,UACN4D,EAAGE,IAAc,QAAUJ,EAAYP,kBACnCO,EAAYX,gBACZa,EAAGE,IAAe,KAAM,QAAUJ,EAAYN,iBAEtD,CACA,GAAIM,EAAYV,QAAS,CACrB,MAAMe,EAAWL,EAAYxD,cACvB,YACA,QACN0D,EAAGG,IAAY,QAAUL,EAAYL,gBACjCK,EAAYT,cACZW,EAAGG,IAAa,KAAM,QAAUL,EAAYJ,eAEpD,CASA,OARII,EAAYb,YACRa,EAAY9B,iBACZgC,EAAG,gBAA4DF,EAAYhC,OAG3EkC,EAAG,eAA0DF,EAAYhC,QAG1EkC,CACX,CACA,SAASI,GAA0BN,GAC/B,MAAMp7B,EAAM,CAAC,EAmBb,GAlBIo7B,EAAYZ,YACZx6B,EAAI,MACAo7B,EAAYP,iBACZO,EAAYX,gBACZz6B,EAAI,MACAo7B,EAAYN,iBAEpB96B,EAAI,QACCo7B,EAAY1D,gBAEjB0D,EAAYV,UACZ16B,EAAI,MAAsDo7B,EAAYL,eAClEK,EAAYT,cACZ36B,EAAI,MAAqDo7B,EAAYJ,eAEzEh7B,EAAI,QACCo7B,EAAYxD,eAEjBwD,EAAYb,UAAW,CACvBv6B,EAAI,KAA2Co7B,EAAYhC,OAC3D,IAAIuC,EAAWP,EAAYR,UACV,KAAbe,IAEIA,EADAP,EAAY9B,iBACD,IAGA,KAGnBt5B,EAAI,MAAgD27B,CACxD,CAKA,OAHIP,EAAY5E,SAAW3G,KACvB7vB,EAAI,KAA2Co7B,EAAY5E,OAAOp7B,YAE/D4E,CACX;;;;;;;;;;;;;;;;GAuBA,MAAM47B,WAA2B1hB,GAK7B,WAAA3f,CAAY4b,EAAWoK,EAAeG,EAAoBC,GACtD3E,QACA7iB,KAAKgd,UAAYA,EACjBhd,KAAKonB,cAAgBA,EACrBpnB,KAAKunB,mBAAqBA,EAC1BvnB,KAAKwnB,uBAAyBA,EAE9BxnB,KAAK8R,KAAOtN,EAAW,WAKvBxE,KAAK0iC,SAAW,CAAC,CACrB,CACA,WAAA/gB,CAAYC,GACR,MAAM,IAAIhd,MAAM,0BACpB,CACA,mBAAO+9B,CAAal5B,EAAO0gB,GACvB,YAAYoC,IAARpC,EACO,OAASA,IAGhB,QAAO1gB,EAAM8gB,aAAaC,YAAa,kDAChC/gB,EAAME,MAAM1H,WAE3B,CAEA,MAAAgoB,CAAOxgB,EAAOygB,EAAeC,EAAKjJ,GAC9B,MAAMD,EAAaxX,EAAME,MAAM1H,WAC/BjC,KAAK8R,KAAK,qBAAuBmP,EAAa,IAAMxX,EAAM4gB,kBAE1D,MAAMuY,EAAWH,GAAmBE,aAAal5B,EAAO0gB,GAClD0Y,EAAa,CAAC,EACpB7iC,KAAK0iC,SAASE,GAAYC,EAC1B,MAAMC,EAAwBZ,GAAuCz4B,EAAM8gB,cAC3EvqB,KAAK+iC,aAAa9hB,EAAa,QAAS6hB,GAAuB,CAACp+B,EAAOzE,KACnE,IAAIkF,EAAOlF,EAQX,GAPc,MAAVyE,IACAS,EAAO,KACPT,EAAQ,MAEE,OAAVA,GACA1E,KAAKonB,cAAcnG,EAAY9b,GAAmB,EAAOglB,IAEzD,QAAQnqB,KAAK0iC,SAAUE,KAAcC,EAAY,CACjD,IAAI/X,EAKAA,EAJCpmB,EAGc,MAAVA,EACI,oBAGA,cAAgBA,EANhB,KAQbwc,EAAW4J,EAAQ,KACvB,IAER,CAEA,QAAAmB,CAASxiB,EAAO0gB,GACZ,MAAMyY,EAAWH,GAAmBE,aAAal5B,EAAO0gB,UACjDnqB,KAAK0iC,SAASE,EACzB,CACA,GAAAhhC,CAAI6H,GACA,MAAMq5B,EAAwBZ,GAAuCz4B,EAAM8gB,cACrEtJ,EAAaxX,EAAME,MAAM1H,WACzBunB,EAAW,IAAI,KAiBrB,OAhBAxpB,KAAK+iC,aAAa9hB,EAAa,QAAS6hB,GAAuB,CAACp+B,EAAOzE,KACnE,IAAIkF,EAAOlF,EACG,MAAVyE,IACAS,EAAO,KACPT,EAAQ,MAEE,OAAVA,GACA1E,KAAKonB,cAAcnG,EAAY9b,GAClB,EACJ,MACTqkB,EAASle,QAAQnG,IAGjBqkB,EAASje,OAAO,IAAI3G,MAAMO,GAC9B,IAEGqkB,EAASQ,OACpB,CAEA,gBAAA3I,CAAiBC,GAEjB,CAKA,YAAAyhB,CAAa9hB,EAAY6hB,EAAwB,CAAC,EAAG/yB,GAEjD,OADA+yB,EAAsB,UAAY,SAC3Bz3B,QAAQ+iB,IAAI,CACfpuB,KAAKunB,mBAAmBpc,UAA2B,GACnDnL,KAAKwnB,uBAAuBrc,UAA2B,KACxDD,MAAK,EAAEsG,EAAWD,MACbC,GAAaA,EAAU/E,cACvBq2B,EAAsB,QAAUtxB,EAAU/E,aAE1C8E,GAAiBA,EAAc+P,QAC/BwhB,EAAsB,MAAQvxB,EAAc+P,OAEhD,MAAMhK,GAAOtX,KAAKgd,UAAUxP,OAAS,WAAa,WAC9CxN,KAAKgd,UAAUzP,KACf0T,EAFQ,OAKRjhB,KAAKgd,UAAUvP,WACf,QAAYq1B,GAChB9iC,KAAK8R,KAAK,4BAA8BwF,GACxC,MAAM0rB,EAAM,IAAIC,eAChBD,EAAI9qB,mBAAqB,KACrB,GAAInI,GAA+B,IAAnBizB,EAAIt9B,WAAkB,CAClC1F,KAAK8R,KAAK,qBAAuBwF,EAAM,qBAAsB0rB,EAAIlY,OAAQ,YAAakY,EAAIE,cAC1F,IAAIpX,EAAM,KACV,GAAIkX,EAAIlY,QAAU,KAAOkY,EAAIlY,OAAS,IAAK,CACvC,IACIgB,GAAM,QAASkX,EAAIE,aACvB,CACA,MAAOzgC,GACHoC,EAAK,qCACDyS,EACA,KACA0rB,EAAIE,aACZ,CACAnzB,EAAS,KAAM+b,EACnB,MAGuB,MAAfkX,EAAIlY,QAAiC,MAAfkY,EAAIlY,QAC1BjmB,EAAK,sCACDyS,EACA,YACA0rB,EAAIlY,QAEZ/a,EAASizB,EAAIlY,QAEjB/a,EAAW,IACf,GAEJizB,EAAI/wB,KAAK,MAAOqF,GAAuB,GACvC0rB,EAAIruB,MAAM,GAElB;;;;;;;;;;;;;;;;GAsBJ,MAAMwuB,GACF,WAAA/hC,GACIpB,KAAKojC,UAAYvJ,GAAazI,UAClC,CACA,OAAAiS,CAAQzf,GACJ,OAAO5jB,KAAKojC,UAAUxO,SAAShR,EACnC,CACA,cAAA0f,CAAe1f,EAAM2f,GACjBvjC,KAAKojC,UAAYpjC,KAAKojC,UAAUlO,YAAYtR,EAAM2f,EACtD;;;;;;;;;;;;;;;;GAmBJ,SAASC,KACL,MAAO,CACHnjC,MAAO,KACP07B,SAAU,IAAIlU,IAEtB,CAQA,SAAS4b,GAA2BC,EAAoB9f,EAAMze,GAC1D,GAAIuf,GAAYd,GACZ8f,EAAmBrjC,MAAQ8E,EAC3Bu+B,EAAmB3H,SAAS4H,aAE3B,GAAiC,OAA7BD,EAAmBrjC,MACxBqjC,EAAmBrjC,MAAQqjC,EAAmBrjC,MAAM60B,YAAYtR,EAAMze,OAErE,CACD,MAAMm7B,EAAW3c,GAAaC,GACzB8f,EAAmB3H,SAASzR,IAAIgW,IACjCoD,EAAmB3H,SAASx6B,IAAI++B,EAAUkD,MAE9C,MAAMtd,EAAQwd,EAAmB3H,SAASn6B,IAAI0+B,GAC9C1c,EAAOE,GAAaF,GACpB6f,GAA2Bvd,EAAOtC,EAAMze,EAC5C,CACJ,CAmDA,SAASy+B,GAA8BF,EAAoBG,EAAYC,GAClC,OAA7BJ,EAAmBrjC,MACnByjC,EAAKD,EAAYH,EAAmBrjC,OAGpC0jC,GAA+BL,GAAoB,CAACliC,EAAKwiC,KACrD,MAAMpgB,EAAO,IAAIT,GAAK0gB,EAAW5hC,WAAa,IAAMT,GACpDoiC,GAA8BI,EAAMpgB,EAAMkgB,EAAK,GAG3D,CAOA,SAASC,GAA+BL,EAAoBI,GACxDJ,EAAmB3H,SAASkI,SAAQ,CAACD,EAAMxiC,KACvCsiC,EAAKtiC,EAAKwiC,EAAK,GAEvB;;;;;;;;;;;;;;;;GAuBA,MAAME,GACF,WAAA9iC,CAAY+iC,GACRnkC,KAAKmkC,YAAcA,EACnBnkC,KAAKokC,MAAQ,IACjB,CACA,GAAAxiC,GACI,MAAMyiC,EAAWrkC,KAAKmkC,YAAYviC,MAC5B2sB,EAAQtO,OAAOC,OAAO,CAAC,EAAGmkB,GAOhC,OANIrkC,KAAKokC,OACL38B,EAAKzH,KAAKokC,OAAO,CAACE,EAAMjkC,KACpBkuB,EAAM+V,GAAQ/V,EAAM+V,GAAQjkC,CAAK,IAGzCL,KAAKokC,MAAQC,EACN9V,CACX;;;;;;;;;;;;;;;;GAsBJ,MAAMgW,GAAuB,IACvBC,GAAuB,IAEvBC,GAAwB,IAC9B,MAAMC,GACF,WAAAtjC,CAAYujC,EAAYC,GACpB5kC,KAAK4kC,QAAUA,EACf5kC,KAAK6kC,eAAiB,CAAC,EACvB7kC,KAAK8kC,eAAiB,IAAIZ,GAAcS,GACxC,MAAMl6B,EAAU85B,IACXC,GAAuBD,IAAwBx+B,KAAKyN,SACzDjJ,EAAsBvK,KAAK+kC,aAAaxgC,KAAKvE,MAAO+F,KAAKC,MAAMyE,GACnE,CACA,YAAAs6B,GACI,MAAMnjB,EAAQ5hB,KAAK8kC,eAAeljC,MAC5BojC,EAAgB,CAAC,EACvB,IAAIC,GAAoB,EACxBx9B,EAAKma,GAAO,CAAC0iB,EAAMjkC,KACXA,EAAQ,IAAK,QAASL,KAAK6kC,eAAgBP,KAC3CU,EAAcV,GAAQjkC,EACtB4kC,GAAoB,EACxB,IAEAA,GACAjlC,KAAK4kC,QAAQjjB,YAAYqjB,GAG7Bz6B,EAAsBvK,KAAK+kC,aAAaxgC,KAAKvE,MAAO+F,KAAKC,MAAsB,EAAhBD,KAAKyN,SAAeixB,IACvF;;;;;;;;;;;;;;;;GAuBJ,IAAIS,GAOJ,SAASC,KACL,MAAO,CACHC,UAAU,EACVC,YAAY,EACZjb,QAAS,KACTkb,QAAQ,EAEhB,CACA,SAASC,KACL,MAAO,CACHH,UAAU,EACVC,YAAY,EACZjb,QAAS,KACTkb,QAAQ,EAEhB,CACA,SAASE,GAAoCpb,GACzC,MAAO,CACHgb,UAAU,EACVC,YAAY,EACZjb,UACAkb,QAAQ,EAEhB;;;;;;;;;;;;;;;;IA7BA,SAAWJ,GACPA,EAAcA,EAAc,aAAe,GAAK,YAChDA,EAAcA,EAAc,SAAW,GAAK,QAC5CA,EAAcA,EAAc,kBAAoB,GAAK,iBACrDA,EAAcA,EAAc,mBAAqB,GAAK,iBACzD,EALD,CAKGA,KAAkBA,GAAgB,CAAC,IA0CtC,MAAMO,GAIF,WAAArkC,CACmBwiB,EACA8hB,EACAC,GACf3lC,KAAK4jB,KAAOA,EACZ5jB,KAAK0lC,aAAeA,EACpB1lC,KAAK2lC,OAASA,EAEd3lC,KAAKyO,KAAOy2B,GAAcU,eAE1B5lC,KAAKw9B,OAAS2H,IAClB,CACA,iBAAAU,CAAkBlR,GACd,GAAKjQ,GAAY1kB,KAAK4jB,MAIjB,IAA+B,MAA3B5jB,KAAK0lC,aAAarlC,MAGvB,OAFA,QAAOL,KAAK0lC,aAAa3J,SAASnL,UAAW,4DAEtC5wB,KAEN,CACD,MAAMk4B,EAAYl4B,KAAK0lC,aAAaI,QAAQ,IAAI3iB,GAAKwR,IACrD,OAAO,IAAI8Q,GAAa/hB,KAAgBwU,EAAWl4B,KAAK2lC,OAC5D,EAVI,OADA,QAAOhiB,GAAa3jB,KAAK4jB,QAAU+Q,EAAW,iDACvC,IAAI8Q,GAAa3hB,GAAa9jB,KAAK4jB,MAAO5jB,KAAK0lC,aAAc1lC,KAAK2lC,OAWjF;;;;;;;;;;;;;;;;GAmBJ,MAAMI,GACF,WAAA3kC,CAAYo8B,EAAQ5Z,GAChB5jB,KAAKw9B,OAASA,EACdx9B,KAAK4jB,KAAOA,EAEZ5jB,KAAKyO,KAAOy2B,GAAcc,eAC9B,CACA,iBAAAH,CAAkBlR,GACd,OAAIjQ,GAAY1kB,KAAK4jB,MACV,IAAImiB,GAAe/lC,KAAKw9B,OAAQ9Z,MAGhC,IAAIqiB,GAAe/lC,KAAKw9B,OAAQ1Z,GAAa9jB,KAAK4jB,MAEjE;;;;;;;;;;;;;;;;GAmBJ,MAAMqiB,GACF,WAAA7kC,CAAYo8B,EAAQ5Z,EAAM2Y,GACtBv8B,KAAKw9B,OAASA,EACdx9B,KAAK4jB,KAAOA,EACZ5jB,KAAKu8B,KAAOA,EAEZv8B,KAAKyO,KAAOy2B,GAAcgB,SAC9B,CACA,iBAAAL,CAAkBlR,GACd,OAAIjQ,GAAY1kB,KAAK4jB,MACV,IAAIqiB,GAAUjmC,KAAKw9B,OAAQ9Z,KAAgB1jB,KAAKu8B,KAAK7H,kBAAkBC,IAGvE,IAAIsR,GAAUjmC,KAAKw9B,OAAQ1Z,GAAa9jB,KAAK4jB,MAAO5jB,KAAKu8B,KAExE;;;;;;;;;;;;;;;;GAmBJ,MAAM4J,GACF,WAAA/kC,CACmBo8B,EACA5Z,EACAmY,GACf/7B,KAAKw9B,OAASA,EACdx9B,KAAK4jB,KAAOA,EACZ5jB,KAAK+7B,SAAWA,EAEhB/7B,KAAKyO,KAAOy2B,GAAckB,KAC9B,CACA,iBAAAP,CAAkBlR,GACd,GAAIjQ,GAAY1kB,KAAK4jB,MAAO,CACxB,MAAMsU,EAAYl4B,KAAK+7B,SAAS+J,QAAQ,IAAI3iB,GAAKwR,IACjD,OAAIuD,EAAUtH,UAEH,KAEFsH,EAAU73B,MAER,IAAI4lC,GAAUjmC,KAAKw9B,OAAQ9Z,KAAgBwU,EAAU73B,OAIrD,IAAI8lC,GAAMnmC,KAAKw9B,OAAQ9Z,KAAgBwU,EAEtD,CAGI,OADA,QAAOvU,GAAa3jB,KAAK4jB,QAAU+Q,EAAW,kEACvC,IAAIwR,GAAMnmC,KAAKw9B,OAAQ1Z,GAAa9jB,KAAK4jB,MAAO5jB,KAAK+7B,SAEpE,CACA,QAAA95B,GACI,MAAQ,aACJjC,KAAK4jB,KACL,KACA5jB,KAAKw9B,OAAOv7B,WACZ,WACAjC,KAAK+7B,SAAS95B,WACd,GACR;;;;;;;;;;;;;;;;GAyBJ,MAAMokC,GACF,WAAAjlC,CAAYklC,EAAOC,EAAmBC,GAClCxmC,KAAKsmC,MAAQA,EACbtmC,KAAKumC,kBAAoBA,EACzBvmC,KAAKwmC,UAAYA,CACrB,CAIA,kBAAAC,GACI,OAAOzmC,KAAKumC,iBAChB,CAIA,UAAAG,GACI,OAAO1mC,KAAKwmC,SAChB,CACA,iBAAAG,CAAkB/iB,GACd,GAAIc,GAAYd,GACZ,OAAO5jB,KAAKymC,uBAAyBzmC,KAAKwmC,UAE9C,MAAMlG,EAAW3c,GAAaC,GAC9B,OAAO5jB,KAAK4mC,mBAAmBtG,EACnC,CACA,kBAAAsG,CAAmBplC,GACf,OAASxB,KAAKymC,uBAAyBzmC,KAAKwmC,WAAcxmC,KAAKsmC,MAAMzR,SAASrzB,EAClF,CACA,OAAA6hC,GACI,OAAOrjC,KAAKsmC,KAChB;;;;;;;;;;;;;;;;GAyBJ,MAAMO,GACF,WAAAzlC,CAAY0lC,GACR9mC,KAAK8mC,OAASA,EACd9mC,KAAKq9B,OAASr9B,KAAK8mC,OAAOvc,aAAaa,UAC3C,EAWJ,SAAS2b,GAAuCC,EAAgBC,EAASC,EAAYC,GACjF,MAAMC,EAAS,GACTC,EAAQ,GAYd,OAXAJ,EAAQhD,SAAQqD,IACQ,kBAAhBA,EAAO74B,MACPu4B,EAAe3J,OAAO9N,oBAAoB+X,EAAOpK,QAASoK,EAAOxK,eACjEuK,EAAMpgC,KAAKk2B,GAAiBmK,EAAO3S,UAAW2S,EAAOxK,cACzD,IAEJyK,GAAoCP,EAAgBI,EAAQ,gBAAgDH,EAASE,EAAoBD,GACzIK,GAAoCP,EAAgBI,EAAQ,cAA4CH,EAASE,EAAoBD,GACrIK,GAAoCP,EAAgBI,EAAQ,cAA4CC,EAAOF,EAAoBD,GACnIK,GAAoCP,EAAgBI,EAAQ,gBAAgDH,EAASE,EAAoBD,GACzIK,GAAoCP,EAAgBI,EAAQ,QAAgCH,EAASE,EAAoBD,GAClHE,CACX,CAIA,SAASG,GAAoCP,EAAgBI,EAAQnlB,EAAWglB,EAASO,EAAeN,GACpG,MAAMO,EAAkBR,EAAQS,QAAOJ,GAAUA,EAAO74B,OAASwT,IACjEwlB,EAAgBvgC,MAAK,CAACZ,EAAGC,IAAMohC,GAA6BX,EAAgB1gC,EAAGC,KAC/EkhC,EAAgBxD,SAAQqD,IACpB,MAAMM,EAAqBC,GAAsCb,EAAgBM,EAAQJ,GACzFM,EAAcvD,SAAQ6D,IACdA,EAAaC,WAAWT,EAAO74B,OAC/B24B,EAAOngC,KAAK6gC,EAAaE,YAAYJ,EAAoBZ,EAAeF,QAC5E,GACF,GAEV,CACA,SAASe,GAAsCb,EAAgBM,EAAQJ,GACnE,MAAoB,UAAhBI,EAAO74B,MAAoC,kBAAhB64B,EAAO74B,OAIlC64B,EAAOW,SAAWf,EAAWpS,wBAAwBwS,EAAO3S,UAAW2S,EAAOxK,aAAckK,EAAe3J,SAHpGiK,CAMf,CACA,SAASK,GAA6BX,EAAgB1gC,EAAGC,GACrD,GAAmB,MAAfD,EAAEquB,WAAoC,MAAfpuB,EAAEouB,UACzB,MAAM,QAAe,sCAEzB,MAAMuT,EAAW,IAAIjZ,GAAU3oB,EAAEquB,UAAWruB,EAAEw2B,cACxCqL,EAAW,IAAIlZ,GAAU1oB,EAAEouB,UAAWpuB,EAAEu2B,cAC9C,OAAOkK,EAAe3J,OAAO/N,QAAQ4Y,EAAUC,EACnD;;;;;;;;;;;;;;;;GAkBA,SAASC,GAAalB,EAAYmB,GAC9B,MAAO,CAAEnB,aAAYmB,cACzB,CACA,SAASC,GAAyBC,EAAWC,EAAWC,EAAU1J,GAC9D,OAAOqJ,GAAa,IAAI/B,GAAUmC,EAAWC,EAAU1J,GAAWwJ,EAAUF,YAChF,CACA,SAASK,GAA0BH,EAAWI,EAAYF,EAAU1J,GAChE,OAAOqJ,GAAaG,EAAUrB,WAAY,IAAIb,GAAUsC,EAAYF,EAAU1J,GAClF,CACA,SAAS6J,GAA8BL,GACnC,OAAOA,EAAUrB,WAAWT,qBACtB8B,EAAUrB,WAAW7D,UACrB,IACV,CACA,SAASwF,GAA+BN,GACpC,OAAOA,EAAUF,YAAY5B,qBACvB8B,EAAUF,YAAYhF,UACtB,IACV;;;;;;;;;;;;;;;;GAkBA,IAAIyF,GAKJ,MAAMC,GAAgB,KACbD,KACDA,GAAyB,IAAI3X,GAAUxqB,IAEpCmiC,IAKX,MAAME,GACF,WAAA5nC,CAAYf,EAAO07B,EAAWgN,MAC1B/oC,KAAKK,MAAQA,EACbL,KAAK+7B,SAAWA,CACpB,CACA,iBAAOkN,CAAWpiC,GACd,IAAIm9B,EAAO,IAAIgF,GAAc,MAI7B,OAHAvhC,EAAKZ,GAAK,CAACqiC,EAAW3I,KAClByD,EAAOA,EAAKziC,IAAI,IAAI4hB,GAAK+lB,GAAY3I,EAAU,IAE5CyD,CACX,CAIA,OAAApT,GACI,OAAsB,OAAf5wB,KAAKK,OAAkBL,KAAK+7B,SAASnL,SAChD,CAWA,gCAAAuY,CAAiCC,EAAcC,GAC3C,GAAkB,MAAdrpC,KAAKK,OAAiBgpC,EAAUrpC,KAAKK,OACrC,MAAO,CAAEujB,KAAMF,KAAgBrjB,MAAOL,KAAKK,OAG3C,GAAIqkB,GAAY0kB,GACZ,OAAO,KAEN,CACD,MAAMjU,EAAQxR,GAAaylB,GACrBljB,EAAQlmB,KAAK+7B,SAASn6B,IAAIuzB,GAChC,GAAc,OAAVjP,EAAgB,CAChB,MAAMojB,EAA4BpjB,EAAMijB,iCAAiCrlB,GAAaslB,GAAeC,GACrG,GAAiC,MAA7BC,EAAmC,CACnC,MAAMC,EAAWhlB,GAAU,IAAIpB,GAAKgS,GAAQmU,EAA0B1lB,MACtE,MAAO,CAAEA,KAAM2lB,EAAUlpC,MAAOipC,EAA0BjpC,MAC9D,CAEI,OAAO,IAEf,CAEI,OAAO,IAEf,CAER,CAKA,wBAAAmpC,CAAyBJ,GACrB,OAAOppC,KAAKmpC,iCAAiCC,GAAc,KAAM,GACrE,CAIA,OAAAtD,CAAQsD,GACJ,GAAI1kB,GAAY0kB,GACZ,OAAOppC,KAEN,CACD,MAAMm1B,EAAQxR,GAAaylB,GACrBlR,EAAYl4B,KAAK+7B,SAASn6B,IAAIuzB,GACpC,OAAkB,OAAd+C,EACOA,EAAU4N,QAAQhiB,GAAaslB,IAG/B,IAAIJ,GAAc,KAEjC,CACJ,CAQA,GAAAznC,CAAI6nC,EAAcK,GACd,GAAI/kB,GAAY0kB,GACZ,OAAO,IAAIJ,GAAcS,EAAOzpC,KAAK+7B,UAEpC,CACD,MAAM5G,EAAQxR,GAAaylB,GACrBljB,EAAQlmB,KAAK+7B,SAASn6B,IAAIuzB,IAAU,IAAI6T,GAAc,MACtD1L,EAAWpX,EAAM3kB,IAAIuiB,GAAaslB,GAAeK,GACjD9P,EAAc35B,KAAK+7B,SAASnK,OAAOuD,EAAOmI,GAChD,OAAO,IAAI0L,GAAchpC,KAAKK,MAAOs5B,EACzC,CACJ,CAOA,MAAA53B,CAAOqnC,GACH,GAAI1kB,GAAY0kB,GACZ,OAAIppC,KAAK+7B,SAASnL,UACP,IAAIoY,GAAc,MAGlB,IAAIA,GAAc,KAAMhpC,KAAK+7B,UAGvC,CACD,MAAM5G,EAAQxR,GAAaylB,GACrBljB,EAAQlmB,KAAK+7B,SAASn6B,IAAIuzB,GAChC,GAAIjP,EAAO,CACP,MAAMoX,EAAWpX,EAAMnkB,OAAO+hB,GAAaslB,IAC3C,IAAIzP,EAOJ,OALIA,EADA2D,EAAS1M,UACK5wB,KAAK+7B,SAASh6B,OAAOozB,GAGrBn1B,KAAK+7B,SAASnK,OAAOuD,EAAOmI,GAE3B,OAAft9B,KAAKK,OAAkBs5B,EAAY/I,UAC5B,IAAIoY,GAAc,MAGlB,IAAIA,GAAchpC,KAAKK,MAAOs5B,EAE7C,CAEI,OAAO35B,IAEf,CACJ,CAOA,GAAA4B,CAAIwnC,GACA,GAAI1kB,GAAY0kB,GACZ,OAAOppC,KAAKK,MAEX,CACD,MAAM80B,EAAQxR,GAAaylB,GACrBljB,EAAQlmB,KAAK+7B,SAASn6B,IAAIuzB,GAChC,OAAIjP,EACOA,EAAMtkB,IAAIkiB,GAAaslB,IAGvB,IAEf,CACJ,CAQA,OAAAM,CAAQN,EAAcO,GAClB,GAAIjlB,GAAY0kB,GACZ,OAAOO,EAEN,CACD,MAAMxU,EAAQxR,GAAaylB,GACrBljB,EAAQlmB,KAAK+7B,SAASn6B,IAAIuzB,IAAU,IAAI6T,GAAc,MACtD1L,EAAWpX,EAAMwjB,QAAQ5lB,GAAaslB,GAAeO,GAC3D,IAAIhQ,EAOJ,OALIA,EADA2D,EAAS1M,UACK5wB,KAAK+7B,SAASh6B,OAAOozB,GAGrBn1B,KAAK+7B,SAASnK,OAAOuD,EAAOmI,GAEvC,IAAI0L,GAAchpC,KAAKK,MAAOs5B,EACzC,CACJ,CAMA,IAAAiQ,CAAKpkC,GACD,OAAOxF,KAAK6pC,MAAMnmB,KAAgBle,EACtC,CAIA,KAAAqkC,CAAMC,EAAWtkC,GACb,MAAMukC,EAAQ,CAAC,EAIf,OAHA/pC,KAAK+7B,SAASxK,kBAAiB,CAAC+O,EAAUpI,KACtC6R,EAAMzJ,GAAYpI,EAAU2R,MAAMtlB,GAAUulB,EAAWxJ,GAAW96B,EAAG,IAElEA,EAAGskC,EAAW9pC,KAAKK,MAAO0pC,EACrC,CAIA,UAAAC,CAAWpmB,EAAM3b,GACb,OAAOjI,KAAKiqC,YAAYrmB,EAAMF,KAAgBzb,EAClD,CACA,WAAAgiC,CAAYC,EAAcJ,EAAW7hC,GACjC,MAAMhI,IAASD,KAAKK,OAAQ4H,EAAE6hC,EAAW9pC,KAAKK,OAC9C,GAAIJ,EACA,OAAOA,EAGP,GAAIykB,GAAYwlB,GACZ,OAAO,KAEN,CACD,MAAM/U,EAAQxR,GAAaumB,GACrBrJ,EAAY7gC,KAAK+7B,SAASn6B,IAAIuzB,GACpC,OAAI0L,EACOA,EAAUoJ,YAAYnmB,GAAaomB,GAAe3lB,GAAUulB,EAAW3U,GAAQltB,GAG/E,IAEf,CAER,CACA,aAAAkiC,CAAcvmB,EAAM3b,GAChB,OAAOjI,KAAKoqC,eAAexmB,EAAMF,KAAgBzb,EACrD,CACA,cAAAmiC,CAAeF,EAAcG,EAAqBpiC,GAC9C,GAAIyc,GAAYwlB,GACZ,OAAOlqC,KAEN,CACGA,KAAKK,OACL4H,EAAEoiC,EAAqBrqC,KAAKK,OAEhC,MAAM80B,EAAQxR,GAAaumB,GACrBrJ,EAAY7gC,KAAK+7B,SAASn6B,IAAIuzB,GACpC,OAAI0L,EACOA,EAAUuJ,eAAetmB,GAAaomB,GAAe3lB,GAAU8lB,EAAqBlV,GAAQltB,GAG5F,IAAI+gC,GAAc,KAEjC,CACJ,CAOA,OAAAsB,CAAQriC,GACJjI,KAAKuqC,SAAS7mB,KAAgBzb,EAClC,CACA,QAAAsiC,CAASF,EAAqBpiC,GAC1BjI,KAAK+7B,SAASxK,kBAAiB,CAACoD,EAAWuD,KACvCA,EAAUqS,SAAShmB,GAAU8lB,EAAqB1V,GAAY1sB,EAAE,IAEhEjI,KAAKK,OACL4H,EAAEoiC,EAAqBrqC,KAAKK,MAEpC,CACA,YAAAmqC,CAAaviC,GACTjI,KAAK+7B,SAASxK,kBAAiB,CAACoD,EAAWuD,KACnCA,EAAU73B,OACV4H,EAAE0sB,EAAWuD,EAAU73B,MAC3B,GAER;;;;;;;;;;;;;;;;GAyBJ,MAAMoqC,GACF,WAAArpC,CAAYspC,GACR1qC,KAAK0qC,WAAaA,CACtB,CACA,YAAOC,GACH,OAAO,IAAIF,GAAc,IAAIzB,GAAc,MAC/C,EAEJ,SAAS4B,GAAsBC,EAAejnB,EAAMsL,GAChD,GAAIxK,GAAYd,GACZ,OAAO,IAAI6mB,GAAc,IAAIzB,GAAc9Z,IAE1C,CACD,MAAM4b,EAAWD,EAAcH,WAAWlB,yBAAyB5lB,GACnE,GAAgB,MAAZknB,EAAkB,CAClB,MAAMC,EAAeD,EAASlnB,KAC9B,IAAIvjB,EAAQyqC,EAASzqC,MACrB,MAAM+oC,EAAezkB,GAAgBomB,EAAcnnB,GAEnD,OADAvjB,EAAQA,EAAM60B,YAAYkU,EAAcla,GACjC,IAAIub,GAAcI,EAAcH,WAAWnpC,IAAIwpC,EAAc1qC,GACxE,CACK,CACD,MAAMylC,EAAU,IAAIkD,GAAc9Z,GAC5B8b,EAAeH,EAAcH,WAAWhB,QAAQ9lB,EAAMkiB,GAC5D,OAAO,IAAI2E,GAAcO,EAC7B,CACJ,CACJ,CACA,SAASC,GAAuBJ,EAAejnB,EAAMsnB,GACjD,IAAIC,EAAWN,EAIf,OAHApjC,EAAKyjC,GAAS,CAAC5K,EAAUpR,KACrBic,EAAWP,GAAsBO,EAAU5mB,GAAUX,EAAM0c,GAAWpR,EAAK,IAExEic,CACX,CASA,SAASC,GAAyBP,EAAejnB,GAC7C,GAAIc,GAAYd,GACZ,OAAO6mB,GAAcE,QAEpB,CACD,MAAMK,EAAeH,EAAcH,WAAWhB,QAAQ9lB,EAAM,IAAIolB,GAAc,OAC9E,OAAO,IAAIyB,GAAcO,EAC7B,CACJ,CASA,SAASK,GAA8BR,EAAejnB,GAClD,OAA4D,MAArD0nB,GAA6BT,EAAejnB,EACvD,CASA,SAAS0nB,GAA6BT,EAAejnB,GACjD,MAAMknB,EAAWD,EAAcH,WAAWlB,yBAAyB5lB,GACnE,OAAgB,MAAZknB,EACOD,EAAcH,WAChB9oC,IAAIkpC,EAASlnB,MACbgR,SAASjQ,GAAgBmmB,EAASlnB,KAAMA,IAGtC,IAEf,CAOA,SAAS2nB,GAAiCV,GACtC,MAAM9O,EAAW,GACX7M,EAAO2b,EAAcH,WAAWrqC,MAgBtC,OAfY,MAAR6uB,EAEKA,EAAK6E,cACN7E,EAAKmG,aAAaqB,IAAgB,CAAC/B,EAAWI,KAC1CgH,EAAS90B,KAAK,IAAIgoB,GAAU0F,EAAWI,GAAW,IAK1D8V,EAAcH,WAAW3O,SAASxK,kBAAiB,CAACoD,EAAWuD,KACpC,MAAnBA,EAAU73B,OACV07B,EAAS90B,KAAK,IAAIgoB,GAAU0F,EAAWuD,EAAU73B,OACrD,IAGD07B,CACX,CACA,SAASyP,GAAgCX,EAAejnB,GACpD,GAAIc,GAAYd,GACZ,OAAOinB,EAEN,CACD,MAAMY,EAAgBH,GAA6BT,EAAejnB,GAClE,OACW,IAAI6mB,GADM,MAAjBgB,EACyB,IAAIzC,GAAcyC,GAGlBZ,EAAcH,WAAW5E,QAAQliB,GAElE,CACJ,CAKA,SAAS8nB,GAAqBb,GAC1B,OAAOA,EAAcH,WAAW9Z,SACpC,CAOA,SAAS+a,GAAmBd,EAAe3b,GACvC,OAAO0c,GAAkBloB,KAAgBmnB,EAAcH,WAAYxb,EACvE,CACA,SAAS0c,GAAkBxC,EAAcyC,EAAW3c,GAChD,GAAuB,MAAnB2c,EAAUxrC,MAEV,OAAO6uB,EAAKgG,YAAYkU,EAAcyC,EAAUxrC,OAE/C,CACD,IAAIyrC,EAAgB,KAgBpB,OAfAD,EAAU9P,SAASxK,kBAAiB,CAAC+O,EAAUpI,KAC1B,cAAboI,IAGA,QAA2B,OAApBpI,EAAU73B,MAAgB,6CACjCyrC,EAAgB5T,EAAU73B,OAG1B6uB,EAAO0c,GAAkBrnB,GAAU6kB,EAAc9I,GAAWpI,EAAWhJ,EAC3E,IAGCA,EAAK0F,SAASwU,GAAcxY,WAA+B,OAAlBkb,IAC1C5c,EAAOA,EAAKgG,YAAY3Q,GAAU6kB,EAAc,aAAc0C,IAE3D5c,CACX,CACJ;;;;;;;;;;;;;;;;GAsBA,SAAS6c,GAAqBF,EAAWjoB,GACrC,OAAOooB,GAAgBpoB,EAAMioB,EACjC,CAMA,SAASI,GAAsBJ,EAAWjoB,EAAM2Y,EAAM2P,EAASvlB,IAC3D,QAAOulB,EAAUL,EAAUM,YAAa,qDACxB5f,IAAZ5F,IACAA,GAAU,GAEdklB,EAAUO,UAAUnlC,KAAK,CACrB2c,OACA2Y,OACA2P,UACAvlB,YAEAA,IACAklB,EAAUQ,cAAgBzB,GAAsBiB,EAAUQ,cAAezoB,EAAM2Y,IAEnFsP,EAAUM,YAAcD,CAC5B,CAIA,SAASI,GAAkBT,EAAWjoB,EAAM2oB,EAAiBL,IACzD,QAAOA,EAAUL,EAAUM,YAAa,gDACxCN,EAAUO,UAAUnlC,KAAK,CACrB2c,OACAmY,SAAUwQ,EACVL,UACAvlB,SAAS,IAEbklB,EAAUQ,cAAgBpB,GAAuBY,EAAUQ,cAAezoB,EAAM2oB,GAChFV,EAAUM,YAAcD,CAC5B,CACA,SAASM,GAAkBX,EAAWK,GAClC,IAAK,IAAIzoC,EAAI,EAAGA,EAAIooC,EAAUO,UAAU1oC,OAAQD,IAAK,CACjD,MAAMgpC,EAASZ,EAAUO,UAAU3oC,GACnC,GAAIgpC,EAAOP,UAAYA,EACnB,OAAOO,CAEf,CACA,OAAO,IACX,CAQA,SAASC,GAAqBb,EAAWK,GAKrC,MAAM3R,EAAMsR,EAAUO,UAAUO,WAAU3kC,GAC/BA,EAAEkkC,UAAYA,KAEzB,QAAO3R,GAAO,EAAG,gDACjB,MAAMqS,EAAgBf,EAAUO,UAAU7R,GAC1CsR,EAAUO,UAAU3pB,OAAO8X,EAAK,GAChC,IAAIsS,EAAyBD,EAAcjmB,QACvCmmB,GAAsC,EACtCrpC,EAAIooC,EAAUO,UAAU1oC,OAAS,EACrC,MAAOmpC,GAA0BppC,GAAK,EAAG,CACrC,MAAMspC,EAAelB,EAAUO,UAAU3oC,GACrCspC,EAAapmB,UACTljB,GAAK82B,GACLyS,GAA6BD,EAAcH,EAAchpB,MAEzDipB,GAAyB,EAEpBpnB,GAAamnB,EAAchpB,KAAMmpB,EAAanpB,QAEnDkpB,GAAsC,IAG9CrpC,GACJ,CACA,GAAKopC,EAGA,IAAIC,EAGL,OADAG,GAAoBpB,IACb,EAIP,GAAIe,EAAcrQ,KACdsP,EAAUQ,cAAgBjB,GAAyBS,EAAUQ,cAAeO,EAAchpB,UAEzF,CACD,MAAMmY,EAAW6Q,EAAc7Q,SAC/Bt0B,EAAKs0B,GAAWpH,IACZkX,EAAUQ,cAAgBjB,GAAyBS,EAAUQ,cAAe9nB,GAAUqoB,EAAchpB,KAAM+Q,GAAW,GAE7H,CACA,OAAO,CACX,CAnBI,OAAO,CAoBf,CACA,SAASqY,GAA6BE,EAAatpB,GAC/C,GAAIspB,EAAY3Q,KACZ,OAAO9W,GAAaynB,EAAYtpB,KAAMA,GAGtC,IAAK,MAAM+Q,KAAauY,EAAYnR,SAChC,GAAImR,EAAYnR,SAASr0B,eAAeitB,IACpClP,GAAalB,GAAU2oB,EAAYtpB,KAAM+Q,GAAY/Q,GACrD,OAAO,EAGf,OAAO,CAEf,CAIA,SAASqpB,GAAoBpB,GACzBA,EAAUQ,cAAgBc,GAAoBtB,EAAUO,UAAWgB,GAAyB1pB,MACxFmoB,EAAUO,UAAU1oC,OAAS,EAC7BmoC,EAAUM,YACNN,EAAUO,UAAUP,EAAUO,UAAU1oC,OAAS,GAAGwoC,QAGxDL,EAAUM,aAAe,CAEjC,CAIA,SAASiB,GAAwBn3B,GAC7B,OAAOA,EAAM0Q,OACjB,CAKA,SAASwmB,GAAoBE,EAAQ3F,EAAQ4F,GACzC,IAAIzC,EAAgBJ,GAAcE,QAClC,IAAK,IAAIlnC,EAAI,EAAGA,EAAI4pC,EAAO3pC,SAAUD,EAAG,CACpC,MAAMwS,EAAQo3B,EAAO5pC,GAIrB,GAAIikC,EAAOzxB,GAAQ,CACf,MAAMs3B,EAAYt3B,EAAM2N,KACxB,IAAIwlB,EACJ,GAAInzB,EAAMsmB,KACF9W,GAAa6nB,EAAUC,IACvBnE,EAAezkB,GAAgB2oB,EAAUC,GACzC1C,EAAgBD,GAAsBC,EAAezB,EAAcnzB,EAAMsmB,OAEpE9W,GAAa8nB,EAAWD,KAC7BlE,EAAezkB,GAAgB4oB,EAAWD,GAC1CzC,EAAgBD,GAAsBC,EAAennB,KAAgBzN,EAAMsmB,KAAK3H,SAASwU,SAI5F,KAAInzB,EAAM8lB,SAsBX,MAAM,QAAe,8CArBrB,GAAItW,GAAa6nB,EAAUC,GACvBnE,EAAezkB,GAAgB2oB,EAAUC,GACzC1C,EAAgBI,GAAuBJ,EAAezB,EAAcnzB,EAAM8lB,eAEzE,GAAItW,GAAa8nB,EAAWD,GAE7B,GADAlE,EAAezkB,GAAgB4oB,EAAWD,GACtC5oB,GAAY0kB,GACZyB,EAAgBI,GAAuBJ,EAAennB,KAAgBzN,EAAM8lB,cAE3E,CACD,MAAM7V,GAAQ,QAAQjQ,EAAM8lB,SAAUpY,GAAaylB,IACnD,GAAIljB,EAAO,CAEP,MAAMsnB,EAAWtnB,EAAM0O,SAAS9Q,GAAaslB,IAC7CyB,EAAgBD,GAAsBC,EAAennB,KAAgB8pB,EACzE,CACJ,CAMR,CACJ,CACJ,CACA,OAAO3C,CACX,CAQA,SAAS4C,GAAgC5B,EAAW6B,EAAUC,EAAqBC,EAAmBC,GAClG,GAAKD,GAAsBC,EAqBtB,CACD,MAAMzsB,EAAQoqB,GAAgCK,EAAUQ,cAAeqB,GACvE,IAAKG,GAAuBnC,GAAqBtqB,GAC7C,OAAOusB,EAIP,GAAKE,GACsB,MAAvBF,GACCtC,GAA8BjqB,EAAOsC,MAGrC,CACD,MAAMgkB,EAAS,SAAUzxB,GACrB,OAASA,EAAM0Q,SAAWknB,MACpBD,KACIA,EAAkB3oC,QAAQgR,EAAMi2B,YACrCzmB,GAAaxP,EAAM2N,KAAM8pB,IACtBjoB,GAAaioB,EAAUz3B,EAAM2N,MACzC,EACMkqB,EAAcX,GAAoBtB,EAAUO,UAAW1E,EAAQgG,GAC/DK,EAAeJ,GAAuB9T,GAAazI,WACzD,OAAOua,GAAmBmC,EAAaC,EAC3C,CAbI,OAAO,IAenB,CA9CgD,CAC5C,MAAMtC,EAAgBH,GAA6BO,EAAUQ,cAAeqB,GAC5E,GAAqB,MAAjBjC,EACA,OAAOA,EAEN,CACD,MAAMuC,EAAWxC,GAAgCK,EAAUQ,cAAeqB,GAC1E,GAAIhC,GAAqBsC,GACrB,OAAOL,EAEN,GAA2B,MAAvBA,GACJtC,GAA8B2C,EAAUtqB,MAIxC,CACD,MAAMqqB,EAAeJ,GAAuB9T,GAAazI,WACzD,OAAOua,GAAmBqC,EAAUD,EACxC,CALI,OAAO,IAMf,CACJ,CA2BJ,CAKA,SAASE,GAAmCpC,EAAW6B,EAAUQ,GAC7D,IAAIC,EAAmBtU,GAAazI,WACpC,MAAMgd,EAAc9C,GAA6BO,EAAUQ,cAAeqB,GAC1E,GAAIU,EAOA,OANKA,EAAYra,cAEbqa,EAAY/Y,aAAaqB,IAAgB,CAAC/B,EAAW4L,KACjD4N,EAAmBA,EAAiBnZ,qBAAqBL,EAAW4L,EAAU,IAG/E4N,EAEN,GAAID,EAAwB,CAG7B,MAAM9sB,EAAQoqB,GAAgCK,EAAUQ,cAAeqB,GASvE,OARAQ,EAAuB7Y,aAAaqB,IAAgB,CAAC/B,EAAWI,KAC5D,MAAM7F,EAAOyc,GAAmBH,GAAgCpqB,EAAO,IAAI+B,GAAKwR,IAAaI,GAC7FoZ,EAAmBA,EAAiBnZ,qBAAqBL,EAAWzF,EAAK,IAG7Eqc,GAAiCnqB,GAAO6iB,SAAQtM,IAC5CwW,EAAmBA,EAAiBnZ,qBAAqB2C,EAAU31B,KAAM21B,EAAUzI,KAAK,IAErFif,CACX,CACK,CAGD,MAAM/sB,EAAQoqB,GAAgCK,EAAUQ,cAAeqB,GAIvE,OAHAnC,GAAiCnqB,GAAO6iB,SAAQtM,IAC5CwW,EAAmBA,EAAiBnZ,qBAAqB2C,EAAU31B,KAAM21B,EAAUzI,KAAK,IAErFif,CACX,CACJ,CAeA,SAASE,GAA4CxC,EAAW6B,EAAUxE,EAAWoF,EAAmBC,IACpG,QAAOD,GAAqBC,EAAoB,6DAChD,MAAM3qB,EAAOW,GAAUmpB,EAAUxE,GACjC,GAAImC,GAA8BQ,EAAUQ,cAAezoB,GAGvD,OAAO,KAEN,CAED,MAAM4qB,EAAahD,GAAgCK,EAAUQ,cAAezoB,GAC5E,OAAI8nB,GAAqB8C,GAEdD,EAAmB3Z,SAASsU,GAS5ByC,GAAmB6C,EAAYD,EAAmB3Z,SAASsU,GAE1E,CACJ,CAKA,SAASuF,GAA2B5C,EAAW6B,EAAUpN,EAAUiO,GAC/D,MAAM3qB,EAAOW,GAAUmpB,EAAUpN,GAC3BmL,EAAgBH,GAA6BO,EAAUQ,cAAezoB,GAC5E,GAAqB,MAAjB6nB,EACA,OAAOA,EAGP,GAAI8C,EAAmB3H,mBAAmBtG,GAAW,CACjD,MAAMkO,EAAahD,GAAgCK,EAAUQ,cAAezoB,GAC5E,OAAO+nB,GAAmB6C,EAAYD,EAAmBlL,UAAU3O,kBAAkB4L,GACzF,CAEI,OAAO,IAGnB,CAMA,SAASoO,GAAwB7C,EAAWjoB,GACxC,OAAO0nB,GAA6BO,EAAUQ,cAAezoB,EACjE,CAKA,SAAS+qB,GAA0B9C,EAAW6B,EAAUkB,EAAoB7T,EAAWzJ,EAAO5oB,EAASohB,GACnG,IAAI+kB,EACJ,MAAMztB,EAAQoqB,GAAgCK,EAAUQ,cAAeqB,GACjEjC,EAAgBH,GAA6BlqB,EAAOsC,MAC1D,GAAqB,MAAjB+nB,EACAoD,EAAYpD,MAEX,IAA0B,MAAtBmD,EAKL,MAAO,GAJPC,EAAYlD,GAAmBvqB,EAAOwtB,EAK1C,CAEA,GADAC,EAAYA,EAAU5Y,UAAUnM,GAC3B+kB,EAAUje,WAAcie,EAAU9a,aAgBnC,MAAO,GAhB0C,CACjD,MAAM+a,EAAQ,GACRzpB,EAAMyE,EAAMuF,aACZ8J,EAAOzwB,EACPmmC,EAAUxb,uBAAuB0H,EAAWjR,GAC5C+kB,EAAUzb,gBAAgB2H,EAAWjR,GAC3C,IAAI5pB,EAAOi5B,EAAKtI,UAChB,MAAO3wB,GAAQ4uC,EAAMprC,OAAS4tB,EACG,IAAzBjM,EAAInlB,EAAM66B,IACV+T,EAAM7nC,KAAK/G,GAEfA,EAAOi5B,EAAKtI,UAEhB,OAAOie,CACX,CAIJ,CACA,SAAS9D,KACL,MAAO,CACHqB,cAAe5B,GAAcE,QAC7ByB,UAAW,GACXD,aAAc,EAEtB,CASA,SAAS4C,GAAmCC,EAAcrB,EAAqBC,EAAmBC,GAC9F,OAAOJ,GAAgCuB,EAAanD,UAAWmD,EAAatB,SAAUC,EAAqBC,EAAmBC,EAClI,CAMA,SAASoB,GAAsCD,EAAcd,GACzD,OAAOD,GAAmCe,EAAanD,UAAWmD,EAAatB,SAAUQ,EAC7F,CAiBA,SAASgB,GAA+CF,EAAcprB,EAAM0qB,EAAmBC,GAC3F,OAAOF,GAA4CW,EAAanD,UAAWmD,EAAatB,SAAU9pB,EAAM0qB,EAAmBC,EAC/H,CAOA,SAASY,GAA2BH,EAAcprB,GAC9C,OAAO8qB,GAAwBM,EAAanD,UAAWtnB,GAAUyqB,EAAatB,SAAU9pB,GAC5F,CAKA,SAASwrB,GAA6BJ,EAAcJ,EAAoB7T,EAAWzJ,EAAO5oB,EAASohB,GAC/F,OAAO6kB,GAA0BK,EAAanD,UAAWmD,EAAatB,SAAUkB,EAAoB7T,EAAWzJ,EAAO5oB,EAASohB,EACnI,CAKA,SAASulB,GAA8BL,EAAc1O,EAAUgP,GAC3D,OAAOb,GAA2BO,EAAanD,UAAWmD,EAAatB,SAAUpN,EAAUgP,EAC/F,CAIA,SAASC,GAAkBP,EAAcra,GACrC,OAAOqX,GAAgBznB,GAAUyqB,EAAatB,SAAU/Y,GAAYqa,EAAanD,UACrF,CACA,SAASG,GAAgBpoB,EAAMioB,GAC3B,MAAO,CACH6B,SAAU9pB,EACVioB,YAER;;;;;;;;;;;;;;;;GAkBA,MAAM2D,GACF,WAAApuC,GACIpB,KAAKyvC,UAAY,IAAI5nB,GACzB,CACA,gBAAA8V,CAAiB2J,GACb,MAAM74B,EAAO64B,EAAO74B,KACd6xB,EAAWgH,EAAO3S,WACxB,QAAgB,gBAATlmB,GACM,kBAATA,GACS,kBAATA,EAAyD,8CAC7D,QAAoB,cAAb6xB,EAA0B,mDACjC,MAAMoP,EAAY1vC,KAAKyvC,UAAU7tC,IAAI0+B,GACrC,GAAIoP,EAAW,CACX,MAAMC,EAAUD,EAAUjhC,KAC1B,GAAa,gBAATA,GACY,kBAAZkhC,EACA3vC,KAAKyvC,UAAUluC,IAAI++B,EAAUrD,GAAmBqD,EAAUgH,EAAOxK,aAAc4S,EAAU5S,oBAExF,GAAa,kBAATruB,GACO,gBAAZkhC,EACA3vC,KAAKyvC,UAAU/3B,OAAO4oB,QAErB,GAAa,kBAAT7xB,GACO,kBAAZkhC,EACA3vC,KAAKyvC,UAAUluC,IAAI++B,EAAUtD,GAAmBsD,EAAUoP,EAAUxS,eAEnE,GAAa,kBAATzuB,GACO,gBAAZkhC,EACA3vC,KAAKyvC,UAAUluC,IAAI++B,EAAUvD,GAAiBuD,EAAUgH,EAAOxK,mBAE9D,IAAa,kBAATruB,GACO,kBAAZkhC,EAIA,MAAM,QAAe,mCACjBrI,EACA,mBACAoI,GANJ1vC,KAAKyvC,UAAUluC,IAAI++B,EAAUrD,GAAmBqD,EAAUgH,EAAOxK,aAAc4S,EAAUxS,SAO7F,CACJ,MAEIl9B,KAAKyvC,UAAUluC,IAAI++B,EAAUgH,EAErC,CACA,UAAAsI,GACI,OAAOhsC,MAAMisC,KAAK7vC,KAAKyvC,UAAU1gB,SACrC;;;;;;;;;;;;;;;;GAuBJ,MAAM+gB,GACF,gBAAAC,CAAiBzP,GACb,OAAO,IACX,CACA,kBAAAQ,CAAmBhX,EAAO5D,EAAOxd,GAC7B,OAAO,IACX,EAKJ,MAAMsnC,GAA2B,IAAIF,GAKrC,MAAMG,GACF,WAAA7uC,CAAY8uC,EAASC,EAAYC,EAA0B,MACvDpwC,KAAKkwC,QAAUA,EACflwC,KAAKmwC,WAAaA,EAClBnwC,KAAKowC,wBAA0BA,CACnC,CACA,gBAAAL,CAAiBzP,GACb,MAAMpR,EAAOlvB,KAAKmwC,WAAWjJ,WAC7B,GAAIhY,EAAK0X,mBAAmBtG,GACxB,OAAOpR,EAAKmU,UAAU3O,kBAAkB4L,GAEvC,CACD,MAAM+P,EAA6C,MAAhCrwC,KAAKowC,wBAClB,IAAI/J,GAAUrmC,KAAKowC,yBAAyB,GAAM,GAClDpwC,KAAKmwC,WAAW9H,YACtB,OAAOgH,GAA8BrvC,KAAKkwC,QAAS5P,EAAU+P,EACjE,CACJ,CACA,kBAAAvP,CAAmBhX,EAAO5D,EAAOxd,GAC7B,MAAMkmC,EAAqD,MAAhC5uC,KAAKowC,wBAC1BpwC,KAAKowC,wBACLvH,GAA+B7oC,KAAKmwC,YACpCrB,EAAQM,GAA6BpvC,KAAKkwC,QAAStB,EAAoB1oB,EAAO,EAAGxd,EAASohB,GAChG,OAAqB,IAAjBglB,EAAMprC,OACC,KAGAorC,EAAM,EAErB;;;;;;;;;;;;;;;;GAmBJ,SAASwB,GAAiB5I,GACtB,MAAO,CAAEA,SACb,CACA,SAAS6I,GAA2BC,EAAejI,IAC/C,QAAOA,EAAUrB,WAAW7D,UAAUnN,UAAUsa,EAAc9I,OAAOtc,YAAa,2BAClF,QAAOmd,EAAUF,YAAYhF,UAAUnN,UAAUsa,EAAc9I,OAAOtc,YAAa,0BACvF,CACA,SAASqlB,GAA4BD,EAAeE,EAAcC,EAAWC,EAAaC,GACtF,MAAMC,EAAc,IAAItB,GACxB,IAAIpH,EAAc2I,EAClB,GAAIJ,EAAUliC,OAASy2B,GAAcgB,UAAW,CAC5C,MAAM8K,EAAYL,EACdK,EAAUxT,OAAO4H,SACjBgD,EAAe6I,GAAgCT,EAAeE,EAAcM,EAAUptB,KAAMotB,EAAUzU,KAAMqU,EAAaC,EAAeC,KAGxI,QAAOE,EAAUxT,OAAO6H,WAAY,mBAIpC0L,EACIC,EAAUxT,OAAO8H,QACZoL,EAAarI,YAAY3B,eAAiBhiB,GAAYssB,EAAUptB,MACzEwkB,EAAe8I,GAAkCV,EAAeE,EAAcM,EAAUptB,KAAMotB,EAAUzU,KAAMqU,EAAaC,EAAeE,EAAkBD,GAEpK,MACK,GAAIH,EAAUliC,OAASy2B,GAAckB,MAAO,CAC7C,MAAMhlB,EAAQuvB,EACVvvB,EAAMoc,OAAO4H,SACbgD,EAAe+I,GAA4BX,EAAeE,EAActvB,EAAMwC,KAAMxC,EAAM2a,SAAU6U,EAAaC,EAAeC,KAGhI,QAAO1vB,EAAMoc,OAAO6H,WAAY,mBAEhC0L,EACI3vB,EAAMoc,OAAO8H,QAAUoL,EAAarI,YAAY3B,aACpD0B,EAAegJ,GAA8BZ,EAAeE,EAActvB,EAAMwC,KAAMxC,EAAM2a,SAAU6U,EAAaC,EAAeE,EAAkBD,GAE5J,MACK,GAAIH,EAAUliC,OAASy2B,GAAcU,eAAgB,CACtD,MAAMyL,EAAeV,EAKjBvI,EAJCiJ,EAAa1L,OAIC2L,GAA6Bd,EAAeE,EAAcW,EAAaztB,KAAMgtB,EAAaC,EAAeC,GAHzGS,GAA0Bf,EAAeE,EAAcW,EAAaztB,KAAMytB,EAAa3L,aAAckL,EAAaC,EAAeC,EAKxJ,KACK,IAAIH,EAAUliC,OAASy2B,GAAcc,gBAItC,MAAM,QAAe,2BAA6B2K,EAAUliC,MAH5D25B,EAAeoJ,GAA4BhB,EAAeE,EAAcC,EAAU/sB,KAAMgtB,EAAaE,EAIzG,CACA,MAAM7J,EAAU6J,EAAYlB,aAE5B,OADA6B,GAAgCf,EAActI,EAAcnB,GACrD,CAAEsB,UAAWH,EAAcnB,UACtC,CACA,SAASwK,GAAgCf,EAActI,EAAc0I,GACjE,MAAMtI,EAAYJ,EAAalB,WAC/B,GAAIsB,EAAU/B,qBAAsB,CAChC,MAAMiL,EAAgBlJ,EAAUnF,UAAUtP,cAAgByU,EAAUnF,UAAUzS,UACxE+gB,EAAkB/I,GAA8B8H,IAClDI,EAAYptC,OAAS,IACpBgtC,EAAaxJ,WAAWT,sBACxBiL,IAAkBlJ,EAAUnF,UAAUlN,OAAOwb,KAC7CnJ,EAAUnF,UAAUrP,cAAcmC,OAAOwb,EAAgB3d,iBAC1D8c,EAAY7pC,KAAK41B,GAAY+L,GAA8BR,IAEnE,CACJ,CACA,SAASwJ,GAAgDpB,EAAejI,EAAWsJ,EAAYjB,EAAapT,EAAQsT,GAChH,MAAMgB,EAAevJ,EAAUrB,WAC/B,GAA2D,MAAvDiI,GAA2ByB,EAAaiB,GAExC,OAAOtJ,EAEN,CACD,IAAItH,EAAeoP,EACnB,GAAI3rB,GAAYmtB,GAGZ,IADA,QAAOtJ,EAAUF,YAAY5B,qBAAsB,8DAC/C8B,EAAUF,YAAY3B,aAAc,CAIpC,MAAM2B,EAAcQ,GAA+BN,GAC7C4F,EAAmB9F,aAAuBxO,GAC1CwO,EACAxO,GAAazI,WACb2gB,EAAwB9C,GAAsC2B,EAAazC,GACjFlN,EAAgBuP,EAAc9I,OAAO9J,eAAe2K,EAAUrB,WAAW7D,UAAW0O,EAAuBjB,EAC/G,KACK,CACD,MAAMkB,EAAejD,GAAmC6B,EAAa/H,GAA+BN,IACpGtH,EAAgBuP,EAAc9I,OAAO9J,eAAe2K,EAAUrB,WAAW7D,UAAW2O,EAAclB,EACtG,KAEC,CACD,MAAMxQ,EAAW3c,GAAakuB,GAC9B,GAAiB,cAAbvR,EAA0B,EAC1B,QAAqC,IAA9Bzc,GAAcguB,GAAmB,yDACxC,MAAMI,EAAeH,EAAazO,UAClCgN,EAAa9H,EAAUF,YAAYhF,UAEnC,MAAM6O,EAAkBhD,GAA+C0B,EAAaiB,EAAYI,EAAc5B,GAE1GpP,EADmB,MAAnBiR,EACgB1B,EAAc9I,OAAOlT,eAAeyd,EAAcC,GAIlDJ,EAAazO,SAErC,KACK,CACD,MAAM8O,EAAkBruB,GAAa+tB,GAErC,IAAIO,EACJ,GAAIN,EAAalL,mBAAmBtG,GAAW,CAC3C+P,EAAa9H,EAAUF,YAAYhF,UACnC,MAAMgP,EAAmBnD,GAA+C0B,EAAaiB,EAAYC,EAAazO,UAAWgN,GAErH+B,EADoB,MAApBC,EACgBP,EACXzO,UACA3O,kBAAkB4L,GAClBpL,YAAYid,EAAiBE,GAIlBP,EAAazO,UAAU3O,kBAAkB4L,EAEjE,MAEI8R,EAAgB/C,GAA8BuB,EAAatQ,EAAUiI,EAAUF,aAG/EpH,EADiB,MAAjBmR,EACgB5B,EAAc9I,OAAOxS,YAAY4c,EAAazO,UAAW/C,EAAU8R,EAAeD,EAAiB3U,EAAQsT,GAI3GgB,EAAazO,SAErC,CACJ,CACA,OAAOiF,GAAyBC,EAAWtH,EAAe6Q,EAAarL,sBAAwB/hB,GAAYmtB,GAAarB,EAAc9I,OAAO5J,eACjJ,CACJ,CACA,SAASoT,GAAkCV,EAAeE,EAAcmB,EAAYS,EAAa1B,EAAaC,EAAeE,EAAkBD,GAC3I,MAAMyB,EAAgB7B,EAAarI,YACnC,IAAImK,EACJ,MAAMC,EAAe1B,EACfP,EAAc9I,OACd8I,EAAc9I,OAAO3J,mBAC3B,GAAIrZ,GAAYmtB,GACZW,EAAiBC,EAAa7U,eAAe2U,EAAclP,UAAWiP,EAAa,WAElF,GAAIG,EAAa3U,iBAAmByU,EAAc7L,aAAc,CAEjE,MAAMgM,EAAgBH,EACjBlP,UACAnO,YAAY2c,EAAYS,GAC7BE,EAAiBC,EAAa7U,eAAe2U,EAAclP,UAAWqP,EAAe,KACzF,KACK,CACD,MAAMpS,EAAW3c,GAAakuB,GAC9B,IAAKU,EAAc5L,kBAAkBkL,IACjChuB,GAAcguB,GAAc,EAE5B,OAAOnB,EAEX,MAAMyB,EAAkBruB,GAAa+tB,GAC/B9c,EAAYwd,EAAclP,UAAU3O,kBAAkB4L,GACtDrL,EAAeF,EAAUG,YAAYid,EAAiBG,GAExDE,EADa,cAAblS,EACiBmS,EAAaje,eAAe+d,EAAclP,UAAWpO,GAGrDwd,EAAavd,YAAYqd,EAAclP,UAAW/C,EAAUrL,EAAckd,EAAiBnC,GAA0B,KAE9I,CACA,MAAM5H,EAAeM,GAA0BgI,EAAc8B,EAAgBD,EAAc9L,sBAAwB/hB,GAAYmtB,GAAaY,EAAa3U,gBACnJN,EAAS,IAAIyS,GAA6BW,EAAaxI,EAAcyI,GAC3E,OAAOe,GAAgDpB,EAAepI,EAAcyJ,EAAYjB,EAAapT,EAAQsT,EACzH,CACA,SAASG,GAAgCT,EAAeE,EAAcmB,EAAYS,EAAa1B,EAAaC,EAAeC,GACvH,MAAMgB,EAAepB,EAAaxJ,WAClC,IAAIkB,EAAcnH,EAClB,MAAMzD,EAAS,IAAIyS,GAA6BW,EAAaF,EAAcG,GAC3E,GAAInsB,GAAYmtB,GACZ5Q,EAAgBuP,EAAc9I,OAAO9J,eAAe8S,EAAaxJ,WAAW7D,UAAWiP,EAAaxB,GACpG1I,EAAeE,GAAyBoI,EAAczP,GAAe,EAAMuP,EAAc9I,OAAO5J,oBAE/F,CACD,MAAMwC,EAAW3c,GAAakuB,GAC9B,GAAiB,cAAbvR,EACAW,EAAgBuP,EAAc9I,OAAOlT,eAAekc,EAAaxJ,WAAW7D,UAAWiP,GACvFlK,EAAeE,GAAyBoI,EAAczP,EAAe6Q,EAAarL,qBAAsBqL,EAAapL,kBAEpH,CACD,MAAMyL,EAAkBruB,GAAa+tB,GAC/BnU,EAAWoU,EAAazO,UAAU3O,kBAAkB4L,GAC1D,IAAIhD,EACJ,GAAI5Y,GAAYytB,GAEZ7U,EAAWgV,MAEV,CACD,MAAMvd,EAAYyI,EAAOuS,iBAAiBzP,GAMlChD,EALS,MAAbvI,EACqC,cAAjChR,GAAYouB,IACZpd,EAAUH,SAASvQ,GAAW8tB,IAAkBvhB,UAGrCmE,EAGAA,EAAUG,YAAYid,EAAiBG,GAK3CzY,GAAazI,UAEhC,CACA,GAAKsM,EAASvH,OAAOmH,GAKjB8K,EAAesI,MALa,CAC5B,MAAMiC,EAAenC,EAAc9I,OAAOxS,YAAY4c,EAAazO,UAAW/C,EAAUhD,EAAU6U,EAAiB3U,EAAQsT,GAC3H1I,EAAeE,GAAyBoI,EAAciC,EAAcb,EAAarL,qBAAsB+J,EAAc9I,OAAO5J,eAChI,CAIJ,CACJ,CACA,OAAOsK,CACX,CACA,SAASwK,GAA2BrK,EAAWjI,GAC3C,OAAOiI,EAAUrB,WAAWN,mBAAmBtG,EACnD,CACA,SAAS6Q,GAA4BX,EAAejI,EAAW3kB,EAAM2oB,EAAiBqE,EAAavI,EAAayI,GAO5G,IAAI+B,EAAetK,EAanB,OAZAgE,EAAgBjC,SAAQ,CAAClB,EAAcrU,KACnC,MAAMwY,EAAYhpB,GAAUX,EAAMwlB,GAC9BwJ,GAA2BrK,EAAW5kB,GAAa4pB,MACnDsF,EAAe5B,GAAgCT,EAAeqC,EAActF,EAAWxY,EAAW6b,EAAavI,EAAayI,GAChI,IAEJvE,EAAgBjC,SAAQ,CAAClB,EAAcrU,KACnC,MAAMwY,EAAYhpB,GAAUX,EAAMwlB,GAC7BwJ,GAA2BrK,EAAW5kB,GAAa4pB,MACpDsF,EAAe5B,GAAgCT,EAAeqC,EAActF,EAAWxY,EAAW6b,EAAavI,EAAayI,GAChI,IAEG+B,CACX,CACA,SAASC,GAAwBtC,EAAethB,EAAM9N,GAIlD,OAHAA,EAAMkpB,SAAQ,CAAClB,EAAcrU,KACzB7F,EAAOA,EAAKgG,YAAYkU,EAAcrU,EAAU,IAE7C7F,CACX,CACA,SAASkiB,GAA8BZ,EAAejI,EAAW3kB,EAAM2oB,EAAiBqE,EAAavI,EAAa0I,EAAkBD,GAGhI,GAAIvI,EAAUF,YAAYhF,UAAUzS,YAC/B2X,EAAUF,YAAY5B,qBACvB,OAAO8B,EAQX,IACIwK,EADAF,EAAetK,EAGfwK,EADAruB,GAAYd,GACI2oB,EAGA,IAAIvD,GAAc,MAAMU,QAAQ9lB,EAAM2oB,GAE1D,MAAM8D,EAAa9H,EAAUF,YAAYhF,UAqBzC,OApBA0P,EAAchX,SAASxK,kBAAiB,CAAC+O,EAAUpI,KAC/C,GAAImY,EAAWxb,SAASyL,GAAW,CAC/B,MAAM0S,EAAczK,EAAUF,YACzBhF,UACA3O,kBAAkB4L,GACjBhD,EAAWwV,GAAwBtC,EAAewC,EAAa9a,GACrE2a,EAAe3B,GAAkCV,EAAeqC,EAAc,IAAI1vB,GAAKmd,GAAWhD,EAAUsT,EAAavI,EAAa0I,EAAkBD,EAC5J,KAEJiC,EAAchX,SAASxK,kBAAiB,CAAC+O,EAAU2S,KAC/C,MAAMC,GAAsB3K,EAAUF,YAAYzB,mBAAmBtG,IACxC,OAAzB2S,EAAe5yC,MACnB,IAAKgwC,EAAWxb,SAASyL,KAAc4S,EAAoB,CACvD,MAAMF,EAAczK,EAAUF,YACzBhF,UACA3O,kBAAkB4L,GACjBhD,EAAWwV,GAAwBtC,EAAewC,EAAaC,GACrEJ,EAAe3B,GAAkCV,EAAeqC,EAAc,IAAI1vB,GAAKmd,GAAWhD,EAAUsT,EAAavI,EAAa0I,EAAkBD,EAC5J,KAEG+B,CACX,CACA,SAAStB,GAA0Bf,EAAejI,EAAW4K,EAASzN,EAAckL,EAAaC,EAAeC,GAC5G,GAAwD,MAApD3B,GAA2ByB,EAAauC,GACxC,OAAO5K,EAGX,MAAMwI,EAAmBxI,EAAUF,YAAY3B,aAGzC2B,EAAcE,EAAUF,YAC9B,GAA0B,MAAtB3C,EAAarlC,MAAe,CAE5B,GAAKqkB,GAAYyuB,IAAY9K,EAAY5B,sBACrC4B,EAAY1B,kBAAkBwM,GAC9B,OAAOjC,GAAkCV,EAAejI,EAAW4K,EAAS9K,EAAYhF,UAAUzO,SAASue,GAAUvC,EAAaC,EAAeE,EAAkBD,GAElK,GAAIpsB,GAAYyuB,GAAU,CAG3B,IAAI5G,EAAkB,IAAIvD,GAAc,MAIxC,OAHAX,EAAYhF,UAAUhO,aAAahF,IAAW,CAACruB,EAAMktB,KACjDqd,EAAkBA,EAAgBhrC,IAAI,IAAI4hB,GAAKnhB,GAAOktB,EAAK,IAExDkiB,GAA8BZ,EAAejI,EAAW4K,EAAS5G,EAAiBqE,EAAaC,EAAeE,EAAkBD,EAC3I,CAEI,OAAOvI,CAEf,CACK,CAED,IAAIgE,EAAkB,IAAIvD,GAAc,MAOxC,OANAtD,EAAa4E,SAAQ,CAAC8I,EAAW/yC,KAC7B,MAAMgzC,EAAkB9uB,GAAU4uB,EAASC,GACvC/K,EAAY1B,kBAAkB0M,KAC9B9G,EAAkBA,EAAgBhrC,IAAI6xC,EAAW/K,EAAYhF,UAAUzO,SAASye,IACpF,IAEGjC,GAA8BZ,EAAejI,EAAW4K,EAAS5G,EAAiBqE,EAAaC,EAAeE,EAAkBD,EAC3I,CACJ,CACA,SAASU,GAA4BhB,EAAejI,EAAW3kB,EAAMgtB,EAAaE,GAC9E,MAAMwC,EAAgB/K,EAAUF,YAC1BD,EAAeM,GAA0BH,EAAW+K,EAAcjQ,UAAWiQ,EAAc7M,sBAAwB/hB,GAAYd,GAAO0vB,EAAc5M,cAC1J,OAAOkL,GAAgDpB,EAAepI,EAAcxkB,EAAMgtB,EAAaZ,GAA0Bc,EACrI,CACA,SAASQ,GAA6Bd,EAAejI,EAAW3kB,EAAMgtB,EAAajD,EAAqBmD,GACpG,IAAIrI,EACJ,GAAqD,MAAjD0G,GAA2ByB,EAAahtB,GACxC,OAAO2kB,EAEN,CACD,MAAM/K,EAAS,IAAIyS,GAA6BW,EAAarI,EAAWoF,GAClElN,EAAgB8H,EAAUrB,WAAW7D,UAC3C,IAAIpC,EACJ,GAAIvc,GAAYd,IAAgC,cAAvBD,GAAaC,GAAuB,CACzD,IAAI6L,EACJ,GAAI8Y,EAAUF,YAAY5B,qBACtBhX,EAAUsf,GAAmC6B,EAAa/H,GAA+BN,QAExF,CACD,MAAMgL,EAAiBhL,EAAUF,YAAYhF,WAC7C,QAAOkQ,aAA0B1Z,GAAc,iDAC/CpK,EAAUwf,GAAsC2B,EAAa2C,EACjE,CAEAtS,EAAgBuP,EAAc9I,OAAO9J,eAAe6C,EAAehR,EAASqhB,EAChF,KACK,CACD,MAAMxQ,EAAW3c,GAAaC,GAC9B,IAAI0Z,EAAW+R,GAA8BuB,EAAatQ,EAAUiI,EAAUF,aAC9D,MAAZ/K,GACAiL,EAAUF,YAAYzB,mBAAmBtG,KACzChD,EAAWmD,EAAc/L,kBAAkB4L,IAG3CW,EADY,MAAZ3D,EACgBkT,EAAc9I,OAAOxS,YAAYuL,EAAeH,EAAUhD,EAAUxZ,GAAaF,GAAO4Z,EAAQsT,GAE3GvI,EAAUrB,WAAW7D,UAAUxO,SAASyL,GAE7BkQ,EAAc9I,OAAOxS,YAAYuL,EAAeH,EAAUzG,GAAazI,WAAYtN,GAAaF,GAAO4Z,EAAQsT,GAG/GrQ,EAEhBQ,EAAcrQ,WACd2X,EAAUF,YAAY5B,uBAEtBgC,EAAWsG,GAAmC6B,EAAa/H,GAA+BN,IACtFE,EAAS1U,eACTkN,EAAgBuP,EAAc9I,OAAO9J,eAAeqD,EAAewH,EAAUqI,IAGzF,CAIA,OAHArI,EACIF,EAAUF,YAAY5B,sBACyC,MAA3D0I,GAA2ByB,EAAaltB,MACzC4kB,GAAyBC,EAAWtH,EAAewH,EAAU+H,EAAc9I,OAAO5J,eAC7F,CACJ;;;;;;;;;;;;;;;;GA2BA,MAAM0V,GACF,WAAApyC,CAAY0lC,EAAQ2M,GAChBzzC,KAAK8mC,OAASA,EACd9mC,KAAK0zC,oBAAsB,GAC3B,MAAMhlC,EAAS1O,KAAK8mC,OAAOvc,aACrBopB,EAAc,IAAIvW,GAAc1uB,EAAO0c,YACvCsc,EAAS1F,GAAyBtzB,GACxC1O,KAAK4zC,WAAatD,GAAiB5I,GACnC,MAAMmM,EAAqBJ,EAAiBpL,YACtCyL,EAAoBL,EAAiBvM,WAErCyB,EAAagL,EAAY/V,eAAe/D,GAAazI,WAAYyiB,EAAmBxQ,UAAW,MAC/FmF,EAAYd,EAAO9J,eAAe/D,GAAazI,WAAY0iB,EAAkBzQ,UAAW,MACxFmP,EAAiB,IAAInM,GAAUsC,EAAYkL,EAAmBpN,qBAAsBkN,EAAY7V,gBAChGmD,EAAgB,IAAIoF,GAAUmC,EAAWsL,EAAkBrN,qBAAsBiB,EAAO5J,gBAC9F99B,KAAKmwC,WAAa/H,GAAanH,EAAeuR,GAC9CxyC,KAAK+zC,gBAAkB,IAAIlN,GAAe7mC,KAAK8mC,OACnD,CACA,SAAIr9B,GACA,OAAOzJ,KAAK8mC,MAChB,EAEJ,SAASkN,GAAmBC,GACxB,OAAOA,EAAK9D,WAAW9H,YAAYhF,SACvC,CAIA,SAAS6Q,GAA2BD,EAAMrwB,GACtC,MAAMuwB,EAAQtL,GAA+BoL,EAAK9D,YAClD,OAAIgE,IAGIF,EAAKxqC,MAAM8gB,aAAaE,iBACtB/F,GAAYd,KACTuwB,EAAMzf,kBAAkB/Q,GAAaC,IAAOgN,WAC1CujB,EAAMvf,SAAShR,GAGvB,IACX,CACA,SAASwwB,GAAYH,GACjB,OAA2C,IAApCA,EAAKP,oBAAoBhwC,MACpC,CACA,SAAS2wC,GAAyBJ,EAAMK,GACpCL,EAAKP,oBAAoBzsC,KAAKqtC,EAClC,CAMA,SAASC,GAA4BN,EAAMK,EAAmBE,GAC1D,MAAMC,EAAe,GACrB,GAAID,EAAa,EACb,QAA4B,MAArBF,EAA2B,mDAClC,MAAM1wB,EAAOqwB,EAAKxqC,MAAME,MACxBsqC,EAAKP,oBAAoBzP,SAAQ6D,IAC7B,MAAM4M,EAAa5M,EAAa6M,kBAAkBH,EAAa5wB,GAC3D8wB,GACAD,EAAaxtC,KAAKytC,EACtB,GAER,CACA,GAAIJ,EAAmB,CACnB,IAAIM,EAAY,GAChB,IAAK,IAAInxC,EAAI,EAAGA,EAAIwwC,EAAKP,oBAAoBhwC,SAAUD,EAAG,CACtD,MAAMoxC,EAAWZ,EAAKP,oBAAoBjwC,GAC1C,GAAKoxC,EAASjW,QAAQ0V,IAGjB,GAAIA,EAAkBQ,iBAAkB,CAEzCF,EAAYA,EAAUG,OAAOd,EAAKP,oBAAoBtvB,MAAM3gB,EAAI,IAChE,KACJ,OANImxC,EAAU3tC,KAAK4tC,EAOvB,CACAZ,EAAKP,oBAAsBkB,CAC/B,MAEIX,EAAKP,oBAAsB,GAE/B,OAAOe,CACX,CAIA,SAASO,GAAmBf,EAAMtD,EAAWC,EAAajD,GAClDgD,EAAUliC,OAASy2B,GAAckB,OACJ,OAA7BuK,EAAUnT,OAAOpT,WACjB,QAAOye,GAA+BoL,EAAK9D,YAAa,8DACxD,QAAOvH,GAA8BqL,EAAK9D,YAAa,4DAE3D,MAAMO,EAAeuD,EAAK9D,WACpBlwC,EAASwwC,GAA4BwD,EAAKL,WAAYlD,EAAcC,EAAWC,EAAajD,GAKlG,OAJA4C,GAA2B0D,EAAKL,WAAY3zC,EAAOsoC,YACnD,QAAOtoC,EAAOsoC,UAAUF,YAAY5B,uBAC/BiK,EAAarI,YAAY5B,qBAAsB,2DACpDwN,EAAK9D,WAAalwC,EAAOsoC,UAClB0M,GAA8BhB,EAAMh0C,EAAOgnC,QAAShnC,EAAOsoC,UAAUrB,WAAW7D,UAAW,KACtG,CACA,SAAS6R,GAAqBjB,EAAMnM,GAChC,MAAMU,EAAYyL,EAAK9D,WAAWjJ,WAC5BiO,EAAiB,GACvB,IAAK3M,EAAUnF,UAAUtP,aAAc,CACnC,MAAMqhB,EAAY5M,EAAUnF,UAC5B+R,EAAU/f,aAAaqB,IAAgB,CAACl1B,EAAKuzB,KACzCogB,EAAeluC,KAAK81B,GAAiBv7B,EAAKuzB,GAAW,GAE7D,CAIA,OAHIyT,EAAU/B,sBACV0O,EAAeluC,KAAK41B,GAAY2L,EAAUnF,YAEvC4R,GAA8BhB,EAAMkB,EAAgB3M,EAAUnF,UAAWyE,EACpF,CACA,SAASmN,GAA8BhB,EAAMhN,EAASC,EAAYoN,GAC9D,MAAM9M,EAAgB8M,EAChB,CAACA,GACDL,EAAKP,oBACX,OAAO3M,GAAuCkN,EAAKF,gBAAiB9M,EAASC,EAAYM,EAC7F;;;;;;;;;;;;;;;;GAkBA,IAAI6N,GAgNAC,GArMJ,MAAMC,GACF,WAAAn0C,GAOIpB,KAAKw1C,MAAQ,IAAI3tB,GACrB,EAEJ,SAAS4tB,GAAiCzlB,IACtC,SAAQqlB,GAAwB,mDAChCA,GAAyBrlB,CAC7B,CACA,SAAS0lB,KAEL,OADA,QAAOL,GAAwB,oCACxBA,EACX,CACA,SAASM,GAAiBC,GACtB,OAAgC,IAAzBA,EAAUJ,MAAM9+B,IAC3B,CACA,SAASm/B,GAAwBD,EAAWjF,EAAWC,EAAakF,GAChE,MAAM1rB,EAAUumB,EAAUnT,OAAOpT,QACjC,GAAgB,OAAZA,EAAkB,CAClB,MAAM6pB,EAAO2B,EAAUJ,MAAM5zC,IAAIwoB,GAEjC,OADA,QAAe,MAAR6pB,EAAc,gDACde,GAAmBf,EAAMtD,EAAWC,EAAakF,EAC5D,CACK,CACD,IAAI1O,EAAS,GACb,IAAK,MAAM6M,KAAQ2B,EAAUJ,MAAMzmB,SAC/BqY,EAASA,EAAO2N,OAAOC,GAAmBf,EAAMtD,EAAWC,EAAakF,IAE5E,OAAO1O,CACX,CACJ,CAUA,SAAS2O,GAAiBH,EAAWnsC,EAAOmnC,EAAavI,EAAa2N,GAClE,MAAM5rB,EAAU3gB,EAAM4gB,iBAChB4pB,EAAO2B,EAAUJ,MAAM5zC,IAAIwoB,GACjC,IAAK6pB,EAAM,CAEP,IAAI/M,EAAa6H,GAAmC6B,EAAaoF,EAAsB3N,EAAc,MACjG4N,GAAqB,EACrB/O,EACA+O,GAAqB,EAEhB5N,aAAuBxO,IAC5BqN,EAAa+H,GAAsC2B,EAAavI,GAChE4N,GAAqB,IAGrB/O,EAAarN,GAAazI,WAC1B6kB,GAAqB,GAEzB,MAAM1N,EAAYH,GAAa,IAAI/B,GAAUa,EAAY+O,GAAoB,GAAQ,IAAI5P,GAAUgC,EAAa2N,GAAqB,IACrI,OAAO,IAAIxC,GAAK/pC,EAAO8+B,EAC3B,CACA,OAAO0L,CACX,CAWA,SAASiC,GAA8BN,EAAWnsC,EAAO6qC,EAAmB1D,EAAavI,EAAa2N,GAClG,MAAM/B,EAAO8B,GAAiBH,EAAWnsC,EAAOmnC,EAAavI,EAAa2N,GAM1E,OALKJ,EAAUJ,MAAMlrB,IAAI7gB,EAAM4gB,mBAC3BurB,EAAUJ,MAAMj0C,IAAIkI,EAAM4gB,iBAAkB4pB,GAGhDI,GAAyBJ,EAAMK,GACxBY,GAAqBjB,EAAMK,EACtC,CAWA,SAAS6B,GAAiCP,EAAWnsC,EAAO6qC,EAAmBE,GAC3E,MAAMpqB,EAAU3gB,EAAM4gB,iBAChB+rB,EAAU,GAChB,IAAI3B,EAAe,GACnB,MAAM4B,EAAkBC,GAAyBV,GACjD,GAAgB,YAAZxrB,EAEA,IAAK,MAAOmsB,EAAatC,KAAS2B,EAAUJ,MAAMgB,UAC9C/B,EAAeA,EAAaM,OAAOR,GAA4BN,EAAMK,EAAmBE,IACpFJ,GAAYH,KACZ2B,EAAUJ,MAAM99B,OAAO6+B,GAElBtC,EAAKxqC,MAAM8gB,aAAaE,gBACzB2rB,EAAQnvC,KAAKgtC,EAAKxqC,YAK7B,CAED,MAAMwqC,EAAO2B,EAAUJ,MAAM5zC,IAAIwoB,GAC7B6pB,IACAQ,EAAeA,EAAaM,OAAOR,GAA4BN,EAAMK,EAAmBE,IACpFJ,GAAYH,KACZ2B,EAAUJ,MAAM99B,OAAO0S,GAElB6pB,EAAKxqC,MAAM8gB,aAAaE,gBACzB2rB,EAAQnvC,KAAKgtC,EAAKxqC,QAIlC,CAKA,OAJI4sC,IAAoBC,GAAyBV,IAE7CQ,EAAQnvC,KAAK,IAAKyuC,KAAL,CAAyCjsC,EAAMgtC,MAAOhtC,EAAME,QAEtE,CAAEysC,UAAShP,OAAQqN,EAC9B,CACA,SAASiC,GAAuBd,GAC5B,MAAM31C,EAAS,GACf,IAAK,MAAMg0C,KAAQ2B,EAAUJ,MAAMzmB,SAC1BklB,EAAKxqC,MAAM8gB,aAAaE,gBACzBxqB,EAAOgH,KAAKgtC,GAGpB,OAAOh0C,CACX,CAKA,SAAS02C,GAAgCf,EAAWhyB,GAChD,IAAIykB,EAAc,KAClB,IAAK,MAAM4L,KAAQ2B,EAAUJ,MAAMzmB,SAC/BsZ,EAAcA,GAAe6L,GAA2BD,EAAMrwB,GAElE,OAAOykB,CACX,CACA,SAASuO,GAAsBhB,EAAWnsC,GACtC,MAAMiF,EAASjF,EAAM8gB,aACrB,GAAI7b,EAAO+b,eACP,OAAOosB,GAAyBjB,GAE/B,CACD,MAAMxrB,EAAU3gB,EAAM4gB,iBACtB,OAAOurB,EAAUJ,MAAM5zC,IAAIwoB,EAC/B,CACJ,CACA,SAAS0sB,GAA4BlB,EAAWnsC,GAC5C,OAAkD,MAA3CmtC,GAAsBhB,EAAWnsC,EAC5C,CACA,SAAS6sC,GAAyBV,GAC9B,OAA8C,MAAvCiB,GAAyBjB,EACpC,CACA,SAASiB,GAAyBjB,GAC9B,IAAK,MAAM3B,KAAQ2B,EAAUJ,MAAMzmB,SAC/B,GAAIklB,EAAKxqC,MAAM8gB,aAAaE,eACxB,OAAOwpB,EAGf,OAAO,IACX;;;;;;;;;;;;;;;;GAmBA,SAAS8C,GAAgC/mB,IACrC,SAAQslB,GAAsB,mDAC9BA,GAAuBtlB,CAC3B,CACA,SAASgnB,KAEL,OADA,QAAO1B,GAAsB,oCACtBA,EACX,CAIA,IAAI2B,GAAwB,EAsB5B,MAAMC,GAKF,WAAA91C,CAAY+1C,GACRn3C,KAAKm3C,gBAAkBA,EAIvBn3C,KAAKo3C,eAAiB,IAAIpO,GAAc,MAIxChpC,KAAKq3C,kBAAoBrM,KACzBhrC,KAAKs3C,cAAgB,IAAIzvB,IACzB7nB,KAAKu3C,cAAgB,IAAI1vB,GAC7B,EAOJ,SAAS2vB,GAA2BC,EAAU7zB,EAAM8zB,EAASxL,EAASvlB,GAGlE,OADAslB,GAAsBwL,EAASJ,kBAAmBzzB,EAAM8zB,EAASxL,EAASvlB,GACrEA,EAIMgxB,GAAoCF,EAAU,IAAIxR,GAAUd,KAA0BvhB,EAAM8zB,IAH5F,EAKf,CAMA,SAASE,GAAuBH,EAAU7zB,EAAM2oB,EAAiBL,GAE7DI,GAAkBmL,EAASJ,kBAAmBzzB,EAAM2oB,EAAiBL,GACrE,MAAM2L,EAAa7O,GAAcC,WAAWsD,GAC5C,OAAOoL,GAAoCF,EAAU,IAAItR,GAAMhB,KAA0BvhB,EAAMi0B,GACnG,CAOA,SAASC,GAAqBL,EAAUvL,EAASvG,GAAS,GACtD,MAAM1vB,EAAQu2B,GAAkBiL,EAASJ,kBAAmBnL,GACtD6L,EAAmBrL,GAAqB+K,EAASJ,kBAAmBnL,GAC1E,GAAK6L,EAGA,CACD,IAAIrS,EAAe,IAAIsD,GAAc,MAUrC,OATkB,MAAd/yB,EAAMsmB,KAENmJ,EAAeA,EAAankC,IAAImiB,MAAgB,GAGhDjc,EAAKwO,EAAM8lB,UAAW9a,IAClBykB,EAAeA,EAAankC,IAAI,IAAI4hB,GAAKlC,IAAa,EAAK,IAG5D02B,GAAoCF,EAAU,IAAIhS,GAAaxvB,EAAM2N,KAAM8hB,EAAcC,GACpG,CAdI,MAAO,EAef,CAMA,SAASqS,GAA6BP,EAAU7zB,EAAM8zB,GAClD,OAAOC,GAAoCF,EAAU,IAAIxR,GAAUV,KAA4B3hB,EAAM8zB,GACzG,CAMA,SAASO,GAAyBR,EAAU7zB,EAAM2oB,GAC9C,MAAMsL,EAAa7O,GAAcC,WAAWsD,GAC5C,OAAOoL,GAAoCF,EAAU,IAAItR,GAAMZ,KAA4B3hB,EAAMi0B,GACrG,CAMA,SAASK,GAA4BT,EAAU7zB,GAC3C,OAAO+zB,GAAoCF,EAAU,IAAI1R,GAAeR,KAA4B3hB,GACxG,CAMA,SAASu0B,GAAkCV,EAAU7zB,EAAMuG,GACvD,MAAMiuB,EAAWC,GAAwBZ,EAAUttB,GACnD,GAAIiuB,EAAU,CACV,MAAM9uB,EAAIgvB,GAAuBF,GAC3BG,EAAYjvB,EAAE1F,KAAMwG,EAAUd,EAAEc,QAChCgf,EAAezkB,GAAgB4zB,EAAW30B,GAC1C40B,EAAK,IAAIzS,GAAeP,GAAoCpb,GAAUgf,GAC5E,OAAOqP,GAA8BhB,EAAUc,EAAWC,EAC9D,CAGI,MAAO,EAEf,CAaA,SAASE,GAAgCjB,EAAUhuC,EAAO6qC,EAAmBE,EAAamE,GAAoB,GAE1G,MAAM/0B,EAAOna,EAAME,MACbivC,EAAiBnB,EAASL,eAAex1C,IAAIgiB,GACnD,IAAI6wB,EAAe,GAInB,GAAImE,IAC4B,YAA3BnvC,EAAM4gB,kBACHysB,GAA4B8B,EAAgBnvC,IAAS,CACzD,MAAMovC,EAAmB1C,GAAiCyC,EAAgBnvC,EAAO6qC,EAAmBE,GAChGmB,GAAiBiD,KACjBnB,EAASL,eAAiBK,EAASL,eAAer1C,OAAO6hB,IAE7D,MAAMwyB,EAAUyC,EAAiBzC,QAEjC,GADA3B,EAAeoE,EAAiBzR,QAC3BuR,EAAmB,CAQpB,MAAMG,GAAmB,IACrB1C,EAAQzJ,WAAUljC,GACPA,EAAM8gB,aAAaE,iBAE5BsuB,EAAUtB,EAASL,eAAepN,WAAWpmB,GAAM,CAACwlB,EAAc4P,IAAoB1C,GAAyB0C,KACrH,GAAIF,IAAoBC,EAAS,CAC7B,MAAMjT,EAAU2R,EAASL,eAAetR,QAAQliB,GAGhD,IAAKkiB,EAAQlV,UAAW,CAEpB,MAAMqoB,EAAWC,GAAwCpT,GAEzD,IAAK,IAAIriC,EAAI,EAAGA,EAAIw1C,EAASv1C,SAAUD,EAAG,CACtC,MAAMwwC,EAAOgF,EAASx1C,GAAI01C,EAAWlF,EAAKxqC,MACpCgC,EAAW2tC,GAA+B3B,EAAUxD,GAC1DwD,EAASN,gBAAgBkC,eAAeC,GAA2BH,GAAWI,GAAoB9B,EAAU0B,GAAW1tC,EAASkf,OAAQlf,EAASyV,WACrJ,CACJ,CAEJ,CAIA,IAAK63B,GAAW3C,EAAQ1yC,OAAS,IAAM8wC,EAGnC,GAAIsE,EAAiB,CAEjB,MAAMU,EAAa,KACnB/B,EAASN,gBAAgBsC,cAAcH,GAA2B7vC,GAAQ+vC,EAC9E,MAEIpD,EAAQnS,SAASyV,IACb,MAAMC,EAAclC,EAASF,cAAc31C,IAAIg4C,GAAsBF,IACrEjC,EAASN,gBAAgBsC,cAAcH,GAA2BI,GAAgBC,EAAY,GAI9G,CAEAE,GAAoBpC,EAAUrB,EAClC,CACA,OAAO3B,CACX,CAMA,SAASqF,GAAkCrC,EAAU7zB,EAAM2Y,EAAMpS,GAC7D,MAAMiuB,EAAWC,GAAwBZ,EAAUttB,GACnD,GAAgB,MAAZiuB,EAAkB,CAClB,MAAM9uB,EAAIgvB,GAAuBF,GAC3BG,EAAYjvB,EAAE1F,KAAMwG,EAAUd,EAAEc,QAChCgf,EAAezkB,GAAgB4zB,EAAW30B,GAC1C40B,EAAK,IAAIvS,GAAUT,GAAoCpb,GAAUgf,EAAc7M,GACrF,OAAOkc,GAA8BhB,EAAUc,EAAWC,EAC9D,CAGI,MAAO,EAEf,CAMA,SAASuB,GAA8BtC,EAAU7zB,EAAM2oB,EAAiBpiB,GACpE,MAAMiuB,EAAWC,GAAwBZ,EAAUttB,GACnD,GAAIiuB,EAAU,CACV,MAAM9uB,EAAIgvB,GAAuBF,GAC3BG,EAAYjvB,EAAE1F,KAAMwG,EAAUd,EAAEc,QAChCgf,EAAezkB,GAAgB4zB,EAAW30B,GAC1Ci0B,EAAa7O,GAAcC,WAAWsD,GACtCiM,EAAK,IAAIrS,GAAMX,GAAoCpb,GAAUgf,EAAcyO,GACjF,OAAOY,GAA8BhB,EAAUc,EAAWC,EAC9D,CAGI,MAAO,EAEf,CAMA,SAASwB,GAA6BvC,EAAUhuC,EAAO6qC,EAAmB2F,GAAoB,GAC1F,MAAMr2B,EAAOna,EAAME,MACnB,IAAI0+B,EAAc,KACd6R,GAA2B,EAG/BzC,EAASL,eAAejN,cAAcvmB,GAAM,CAACu2B,EAAiBC,KAC1D,MAAMhR,EAAezkB,GAAgBw1B,EAAiBv2B,GACtDykB,EACIA,GAAesO,GAAgCyD,EAAIhR,GACvD8Q,EACIA,GAA4B5D,GAAyB8D,EAAG,IAEhE,IAWIpE,EAXAJ,EAAY6B,EAASL,eAAex1C,IAAIgiB,GAY5C,GAXKgyB,GAKDsE,EACIA,GAA4B5D,GAAyBV,GACzDvN,EACIA,GAAesO,GAAgCf,EAAWlyB,QAP9DkyB,EAAY,IAAIL,GAChBkC,EAASL,eAAiBK,EAASL,eAAe71C,IAAIqiB,EAAMgyB,IAS7C,MAAfvN,EACA2N,GAAsB,MAErB,CACDA,GAAsB,EACtB3N,EAAcxO,GAAazI,WAC3B,MAAM0U,EAAU2R,EAASL,eAAetR,QAAQliB,GAChDkiB,EAAQ0E,cAAa,CAAC7V,EAAW0lB,KAC7B,MAAMxJ,EAAgB8F,GAAgC0D,EAAgB32B,MAClEmtB,IACAxI,EAAcA,EAAYrT,qBAAqBL,EAAWkc,GAC9D,GAER,CACA,MAAMyJ,EAAoBxD,GAA4BlB,EAAWnsC,GACjE,IAAK6wC,IAAsB7wC,EAAM8gB,aAAaE,eAAgB,CAE1D,MAAM2tB,EAAWwB,GAAsBnwC,IACvC,SAAQguC,EAASF,cAAcjtB,IAAI8tB,GAAW,0CAC9C,MAAMjuB,EAAMowB,KACZ9C,EAASF,cAAch2C,IAAI62C,EAAUjuB,GACrCstB,EAASH,cAAc/1C,IAAI4oB,EAAKiuB,EACpC,CACA,MAAMxH,EAAc7E,GAAqB0L,EAASJ,kBAAmBzzB,GACrE,IAAIwjB,EAAS8O,GAA8BN,EAAWnsC,EAAO6qC,EAAmB1D,EAAavI,EAAa2N,GAC1G,IAAKsE,IAAsBJ,IAA6BD,EAAmB,CACvE,MAAMhG,EAAO2C,GAAsBhB,EAAWnsC,GAC9C29B,EAASA,EAAO2N,OAAOyF,GAAuB/C,EAAUhuC,EAAOwqC,GACnE,CACA,OAAO7M,CACX,CAYA,SAASqT,GAA+BhD,EAAU7zB,EAAMgqB,GACpD,MAAM8M,GAAoB,EACpB7O,EAAY4L,EAASJ,kBACrBhP,EAAcoP,EAASL,eAAepN,WAAWpmB,GAAM,CAACkmB,EAAW8L,KACrE,MAAMxM,EAAezkB,GAAgBmlB,EAAWlmB,GAC1CykB,EAAcsO,GAAgCf,EAAWxM,GAC/D,GAAIf,EACA,OAAOA,CACX,IAEJ,OAAOoF,GAAgC5B,EAAWjoB,EAAMykB,EAAauF,EAAmB8M,EAC5F,CAyCA,SAAS/C,GAAoCF,EAAU9G,GACnD,OAAOgK,GAA8BhK,EAAW8G,EAASL,eACxC,KAAMrL,GAAqB0L,EAASJ,kBAAmB3zB,MAC5E,CAIA,SAASi3B,GAA8BhK,EAAWiK,EAAevS,EAAauI,GAC1E,GAAIlsB,GAAYisB,EAAU/sB,MACtB,OAAOi3B,GAAyClK,EAAWiK,EAAevS,EAAauI,GAEtF,CACD,MAAMgF,EAAYgF,EAAch5C,IAAI8hB,MAEjB,MAAf2kB,GAAoC,MAAbuN,IACvBvN,EAAcsO,GAAgCf,EAAWlyB,OAE7D,IAAI0jB,EAAS,GACb,MAAMzS,EAAYhR,GAAagtB,EAAU/sB,MACnCk3B,EAAiBnK,EAAU9K,kBAAkBlR,GAC7CuD,EAAY0iB,EAAc7e,SAASn6B,IAAI+yB,GAC7C,GAAIuD,GAAa4iB,EAAgB,CAC7B,MAAMC,EAAmB1S,EACnBA,EAAY3T,kBAAkBC,GAC9B,KACAqmB,EAAmBzL,GAAkBqB,EAAajc,GACxDyS,EAASA,EAAO2N,OAAO4F,GAA8BG,EAAgB5iB,EAAW6iB,EAAkBC,GACtG,CAIA,OAHIpF,IACAxO,EAASA,EAAO2N,OAAOc,GAAwBD,EAAWjF,EAAWC,EAAavI,KAE/EjB,CACX,CACJ,CAIA,SAASyT,GAAyClK,EAAWiK,EAAevS,EAAauI,GACrF,MAAMgF,EAAYgF,EAAch5C,IAAI8hB,MAEjB,MAAf2kB,GAAoC,MAAbuN,IACvBvN,EAAcsO,GAAgCf,EAAWlyB,OAE7D,IAAI0jB,EAAS,GAcb,OAbAwT,EAAc7e,SAASxK,kBAAiB,CAACoD,EAAWuD,KAChD,MAAM6iB,EAAmB1S,EACnBA,EAAY3T,kBAAkBC,GAC9B,KACAqmB,EAAmBzL,GAAkBqB,EAAajc,GAClDmmB,EAAiBnK,EAAU9K,kBAAkBlR,GAC/CmmB,IACA1T,EAASA,EAAO2N,OAAO8F,GAAyCC,EAAgB5iB,EAAW6iB,EAAkBC,IACjH,IAEApF,IACAxO,EAASA,EAAO2N,OAAOc,GAAwBD,EAAWjF,EAAWC,EAAavI,KAE/EjB,CACX,CACA,SAASgS,GAA+B3B,EAAUxD,GAC9C,MAAMxqC,EAAQwqC,EAAKxqC,MACb0gB,EAAMovB,GAAoB9B,EAAUhuC,GAC1C,MAAO,CACHkhB,OAAQ,KACJ,MAAMwpB,EAAQH,GAAmBC,IAASpa,GAAazI,WACvD,OAAO+iB,EAAMhzB,MAAM,EAEvBD,WAAa4J,IACT,GAAe,OAAXA,EACA,OAAIX,EACOguB,GAAkCV,EAAUhuC,EAAME,MAAOwgB,GAGzD+tB,GAA4BT,EAAUhuC,EAAME,OAGtD,CAGD,MAAMjF,EAAQ6E,EAAmBuhB,EAAQrhB,GACzC,OAAOivC,GAAgCjB,EAAUhuC,EAC3B,KAAM/E,EAChC,GAGZ,CAIA,SAAS60C,GAAoB9B,EAAUhuC,GACnC,MAAM2uC,EAAWwB,GAAsBnwC,GACvC,OAAOguC,EAASF,cAAc31C,IAAIw2C,EACtC,CAIA,SAASwB,GAAsBnwC,GAC3B,OAAOA,EAAME,MAAM1H,WAAa,IAAMwH,EAAM4gB,gBAChD,CAIA,SAASguB,GAAwBZ,EAAUttB,GACvC,OAAOstB,EAASH,cAAc11C,IAAIuoB,EACtC,CAIA,SAASmuB,GAAuBF,GAC5B,MAAM6C,EAAa7C,EAASnzC,QAAQ,KAEpC,OADA,SAAuB,IAAhBg2C,GAAqBA,EAAa7C,EAAS10C,OAAS,EAAG,iBACvD,CACH0mB,QAASguB,EAASrvC,OAAOkyC,EAAa,GACtCr3B,KAAM,IAAIT,GAAKi1B,EAASrvC,OAAO,EAAGkyC,IAE1C,CAIA,SAASxC,GAA8BhB,EAAUc,EAAW5H,GACxD,MAAMiF,EAAY6B,EAASL,eAAex1C,IAAI22C,IAC9C,QAAO3C,EAAW,wDAClB,MAAMhF,EAAc7E,GAAqB0L,EAASJ,kBAAmBkB,GACrE,OAAO1C,GAAwBD,EAAWjF,EAAWC,EAAa,KACtE,CAKA,SAASsI,GAAwCpT,GAC7C,OAAOA,EAAQ8D,MAAK,CAACR,EAAc8R,EAAqBC,KACpD,GAAID,GAAuB5E,GAAyB4E,GAAsB,CACtE,MAAME,EAAevE,GAAyBqE,GAC9C,MAAO,CAACE,EACZ,CACK,CAED,IAAI5F,EAAQ,GAOZ,OANI0F,IACA1F,EAAQkB,GAAuBwE,IAEnCzzC,EAAK0zC,GAAU,CAACE,EAAMC,KAClB9F,EAAQA,EAAMT,OAAOuG,EAAW,IAE7B9F,CACX,IAER,CAMA,SAAS8D,GAA2B7vC,GAChC,OAAIA,EAAM8gB,aAAaE,iBAAmBhhB,EAAM8gB,aAAaC,YAIlD,IAAKwsB,KAAL,CAAwCvtC,EAAMgtC,MAAOhtC,EAAME,OAG3DF,CAEf,CACA,SAASowC,GAAoBpC,EAAU3oB,GACnC,IAAK,IAAItJ,EAAI,EAAGA,EAAIsJ,EAAQprB,SAAU8hB,EAAG,CACrC,MAAM+1B,EAAezsB,EAAQtJ,GAC7B,IAAK+1B,EAAahxB,aAAaE,eAAgB,CAE3C,MAAM+wB,EAAkB5B,GAAsB2B,GACxCE,EAAkBhE,EAASF,cAAc31C,IAAI45C,GACnD/D,EAASF,cAAc7/B,OAAO8jC,GAC9B/D,EAASH,cAAc5/B,OAAO+jC,EAClC,CACJ,CACJ,CAIA,SAASlB,KACL,OAAOtD,IACX,CAMA,SAASuD,GAAuB/C,EAAUhuC,EAAOwqC,GAC7C,MAAMrwB,EAAOna,EAAME,MACbwgB,EAAMovB,GAAoB9B,EAAUhuC,GACpCgC,EAAW2tC,GAA+B3B,EAAUxD,GACpD7M,EAASqQ,EAASN,gBAAgBkC,eAAeC,GAA2B7vC,GAAQ0gB,EAAK1e,EAASkf,OAAQlf,EAASyV,YACnH4kB,EAAU2R,EAASL,eAAetR,QAAQliB,GAGhD,GAAIuG,GACA,SAAQmsB,GAAyBxQ,EAAQzlC,OAAQ,yDAEhD,CAED,MAAMq7C,EAAgB5V,EAAQ8D,MAAK,CAACR,EAAc8R,EAAqBC,KACnE,IAAKz2B,GAAY0kB,IACb8R,GACA5E,GAAyB4E,GACzB,MAAO,CAACrE,GAAyBqE,GAAqBzxC,OAErD,CAED,IAAIqlB,EAAU,GAOd,OANIosB,IACApsB,EAAUA,EAAQimB,OAAO2B,GAAuBwE,GAAqBx6C,KAAIuzC,GAAQA,EAAKxqC,UAE1FhC,EAAK0zC,GAAU,CAACE,EAAMM,KAClB7sB,EAAUA,EAAQimB,OAAO4G,EAAa,IAEnC7sB,CACX,KAEJ,IAAK,IAAIrrB,EAAI,EAAGA,EAAIi4C,EAAch4C,SAAUD,EAAG,CAC3C,MAAMm4C,EAAcF,EAAcj4C,GAClCg0C,EAASN,gBAAgBsC,cAAcH,GAA2BsC,GAAcrC,GAAoB9B,EAAUmE,GAClH,CACJ,CACA,OAAOxU,CACX;;;;;;;;;;;;;;;;GAkBA,MAAMyU,GACF,WAAAz6C,CAAYklC,GACRtmC,KAAKsmC,MAAQA,CACjB,CACA,iBAAA5R,CAAkBC,GACd,MAAMzO,EAAQlmB,KAAKsmC,MAAM5R,kBAAkBC,GAC3C,OAAO,IAAIknB,GAAsB31B,EACrC,CACA,IAAAgJ,GACI,OAAOlvB,KAAKsmC,KAChB,EAEJ,MAAMwV,GACF,WAAA16C,CAAYq2C,EAAU7zB,GAClB5jB,KAAK+7C,UAAYtE,EACjBz3C,KAAKg8C,MAAQp4B,CACjB,CACA,iBAAA8Q,CAAkBC,GACd,MAAMuU,EAAY3kB,GAAUvkB,KAAKg8C,MAAOrnB,GACxC,OAAO,IAAImnB,GAAsB97C,KAAK+7C,UAAW7S,EACrD,CACA,IAAAha,GACI,OAAOurB,GAA+Bz6C,KAAK+7C,UAAW/7C,KAAKg8C,MAC/D,EAKJ,MAAMC,GAAqB,SAAUltB,GAGjC,OAFAA,EAASA,GAAU,CAAC,EACpBA,EAAO,aAAeA,EAAO,eAAgB,IAAIhC,MAAOC,UACjD+B,CACX,EAKMmtB,GAA2B,SAAU77C,EAAO87C,EAAaC,GAC3D,OAAK/7C,GAA0B,kBAAVA,IAGrB,QAAO,QAASA,EAAO,6CACK,kBAAjBA,EAAM,OACNg8C,GAA2Bh8C,EAAM,OAAQ87C,EAAaC,GAEhC,kBAAjB/7C,EAAM,OACXi8C,GAA4Bj8C,EAAM,OAAQ87C,QAGjD,SAAO,EAAO,4BAA8BI,KAAKC,UAAUn8C,EAAO,KAAM,KAVjEA,CAYf,EACMg8C,GAA6B,SAAU7D,EAAI3D,EAAUuH,GACvD,OAAQ5D,GACJ,IAAK,YACD,OAAO4D,EAAa,aACxB,SACI,SAAO,EAAO,4BAA8B5D,GAExD,EACM8D,GAA8B,SAAU9D,EAAI3D,EAAU4H,GACnDjE,EAAG9wC,eAAe,eACnB,SAAO,EAAO,4BAA8B60C,KAAKC,UAAUhE,EAAI,KAAM,IAEzE,MAAMjqB,EAAQiqB,EAAG,aACI,kBAAVjqB,IACP,SAAO,EAAO,+BAAiCA,GAEnD,MAAMmuB,EAAe7H,EAAS3lB,OAG9B,IAFA,QAAwB,OAAjBwtB,GAAiD,qBAAjBA,EAA8B,+CAEhEA,EAAa3oB,aACd,OAAOxF,EAEX,MAAMouB,EAAOD,EACPP,EAAcQ,EAAKpnB,WACzB,MAA2B,kBAAhB4mB,EACA5tB,EAGJ4tB,EAAc5tB,CACzB,EAQMquB,GAA2B,SAAUh5B,EAAMsL,EAAMuoB,EAAU2E,GAC7D,OAAOS,GAAqB3tB,EAAM,IAAI4sB,GAAsBrE,EAAU7zB,GAAOw4B,EACjF,EAMMU,GAA+B,SAAU5tB,EAAM2lB,EAAUuH,GAC3D,OAAOS,GAAqB3tB,EAAM,IAAI2sB,GAAsBhH,GAAWuH,EAC3E,EACA,SAASS,GAAqB3tB,EAAMitB,EAAaC,GAC7C,MAAMW,EAAS7tB,EAAK8E,cAAchE,MAC5B4D,EAAWsoB,GAAyBa,EAAQZ,EAAYznB,kBAAkB,aAAc0nB,GAC9F,IAAI3sB,EACJ,GAAIP,EAAK6E,aAAc,CACnB,MAAMipB,EAAW9tB,EACX7uB,EAAQ67C,GAAyBc,EAASznB,WAAY4mB,EAAaC,GACzE,OAAI/7C,IAAU28C,EAASznB,YACnB3B,IAAaopB,EAAShpB,cAAchE,MAC7B,IAAIoE,GAAS/zB,EAAOs7B,GAAa/H,IAGjC1E,CAEf,CACK,CACD,MAAM+tB,EAAe/tB,EAWrB,OAVAO,EAAUwtB,EACNrpB,IAAaqpB,EAAajpB,cAAchE,QACxCP,EAAUA,EAAQ+E,eAAe,IAAIJ,GAASR,KAElDqpB,EAAa5nB,aAAaqB,IAAgB,CAAC/B,EAAWI,KAClD,MAAME,EAAe4nB,GAAqB9nB,EAAWonB,EAAYznB,kBAAkBC,GAAYynB,GAC3FnnB,IAAiBF,IACjBtF,EAAUA,EAAQuF,qBAAqBL,EAAWM,GACtD,IAEGxF,CACX,CACJ;;;;;;;;;;;;;;;;GAuBA,MAAMytB,GAMF,WAAA97C,CAAYY,EAAO,GAAIm7C,EAAS,KAAMjuB,EAAO,CAAE6M,SAAU,CAAC,EAAGqhB,WAAY,IACrEp9C,KAAKgC,KAAOA,EACZhC,KAAKm9C,OAASA,EACdn9C,KAAKkvB,KAAOA,CAChB,EAQJ,SAASmuB,GAAYrZ,EAAMsZ,GAEvB,IAAI15B,EAAO05B,aAAmBn6B,GAAOm6B,EAAU,IAAIn6B,GAAKm6B,GACpDp3B,EAAQ8d,EAAM9jC,EAAOyjB,GAAaC,GACtC,MAAgB,OAAT1jB,EAAe,CAClB,MAAM60B,GAAY,QAAQ7O,EAAMgJ,KAAK6M,SAAU77B,IAAS,CACpD67B,SAAU,CAAC,EACXqhB,WAAY,GAEhBl3B,EAAQ,IAAIg3B,GAAKh9C,EAAMgmB,EAAO6O,GAC9BnR,EAAOE,GAAaF,GACpB1jB,EAAOyjB,GAAaC,EACxB,CACA,OAAOsC,CACX,CAMA,SAASq3B,GAAavZ,GAClB,OAAOA,EAAK9U,KAAK7uB,KACrB,CAMA,SAASm9C,GAAaxZ,EAAM3jC,GACxB2jC,EAAK9U,KAAK7uB,MAAQA,EAClBo9C,GAAkBzZ,EACtB,CAIA,SAAS0Z,GAAgB1Z,GACrB,OAAOA,EAAK9U,KAAKkuB,WAAa,CAClC,CAIA,SAASO,GAAY3Z,GACjB,YAA8BzX,IAAvBgxB,GAAavZ,KAAwB0Z,GAAgB1Z,EAChE,CAMA,SAAS4Z,GAAiB5Z,EAAM7a,GAC5B1hB,EAAKu8B,EAAK9U,KAAK6M,UAAU,CAAC7V,EAAOgS,KAC7B/O,EAAO,IAAI+zB,GAAKh3B,EAAO8d,EAAM9L,GAAW,GAEhD,CAUA,SAAS2lB,GAAsB7Z,EAAM7a,EAAQ20B,EAAaC,GAClDD,IAAgBC,GAChB50B,EAAO6a,GAEX4Z,GAAiB5Z,GAAM9d,IACnB23B,GAAsB33B,EAAOiD,GAAQ,EAAM40B,EAAc,IAEzDD,GAAeC,GACf50B,EAAO6a,EAEf,CASA,SAASga,GAAoBha,EAAM7a,EAAQ20B,GACvC,IAAI5uB,EAAO4uB,EAAc9Z,EAAOA,EAAKmZ,OACrC,MAAgB,OAATjuB,EAAe,CAClB,GAAI/F,EAAO+F,GACP,OAAO,EAEXA,EAAOA,EAAKiuB,MAChB,CACA,OAAO,CACX,CAIA,SAASc,GAAYja,GACjB,OAAO,IAAI7gB,GAAqB,OAAhB6gB,EAAKmZ,OACfnZ,EAAKhiC,KACLi8C,GAAYja,EAAKmZ,QAAU,IAAMnZ,EAAKhiC,KAChD,CAIA,SAASy7C,GAAkBzZ,GACH,OAAhBA,EAAKmZ,QACLe,GAAgBla,EAAKmZ,OAAQnZ,EAAKhiC,KAAMgiC,EAEhD,CAOA,SAASka,GAAgBla,EAAMrP,EAAWzO,GACtC,MAAMi4B,EAAaR,GAAYz3B,GACzBk4B,GAAc,QAASpa,EAAK9U,KAAK6M,SAAUpH,GAC7CwpB,GAAcC,UACPpa,EAAK9U,KAAK6M,SAASpH,GAC1BqP,EAAK9U,KAAKkuB,aACVK,GAAkBzZ,IAEZma,GAAeC,IACrBpa,EAAK9U,KAAK6M,SAASpH,GAAazO,EAAMgJ,KACtC8U,EAAK9U,KAAKkuB,aACVK,GAAkBzZ,GAE1B;;;;;;;;;;;;;;;;GAqBA,MAAMqa,GAAqB,iCAKrBC,GAAsB,+BAItBC,GAAiB,SACjBC,GAAa,SAAUh9C,GACzB,MAAuB,kBAARA,GAAmC,IAAfA,EAAIkC,SAAiB26C,GAAmBn1C,KAAK1H,EACpF,EACMi9C,GAAoB,SAAUx9B,GAChC,MAA8B,kBAAfA,GACW,IAAtBA,EAAWvd,SACV46C,GAAoBp1C,KAAK+X,EAClC,EACMy9B,GAAwB,SAAUz9B,GAKpC,OAJIA,IAEAA,EAAaA,EAAW4N,QAAQ,mBAAoB,MAEjD4vB,GAAkBx9B,EAC7B,EACM09B,GAAkB,SAAU/qB,GAC9B,OAAqB,OAAbA,GACgB,kBAAbA,GACc,kBAAbA,IAA0B1uB,EAAoB0uB,IACrDA,GACuB,kBAAbA,IAEP,QAASA,EAAU,MAC/B,EAIMgrB,GAA0B,SAAUC,EAAQx+C,EAAOujB,EAAM3Y,GACvDA,QAAsBshB,IAAVlsB,GAGhBy+C,IAAqB,QAAYD,EAAQ,SAAUx+C,EAAOujB,EAC9D,EAIMk7B,GAAuB,SAAUC,EAAa55C,EAAM62C,GACtD,MAAMp4B,EAAOo4B,aAAiB74B,GAAO,IAAIuC,GAAes2B,EAAO+C,GAAe/C,EAC9E,QAAazvB,IAATpnB,EACA,MAAM,IAAIP,MAAMm6C,EAAc,sBAAwBz4B,GAA4B1C,IAEtF,GAAoB,oBAATze,EACP,MAAM,IAAIP,MAAMm6C,EACZ,uBACAz4B,GAA4B1C,GAC5B,oBACAze,EAAKlD,YAEb,GAAIiD,EAAoBC,GACpB,MAAM,IAAIP,MAAMm6C,EACZ,YACA55C,EAAKlD,WACL,IACAqkB,GAA4B1C,IAGpC,GAAoB,kBAATze,GACPA,EAAKzB,OAAS66C,GAAiB,IAC/B,QAAap5C,GAAQo5C,GACrB,MAAM,IAAI35C,MAAMm6C,EACZ,kCACAR,GACA,eACAj4B,GAA4B1C,GAC5B,MACAze,EAAKqC,UAAU,EAAG,IAClB,SAIR,GAAIrC,GAAwB,kBAATA,EAAmB,CAClC,IAAI65C,GAAc,EACdC,GAAiB,EAqBrB,GApBAx3C,EAAKtC,GAAM,CAAC3D,EAAKnB,KACb,GAAY,WAARmB,EACAw9C,GAAc,OAEb,GAAY,cAARx9C,GAA+B,QAARA,IAC5By9C,GAAiB,GACZT,GAAWh9C,IACZ,MAAM,IAAIoD,MAAMm6C,EACZ,6BACAv9C,EACA,KACA8kB,GAA4B1C,GAJhBm7B,wFASxB/4B,GAAmBpC,EAAMpiB,GACzBs9C,GAAqBC,EAAa1+C,EAAOujB,GACzCuC,GAAkBvC,EAAK,IAEvBo7B,GAAeC,EACf,MAAM,IAAIr6C,MAAMm6C,EACZ,4BACAz4B,GAA4B1C,GAC5B,mCAEZ,CACJ,EAIMs7B,GAA6B,SAAUH,EAAaI,GACtD,IAAI17C,EAAG27C,EACP,IAAK37C,EAAI,EAAGA,EAAI07C,EAAWz7C,OAAQD,IAAK,CACpC27C,EAAUD,EAAW17C,GACrB,MAAMsD,EAAOmd,GAAUk7B,GACvB,IAAK,IAAI55B,EAAI,EAAGA,EAAIze,EAAKrD,OAAQ8hB,IAC7B,GAAgB,cAAZze,EAAKye,IAAsBA,IAAMze,EAAKrD,OAAS,QAC9C,IAAK86C,GAAWz3C,EAAKye,IACtB,MAAM,IAAI5gB,MAAMm6C,EACZ,4BACAh4C,EAAKye,GACL,aACA45B,EAAQn9C,WAJI88C,sFAS5B,CAIAI,EAAWj4C,KAAK8d,IAChB,IAAIq6B,EAAW,KACf,IAAK57C,EAAI,EAAGA,EAAI07C,EAAWz7C,OAAQD,IAAK,CAEpC,GADA27C,EAAUD,EAAW17C,GACJ,OAAb47C,GAAqB55B,GAAa45B,EAAUD,GAC5C,MAAM,IAAIx6C,MAAMm6C,EACZ,mBACAM,EAASp9C,WACT,qCACAm9C,EAAQn9C,YAEhBo9C,EAAWD,CACf,CACJ,EAKME,GAA+B,SAAUT,EAAQ15C,EAAMye,EAAM3Y,GAC/D,GAAIA,QAAqBshB,IAATpnB,EACZ,OAEJ,MAAMo6C,GAAgB,QAAYV,EAAQ,UAC1C,IAAM15C,GAAwB,kBAATA,GAAsBvB,MAAMC,QAAQsB,GACrD,MAAM,IAAIP,MAAM26C,EAAgB,0DAEpC,MAAMJ,EAAa,GACnB13C,EAAKtC,GAAM,CAAC3D,EAAKnB,KACb,MAAM++C,EAAU,IAAIj8B,GAAK3hB,GAEzB,GADAs9C,GAAqBS,EAAel/C,EAAOkkB,GAAUX,EAAMw7B,IAC9B,cAAzBr7B,GAAYq7B,KACPT,GAAgBt+C,GACjB,MAAM,IAAIuE,MAAM26C,EACZ,kCACAH,EAAQn9C,WAFIs9C,gGAOxBJ,EAAWl4C,KAAKm4C,EAAQ,IAE5BF,GAA2BK,EAAeJ,EAC9C,EAkCMK,GAAqB,SAAUX,EAAQY,EAAcx+B,EAAYhW,GACnE,KAAIA,QAA2BshB,IAAftL,KAGXw9B,GAAkBx9B,GACnB,MAAM,IAAIrc,OAAM,QAAYi6C,EAAQY,GAChC,0BACAx+B,EAFY,mFAMxB,EACMy+B,GAAyB,SAAUb,EAAQY,EAAcx+B,EAAYhW,GACnEgW,IAEAA,EAAaA,EAAW4N,QAAQ,mBAAoB,MAExD2wB,GAAmBX,EAAQY,EAAcx+B,EAAYhW,EACzD,EAIM00C,GAAuB,SAAUd,EAAQj7B,GAC3C,GAA2B,UAAvBD,GAAaC,GACb,MAAM,IAAIhf,MAAMi6C,EAAS,4CAEjC,EACMe,GAAc,SAAUf,EAAQgB,GAElC,MAAM5+B,EAAa4+B,EAAUj8B,KAAK3hB,WAClC,GAAyC,kBAA5B49C,EAAUtxC,SAAShB,MACO,IAAnCsyC,EAAUtxC,SAAShB,KAAK7J,SACtB86C,GAAWqB,EAAUtxC,SAASd,YACc,cAA1CoyC,EAAUtxC,SAAShB,KAAKgW,MAAM,KAAK,IAChB,IAAtBtC,EAAWvd,SAAiBg7C,GAAsBz9B,GACnD,MAAM,IAAIrc,OAAM,QAAYi6C,EAAQ,OAApB,uFAIxB;;;;;;;;;;;;;;;;;AA+BA,MAAMiB,GACF,WAAA1+C,GACIpB,KAAK+/C,YAAc,GAInB//C,KAAKggD,gBAAkB,CAC3B,EAKJ,SAASC,GAAsBC,EAAYC,GAEvC,IAAIC,EAAW,KACf,IAAK,IAAI38C,EAAI,EAAGA,EAAI08C,EAAcz8C,OAAQD,IAAK,CAC3C,MAAM0B,EAAOg7C,EAAc18C,GACrBmgB,EAAOze,EAAKk7C,UACD,OAAbD,GAAsB96B,GAAW1B,EAAMw8B,EAASx8B,QAChDs8B,EAAWH,YAAY94C,KAAKm5C,GAC5BA,EAAW,MAEE,OAAbA,IACAA,EAAW,CAAEhZ,OAAQ,GAAIxjB,SAE7Bw8B,EAAShZ,OAAOngC,KAAK9B,EACzB,CACIi7C,GACAF,EAAWH,YAAY94C,KAAKm5C,EAEpC,CAUA,SAASE,GAA4BJ,EAAYt8B,EAAMu8B,GACnDF,GAAsBC,EAAYC,GAClCI,GAA6CL,GAAYM,GAAal7B,GAAWk7B,EAAW58B,IAChG,CAUA,SAAS68B,GAAoCP,EAAYQ,EAAaP,GAClEF,GAAsBC,EAAYC,GAClCI,GAA6CL,GAAYM,GAAa/6B,GAAa+6B,EAAWE,IAC1Fj7B,GAAai7B,EAAaF,IAClC,CACA,SAASD,GAA6CL,EAAY7W,GAC9D6W,EAAWF,kBACX,IAAIW,GAAU,EACd,IAAK,IAAIl9C,EAAI,EAAGA,EAAIy8C,EAAWH,YAAYr8C,OAAQD,IAAK,CACpD,MAAMm9C,EAAYV,EAAWH,YAAYt8C,GACzC,GAAIm9C,EAAW,CACX,MAAMJ,EAAYI,EAAUh9B,KACxBylB,EAAUmX,IACVK,GAAeX,EAAWH,YAAYt8C,IACtCy8C,EAAWH,YAAYt8C,GAAK,MAG5Bk9C,GAAU,CAElB,CACJ,CACIA,IACAT,EAAWH,YAAc,IAE7BG,EAAWF,iBACf,CAIA,SAASa,GAAeD,GACpB,IAAK,IAAIn9C,EAAI,EAAGA,EAAIm9C,EAAUxZ,OAAO1jC,OAAQD,IAAK,CAC9C,MAAM6e,EAAYs+B,EAAUxZ,OAAO3jC,GACnC,GAAkB,OAAd6e,EAAoB,CACpBs+B,EAAUxZ,OAAO3jC,GAAK,KACtB,MAAMq9C,EAAUx+B,EAAUy+B,iBACtBh9C,GACAO,EAAI,UAAYge,EAAUrgB,YAE9BiI,EAAe42C,EACnB,CACJ,CACJ;;;;;;;;;;;;;;;;GAkBA,MAAME,GAAmB,iBAMnBC,GAA0B,GAIhC,MAAMC,GACF,WAAA9/C,CAAY4b,EAAWmkC,EAAkB55B,EAAoB65B,GACzDphD,KAAKgd,UAAYA,EACjBhd,KAAKmhD,iBAAmBA,EACxBnhD,KAAKunB,mBAAqBA,EAC1BvnB,KAAKohD,kBAAoBA,EACzBphD,KAAKqhD,gBAAkB,EACvBrhD,KAAK8kC,eAAiB,KACtB9kC,KAAKshD,YAAc,IAAIxB,GACvB9/C,KAAKuhD,aAAe,EACpBvhD,KAAKwhD,6BAA+B,KAEpCxhD,KAAKqS,cAAgBmxB,KAErBxjC,KAAKyhD,sBAAwB,IAAIvE,GAEjCl9C,KAAK0hD,sBAAwB,KAE7B1hD,KAAKwB,IAAMxB,KAAKgd,UAAU3O,aAC9B,CAIA,QAAApM,GACI,OAASjC,KAAKgd,UAAUxP,OAAS,WAAa,WAAaxN,KAAKgd,UAAUzP,IAC9E,EAEJ,SAASo0C,GAAUC,EAAMC,EAAOC,GAE5B,GADAF,EAAK7vC,OAAS5C,GAA0ByyC,EAAK5kC,WACzC4kC,EAAKT,kBAAoB/2C,IACzBw3C,EAAKhd,QAAU,IAAInC,GAAmBmf,EAAK5kC,WAAW,CAACiE,EAAY9b,EAAM48C,EAAS53B,KAC9E63B,GAAiBJ,EAAM3gC,EAAY9b,EAAM48C,EAAS53B,EAAI,GACvDy3B,EAAKr6B,mBAAoBq6B,EAAKR,mBAEjCt7C,YAAW,IAAMm8C,GAAoBL,GAA2B,IAAO,OAEtE,CAED,GAA4B,qBAAjBE,GAAiD,OAAjBA,EAAuB,CAC9D,GAA4B,kBAAjBA,EACP,MAAM,IAAIl9C,MAAM,sEAEpB,KACI,QAAUk9C,EACd,CACA,MAAOr/C,GACH,MAAM,IAAImC,MAAM,kCAAoCnC,EACxD,CACJ,CACAm/C,EAAKF,sBAAwB,IAAIv6B,GAAqBy6B,EAAK5kC,UAAW6kC,GAAO,CAAC5gC,EAAY9b,EAAM48C,EAAS53B,KACrG63B,GAAiBJ,EAAM3gC,EAAY9b,EAAM48C,EAAS53B,EAAI,IACtD+3B,IACAD,GAAoBL,EAAMM,EAAc,IACxChX,IACAiX,GAAuBP,EAAM1W,EAAQ,GACtC0W,EAAKr6B,mBAAoBq6B,EAAKR,kBAAmBU,GACpDF,EAAKhd,QAAUgd,EAAKF,qBACxB,CACAE,EAAKr6B,mBAAmB/b,wBAAuB8V,IAC3CsgC,EAAKhd,QAAQvjB,iBAAiBC,EAAM,IAExCsgC,EAAKR,kBAAkB51C,wBAAuBvL,IAC1C2hD,EAAKhd,QAAQrjB,qBAAqBthB,EAAOqhB,MAAM,IAInDsgC,EAAKQ,eAAiB/yC,GAAgCuyC,EAAK5kC,WAAW,IAAM,IAAI0nB,GAAckd,EAAK7vC,OAAQ6vC,EAAKhd,WAEhHgd,EAAKS,UAAY,IAAIlf,GACrBye,EAAKU,cAAgB,IAAIpL,GAAS,CAC9BmC,eAAgB,CAAC5vC,EAAO0gB,EAAKD,EAAehJ,KACxC,IAAIqhC,EAAa,GACjB,MAAMrzB,EAAO0yB,EAAKS,UAAUhf,QAAQ55B,EAAME,OAS1C,OANKulB,EAAK0B,YACN2xB,EAAavK,GAA6B4J,EAAKU,cAAe74C,EAAME,MAAOulB,GAC3EppB,YAAW,KACPob,EAAW,KAAK,GACjB,IAEAqhC,CAAU,EAErB9I,cAAe,SAEnB+I,GAAeZ,EAAM,aAAa,GAClCA,EAAKa,gBAAkB,IAAIvL,GAAS,CAChCmC,eAAgB,CAAC5vC,EAAO0gB,EAAKD,EAAehJ,KACxC0gC,EAAKhd,QAAQ3a,OAAOxgB,EAAOygB,EAAeC,GAAK,CAACW,EAAQ3lB,KACpD,MAAMiiC,EAASlmB,EAAW4J,EAAQ3lB,GAClCs7C,GAAoCmB,EAAKN,YAAa73C,EAAME,MAAOy9B,EAAO,IAGvE,IAEXqS,cAAe,CAAChwC,EAAO0gB,KACnBy3B,EAAKhd,QAAQ3Y,SAASxiB,EAAO0gB,EAAI,GAG7C,CAIA,SAASu4B,GAAed,GACpB,MAAMe,EAAaf,EAAKS,UAAUhf,QAAQ,IAAIlgB,GAAK,2BAC7Cy/B,EAASD,EAAW3yB,OAAS,EACnC,OAAO,IAAIjD,MAAOC,UAAY41B,CAClC,CAIA,SAASC,GAAyBjB,GAC9B,OAAO3F,GAAmB,CACtBx7B,UAAWiiC,GAAed,IAElC,CAIA,SAASI,GAAiBJ,EAAM3gC,EAAY9b,EAAM48C,EAAS53B,GAEvDy3B,EAAKP,kBACL,MAAMz9B,EAAO,IAAIT,GAAKlC,GACtB9b,EAAOy8C,EAAKJ,6BACNI,EAAKJ,6BAA6BvgC,EAAY9b,GAC9CA,EACN,IAAIiiC,EAAS,GACb,GAAIjd,EACA,GAAI43B,EAAS,CACT,MAAMe,GAAiB,QAAI39C,GAAO49C,GAAQpnB,GAAaonB,KACvD3b,EAAS2S,GAA8B6H,EAAKa,gBAAiB7+B,EAAMk/B,EAAgB34B,EACvF,KACK,CACD,MAAM64B,EAAarnB,GAAax2B,GAChCiiC,EAAS0S,GAAkC8H,EAAKa,gBAAiB7+B,EAAMo/B,EAAY74B,EACvF,MAEC,GAAI43B,EAAS,CACd,MAAMxV,GAAkB,QAAIpnC,GAAO49C,GAAQpnB,GAAaonB,KACxD3b,EAAS6Q,GAAyB2J,EAAKa,gBAAiB7+B,EAAM2oB,EAClE,KACK,CACD,MAAMhQ,EAAOZ,GAAax2B,GAC1BiiC,EAAS4Q,GAA6B4J,EAAKa,gBAAiB7+B,EAAM2Y,EACtE,CACA,IAAIgB,EAAe3Z,EACfwjB,EAAO1jC,OAAS,IAGhB65B,EAAe0lB,GAAsBrB,EAAMh+B,IAE/C68B,GAAoCmB,EAAKN,YAAa/jB,EAAc6J,EACxE,CACA,SAAS6a,GAAoBL,EAAMM,GAC/BM,GAAeZ,EAAM,YAAaM,IACZ,IAAlBA,GACAgB,GAA0BtB,EAElC,CACA,SAASO,GAAuBP,EAAM1W,GAClCzjC,EAAKyjC,GAAS,CAAC1pC,EAAKnB,KAChBmiD,GAAeZ,EAAMpgD,EAAKnB,EAAM,GAExC,CACA,SAASmiD,GAAeZ,EAAM3gC,EAAY5gB,GACtC,MAAMujB,EAAO,IAAIT,GAAK,UAAYlC,GAC5BwO,EAAUkM,GAAat7B,GAC7BuhD,EAAKS,UAAU/e,eAAe1f,EAAM6L,GACpC,MAAM2X,EAAS4Q,GAA6B4J,EAAKU,cAAe1+B,EAAM6L,GACtEgxB,GAAoCmB,EAAKN,YAAa19B,EAAMwjB,EAChE,CACA,SAAS+b,GAAmBvB,GACxB,OAAOA,EAAKL,cAChB,CA0DA,SAAS6B,GAAoBxB,EAAMh+B,EAAMy/B,EAAQppB,EAAa/Y,GAC1DoiC,GAAQ1B,EAAM,MAAO,CACjBh+B,KAAMA,EAAK3hB,WACX5B,MAAOgjD,EACPzvB,SAAUqG,IAId,MAAMmiB,EAAeyG,GAAyBjB,GACxC2B,EAAoB5nB,GAAa0nB,EAAQppB,GACzC4a,EAAW4F,GAA+BmH,EAAKa,gBAAiB7+B,GAChE6L,EAAUqtB,GAA6ByG,EAAmB1O,EAAUuH,GACpElQ,EAAUiX,GAAmBvB,GAC7Bxa,EAASoQ,GAA2BoK,EAAKa,gBAAiB7+B,EAAM6L,EAASyc,GAAS,GACxF+T,GAAsB2B,EAAKN,YAAala,GACxCwa,EAAKhd,QAAQ5jB,IAAI4C,EAAK3hB,WAAYshD,EAAkBvzB,KAAgB,IAAO,CAAClF,EAAQ4B,KAChF,MAAM82B,EAAqB,OAAX14B,EACX04B,GACD3+C,EAAK,UAAY+e,EAAO,YAAckH,GAE1C,MAAM24B,EAAc3L,GAAqB8J,EAAKa,gBAAiBvW,GAAUsX,GACzE/C,GAAoCmB,EAAKN,YAAa19B,EAAM6/B,GAC5DC,GAA2B9B,EAAM1gC,EAAY4J,EAAQ4B,EAAY,IAErE,MAAM6Q,EAAeomB,GAAsB/B,EAAMh+B,GACjDq/B,GAAsBrB,EAAMrkB,GAE5BkjB,GAAoCmB,EAAKN,YAAa/jB,EAAc,GACxE,CACA,SAASqmB,GAAWhC,EAAMh+B,EAAMigC,EAAiB3iC,GAC7CoiC,GAAQ1B,EAAM,SAAU,CAAEh+B,KAAMA,EAAK3hB,WAAY5B,MAAOwjD,IAExD,IAAIlZ,GAAQ,EACZ,MAAMyR,EAAeyG,GAAyBjB,GACxCrV,EAAkB,CAAC,EAKzB,GAJA9kC,EAAKo8C,GAAiB,CAACC,EAAYC,KAC/BpZ,GAAQ,EACR4B,EAAgBuX,GAAclH,GAAyBr4B,GAAUX,EAAMkgC,GAAanoB,GAAaooB,GAAenC,EAAKa,gBAAiBrG,EAAa,IAElJzR,EAsBDrmC,EAAI,wDACJo/C,GAA2B9B,EAAM1gC,EAAY,UAAMqL,OAvB3C,CACR,MAAM2f,EAAUiX,GAAmBvB,GAC7Bxa,EAASwQ,GAAuBgK,EAAKa,gBAAiB7+B,EAAM2oB,EAAiBL,GACnF+T,GAAsB2B,EAAKN,YAAala,GACxCwa,EAAKhd,QAAQxjB,MAAMwC,EAAK3hB,WAAY4hD,GAAiB,CAAC/4B,EAAQ4B,KAC1D,MAAM82B,EAAqB,OAAX14B,EACX04B,GACD3+C,EAAK,aAAe+e,EAAO,YAAckH,GAE7C,MAAM24B,EAAc3L,GAAqB8J,EAAKa,gBAAiBvW,GAAUsX,GACnEjmB,EAAekmB,EAAY//C,OAAS,EAAIu/C,GAAsBrB,EAAMh+B,GAAQA,EAClF68B,GAAoCmB,EAAKN,YAAa/jB,EAAckmB,GACpEC,GAA2B9B,EAAM1gC,EAAY4J,EAAQ4B,EAAY,IAErEjlB,EAAKo8C,GAAkBnD,IACnB,MAAMnjB,EAAeomB,GAAsB/B,EAAMr9B,GAAUX,EAAM88B,IACjEuC,GAAsBrB,EAAMrkB,EAAa,IAG7CkjB,GAAoCmB,EAAKN,YAAa19B,EAAM,GAChE,CAKJ,CAIA,SAASs/B,GAA0BtB,GAC/B0B,GAAQ1B,EAAM,sBACd,MAAMxF,EAAeyG,GAAyBjB,GACxCoC,EAA2BxgB,KACjCI,GAA8Bge,EAAKvvC,cAAeqR,MAAgB,CAACE,EAAMsL,KACrE,MAAM+0B,EAAWrH,GAAyBh5B,EAAMsL,EAAM0yB,EAAKa,gBAAiBrG,GAC5E3Y,GAA2BugB,EAA0BpgC,EAAMqgC,EAAS,IAExE,IAAI7c,EAAS,GACbxD,GAA8BogB,EAA0BtgC,MAAgB,CAACE,EAAM2Y,KAC3E6K,EAASA,EAAO2N,OAAOiD,GAA6B4J,EAAKa,gBAAiB7+B,EAAM2Y,IAChF,MAAMgB,EAAeomB,GAAsB/B,EAAMh+B,GACjDq/B,GAAsBrB,EAAMrkB,EAAa,IAE7CqkB,EAAKvvC,cAAgBmxB,KACrBid,GAAoCmB,EAAKN,YAAa59B,KAAgB0jB,EAC1E,CA2CA,SAAS8c,GAA6BtC,EAAMn4C,EAAO6qC,GAC/C,IAAIlN,EAEAA,EAD8B,UAA9BzjB,GAAala,EAAME,OACVqwC,GAA6B4H,EAAKU,cAAe74C,EAAO6qC,GAGxD0F,GAA6B4H,EAAKa,gBAAiBh5C,EAAO6qC,GAEvEgM,GAA4BsB,EAAKN,YAAa73C,EAAME,MAAOy9B,EAC/D,CACA,SAAS+c,GAAgCvC,EAAMn4C,EAAO6qC,GAGlD,IAAIlN,EAEAA,EAD8B,UAA9BzjB,GAAala,EAAME,OACV+uC,GAAgCkJ,EAAKU,cAAe74C,EAAO6qC,GAG3DoE,GAAgCkJ,EAAKa,gBAAiBh5C,EAAO6qC,GAE1EgM,GAA4BsB,EAAKN,YAAa73C,EAAME,MAAOy9B,EAC/D,CACA,SAASgd,GAAcxC,GACfA,EAAKF,uBACLE,EAAKF,sBAAsBrzB,UAAU2yB,GAE7C,CAMA,SAASsC,GAAQ1B,KAASr+C,GACtB,IAAIkB,EAAS,GACTm9C,EAAKF,wBACLj9C,EAASm9C,EAAKF,sBAAsB5+C,GAAK,KAE7CwB,EAAIG,KAAWlB,EACnB,CACA,SAASmgD,GAA2B9B,EAAM7xC,EAAU+a,EAAQ4B,GACpD3c,GACA7F,GAAe,KACX,GAAe,OAAX4gB,EACA/a,EAAS,UAER,CACD,MAAMvG,GAAQshB,GAAU,SAASlhB,cACjC,IAAIpG,EAAUgG,EACVkjB,IACAlpB,GAAW,KAAOkpB,GAEtB,MAAMhoB,EAAQ,IAAIE,MAAMpB,GAExBkB,EAAM8E,KAAOA,EACbuG,EAASrL,EACb,IAGZ,CA0FA,SAAS2/C,GAAmBzC,EAAMh+B,EAAM0gC,GACpC,OAAQ7J,GAA+BmH,EAAKa,gBAAiB7+B,EAAM0gC,IAC/DzqB,GAAazI,UACrB,CAUA,SAASmzB,GAA0B3C,EAAM1yB,EAAO0yB,EAAKH,uBAKjD,GAHKvyB,GACDs1B,GAAwC5C,EAAM1yB,GAE9CquB,GAAaruB,GAAO,CACpB,MAAMu1B,EAAQC,GAA0B9C,EAAM1yB,IAC9C,QAAOu1B,EAAM/gD,OAAS,EAAG,yCACzB,MAAMihD,EAASF,EAAMG,OAAOC,GAAuC,IAAvBA,EAAY/5B,SAEpD65B,GACAG,GAAyBlD,EAAM3D,GAAY/uB,GAAOu1B,EAE1D,MACS/G,GAAgBxuB,IACrB0uB,GAAiB1uB,GAAM6F,IACnBwvB,GAA0B3C,EAAM7sB,EAAU,GAGtD,CAQA,SAAS+vB,GAAyBlD,EAAMh+B,EAAM6gC,GAE1C,MAAMM,EAAeN,EAAM/jD,KAAIskD,GACpBA,EAAIC,iBAETC,EAAcb,GAAmBzC,EAAMh+B,EAAMmhC,GACnD,IAAII,EAAaD,EACjB,MAAME,EAAaF,EAAY/jC,OAC/B,IAAK,IAAI1d,EAAI,EAAGA,EAAIghD,EAAM/gD,OAAQD,IAAK,CACnC,MAAMuhD,EAAMP,EAAMhhD,IAClB,QAAsB,IAAfuhD,EAAIl6B,OAA0C,iEACrDk6B,EAAIl6B,OAAS,EACbk6B,EAAIK,aACJ,MAAMjc,EAAezkB,GAAgBf,EAAMohC,EAAIphC,MAE/CuhC,EAAaA,EAAWjwB,YAAYkU,EAAmC4b,EAAIM,yBAC/E,CACA,MAAMC,EAAaJ,EAAWn1B,KAAI,GAC5Bw1B,EAAa5hC,EAEnBg+B,EAAKhd,QAAQ5jB,IAAIwkC,EAAWvjD,WAAYsjD,GAAaz6B,IACjDw4B,GAAQ1B,EAAM,2BAA4B,CACtCh+B,KAAM4hC,EAAWvjD,WACjB6oB,WAEJ,IAAIsc,EAAS,GACb,GAAe,OAAXtc,EAAiB,CAIjB,MAAM26B,EAAY,GAClB,IAAK,IAAIhiD,EAAI,EAAGA,EAAIghD,EAAM/gD,OAAQD,IAC9BghD,EAAMhhD,GAAGqnB,OAAS,EAClBsc,EAASA,EAAO2N,OAAO+C,GAAqB8J,EAAKa,gBAAiBgC,EAAMhhD,GAAGwhD,iBACvER,EAAMhhD,GAAGyd,YAGTukC,EAAUx+C,MAAK,IAAMw9C,EAAMhhD,GAAGyd,WAAW,MAAM,EAAMujC,EAAMhhD,GAAGiiD,iCAElEjB,EAAMhhD,GAAGkiD,YAGbnB,GAAwC5C,EAAMvE,GAAYuE,EAAKH,sBAAuB79B,IAEtF2gC,GAA0B3C,EAAMA,EAAKH,uBACrChB,GAAoCmB,EAAKN,YAAa19B,EAAMwjB,GAE5D,IAAK,IAAI3jC,EAAI,EAAGA,EAAIgiD,EAAU/hD,OAAQD,IAClCyG,EAAeu7C,EAAUhiD,GAEjC,KACK,CAED,GAAe,cAAXqnB,EACA,IAAK,IAAIrnB,EAAI,EAAGA,EAAIghD,EAAM/gD,OAAQD,IACN,IAApBghD,EAAMhhD,GAAGqnB,OACT25B,EAAMhhD,GAAGqnB,OAAS,EAGlB25B,EAAMhhD,GAAGqnB,OAAS,MAIzB,CACDjmB,EAAK,kBAAoB2gD,EAAWvjD,WAAa,YAAc6oB,GAC/D,IAAK,IAAIrnB,EAAI,EAAGA,EAAIghD,EAAM/gD,OAAQD,IAC9BghD,EAAMhhD,GAAGqnB,OAAS,EAClB25B,EAAMhhD,GAAGmiD,YAAc96B,CAE/B,CACAm4B,GAAsBrB,EAAMh+B,EAChC,IACDwhC,EACP,CAYA,SAASnC,GAAsBrB,EAAMlB,GACjC,MAAMmF,EAA0BC,GAA+BlE,EAAMlB,GAC/D98B,EAAOq6B,GAAY4H,GACnBpB,EAAQC,GAA0B9C,EAAMiE,GAE9C,OADAE,GAA0BnE,EAAM6C,EAAO7gC,GAChCA,CACX,CAQA,SAASmiC,GAA0BnE,EAAM6C,EAAO7gC,GAC5C,GAAqB,IAAjB6gC,EAAM/gD,OACN,OAKJ,MAAM+hD,EAAY,GAClB,IAAIre,EAAS,GAEb,MAAM4e,EAAcvB,EAAM/c,QAAO/d,GACT,IAAbA,EAAEmB,SAEPi6B,EAAeiB,EAAYtlD,KAAIipB,GAC1BA,EAAEs7B,iBAEb,IAAK,IAAIxhD,EAAI,EAAGA,EAAIghD,EAAM/gD,OAAQD,IAAK,CACnC,MAAMohD,EAAcJ,EAAMhhD,GACpB2lC,EAAezkB,GAAgBf,EAAMihC,EAAYjhC,MACvD,IAA8BgiC,EAA1BK,GAAmB,EAEvB,IADA,QAAwB,OAAjB7c,EAAuB,iEACH,IAAvByb,EAAY/5B,OACZm7B,GAAmB,EACnBL,EAAcf,EAAYe,YAC1Bxe,EAASA,EAAO2N,OAAO+C,GAAqB8J,EAAKa,gBAAiBoC,EAAYI,gBAAgB,SAE7F,GAA2B,IAAvBJ,EAAY/5B,OACjB,GAAI+5B,EAAYQ,YAAcpE,GAC1BgF,GAAmB,EACnBL,EAAc,WACdxe,EAASA,EAAO2N,OAAO+C,GAAqB8J,EAAKa,gBAAiBoC,EAAYI,gBAAgB,QAE7F,CAED,MAAMiB,EAAc7B,GAAmBzC,EAAMiD,EAAYjhC,KAAMmhC,GAC/DF,EAAYsB,qBAAuBD,EACnC,MAAMxO,EAAU+M,EAAMhhD,GAAGP,OAAOgjD,EAAYl2B,OAC5C,QAAgBzD,IAAZmrB,EAAuB,CACvBoH,GAAqB,qCAAsCpH,EAASmN,EAAYjhC,MAChF,IAAIwiC,EAAczqB,GAAa+b,GAC/B,MAAM2O,EAAyC,kBAAZ3O,GACpB,MAAXA,IACA,QAASA,EAAS,aACjB2O,IAEDD,EAAcA,EAAY5xB,eAAe0xB,EAAYlyB,gBAEzD,MAAMsyB,EAAazB,EAAYI,eACzB7I,EAAeyG,GAAyBjB,GACxC2E,EAAkBzJ,GAA6BsJ,EAAaF,EAAa9J,GAC/EyI,EAAYS,yBAA2Bc,EACvCvB,EAAYa,8BAAgCa,EAC5C1B,EAAYI,eAAiB9B,GAAmBvB,GAEhDmD,EAAatiC,OAAOsiC,EAAa9/C,QAAQqhD,GAAa,GACtDlf,EAASA,EAAO2N,OAAOyC,GAA2BoK,EAAKa,gBAAiBoC,EAAYjhC,KAAM2iC,EAAiB1B,EAAYI,eAAgBJ,EAAY2B,eACnJpf,EAASA,EAAO2N,OAAO+C,GAAqB8J,EAAKa,gBAAiB6D,GAAY,GAClF,MAEIL,GAAmB,EACnBL,EAAc,SACdxe,EAASA,EAAO2N,OAAO+C,GAAqB8J,EAAKa,gBAAiBoC,EAAYI,gBAAgB,GAEtG,CAEJxE,GAAoCmB,EAAKN,YAAa19B,EAAMwjB,GAC5DA,EAAS,GACL6e,IAEAxB,EAAMhhD,GAAGqnB,OAAS,EAIlB,SAAW66B,GACP7/C,WAAW6/C,EAAW5/C,KAAKC,MAAM,GACpC,CAFD,CAEGy+C,EAAMhhD,GAAGkiD,WACRlB,EAAMhhD,GAAGyd,aACW,WAAhB0kC,EACAH,EAAUx+C,MAAK,IAAMw9C,EAAMhhD,GAAGyd,WAAW,MAAM,EAAOujC,EAAMhhD,GAAG0iD,wBAG/DV,EAAUx+C,MAAK,IAAMw9C,EAAMhhD,GAAGyd,WAAW,IAAItc,MAAMghD,IAAc,EAAO,SAIxF,CAEApB,GAAwC5C,EAAMA,EAAKH,uBAEnD,IAAK,IAAIh+C,EAAI,EAAGA,EAAIgiD,EAAU/hD,OAAQD,IAClCyG,EAAeu7C,EAAUhiD,IAG7B8gD,GAA0B3C,EAAMA,EAAKH,sBACzC,CASA,SAASqE,GAA+BlE,EAAMh+B,GAC1C,IAAIuR,EAGAsxB,EAAkB7E,EAAKH,sBAC3BtsB,EAAQxR,GAAaC,GACrB,MAAiB,OAAVuR,QAAoD5I,IAAlCgxB,GAAakJ,GAClCA,EAAkBpJ,GAAYoJ,EAAiBtxB,GAC/CvR,EAAOE,GAAaF,GACpBuR,EAAQxR,GAAaC,GAEzB,OAAO6iC,CACX,CAQA,SAAS/B,GAA0B9C,EAAM6E,GAErC,MAAMC,EAAmB,GAIzB,OAHAC,GAAsC/E,EAAM6E,EAAiBC,GAE7DA,EAAiBx/C,MAAK,CAACZ,EAAGC,IAAMD,EAAEsgD,MAAQrgD,EAAEqgD,QACrCF,CACX,CACA,SAASC,GAAsC/E,EAAM1yB,EAAMu1B,GACvD,MAAMoC,EAAYtJ,GAAaruB,GAC/B,GAAI23B,EACA,IAAK,IAAIpjD,EAAI,EAAGA,EAAIojD,EAAUnjD,OAAQD,IAClCghD,EAAMx9C,KAAK4/C,EAAUpjD,IAG7Bm6C,GAAiB1uB,GAAMhJ,IACnBygC,GAAsC/E,EAAM17B,EAAOu+B,EAAM,GAEjE,CAIA,SAASD,GAAwC5C,EAAM1yB,GACnD,MAAMu1B,EAAQlH,GAAaruB,GAC3B,GAAIu1B,EAAO,CACP,IAAIqC,EAAK,EACT,IAAK,IAAIjX,EAAO,EAAGA,EAAO4U,EAAM/gD,OAAQmsC,IACT,IAAvB4U,EAAM5U,GAAM/kB,SACZ25B,EAAMqC,GAAMrC,EAAM5U,GAClBiX,KAGRrC,EAAM/gD,OAASojD,EACftJ,GAAatuB,EAAMu1B,EAAM/gD,OAAS,EAAI+gD,OAAQl4B,EAClD,CACAqxB,GAAiB1uB,GAAM6F,IACnByvB,GAAwC5C,EAAM7sB,EAAU,GAEhE,CAQA,SAAS4uB,GAAsB/B,EAAMh+B,GACjC,MAAM2Z,EAAe0gB,GAAY6H,GAA+BlE,EAAMh+B,IAChE6iC,EAAkBpJ,GAAYuE,EAAKH,sBAAuB79B,GAQhE,OAPAo6B,GAAoByI,GAAkBv3B,IAClC63B,GAA4BnF,EAAM1yB,EAAK,IAE3C63B,GAA4BnF,EAAM6E,GAClC5I,GAAsB4I,GAAkBv3B,IACpC63B,GAA4BnF,EAAM1yB,EAAK,IAEpCqO,CACX,CAMA,SAASwpB,GAA4BnF,EAAM1yB,GACvC,MAAMu1B,EAAQlH,GAAaruB,GAC3B,GAAIu1B,EAAO,CAIP,MAAMgB,EAAY,GAGlB,IAAIre,EAAS,GACT4f,GAAY,EAChB,IAAK,IAAIvjD,EAAI,EAAGA,EAAIghD,EAAM/gD,OAAQD,IACN,IAApBghD,EAAMhhD,GAAGqnB,SACgB,IAApB25B,EAAMhhD,GAAGqnB,SACd,QAAOk8B,IAAavjD,EAAI,EAAG,mDAC3BujD,EAAWvjD,EAEXghD,EAAMhhD,GAAGqnB,OAAS,EAClB25B,EAAMhhD,GAAGmiD,YAAc,SAGvB,QAA2B,IAApBnB,EAAMhhD,GAAGqnB,OAA0C,0CAE1D25B,EAAMhhD,GAAGkiD,YACTve,EAASA,EAAO2N,OAAO+C,GAAqB8J,EAAKa,gBAAiBgC,EAAMhhD,GAAGwhD,gBAAgB,IACvFR,EAAMhhD,GAAGyd,YACTukC,EAAUx+C,KAAKw9C,EAAMhhD,GAAGyd,WAAW3c,KAAK,KAAM,IAAIK,MAAM,QAAQ,EAAO,UAIjE,IAAdoiD,EAEAxJ,GAAatuB,OAAM3C,GAInBk4B,EAAM/gD,OAASsjD,EAAW,EAG9BvG,GAAoCmB,EAAKN,YAAarD,GAAY/uB,GAAOkY,GACzE,IAAK,IAAI3jC,EAAI,EAAGA,EAAIgiD,EAAU/hD,OAAQD,IAClCyG,EAAeu7C,EAAUhiD,GAEjC,CACJ;;;;;;;;;;;;;;;;GAkBA,SAASwjD,GAAWhmC,GAChB,IAAIimC,EAAoB,GACxB,MAAM5iC,EAASrD,EAAWsC,MAAM,KAChC,IAAK,IAAI9f,EAAI,EAAGA,EAAI6gB,EAAO5gB,OAAQD,IAC/B,GAAI6gB,EAAO7gB,GAAGC,OAAS,EAAG,CACtB,IAAIyjD,EAAQ7iC,EAAO7gB,GACnB,IACI0jD,EAAQC,mBAAmBD,EAAMt4B,QAAQ,MAAO,KACpD,CACA,MAAOpsB,GAAK,CACZykD,GAAqB,IAAMC,CAC/B,CAEJ,OAAOD,CACX,CAIA,SAASG,GAAYC,GACjB,MAAMC,EAAU,CAAC,EACa,MAA1BD,EAAYE,OAAO,KACnBF,EAAcA,EAAY9/C,UAAU,IAExC,IAAK,MAAMigD,KAAWH,EAAY/jC,MAAM,KAAM,CAC1C,GAAuB,IAAnBkkC,EAAQ/jD,OACR,SAEJ,MAAMgkD,EAAKD,EAAQlkC,MAAM,KACP,IAAdmkC,EAAGhkD,OACH6jD,EAAQH,mBAAmBM,EAAG,KAAON,mBAAmBM,EAAG,IAG3D7iD,EAAK,0BAA0B4iD,gBAAsBH,KAE7D,CACA,OAAOC,CACX,CACA,MAAMI,GAAgB,SAAUC,EAASj6C,GACrC,MAAMkyC,EAAYgI,GAAiBD,GAAUn6C,EAAYoyC,EAAUpyC,UAC1C,iBAArBoyC,EAAU/pC,QACVnR,EAAMk7C,EAAUtyC,KAAVsyC,8EAKJpyC,GAA2B,cAAdA,GACM,cAArBoyC,EAAU/pC,QACVnR,EAAM,gFAELk7C,EAAUryC,QACX1I,IAEJ,MAAM4I,EAAqC,OAArBmyC,EAAUiI,QAAwC,QAArBjI,EAAUiI,OAC7D,MAAO,CACHv5C,SAAU,IAAIjB,GAASuyC,EAAUtyC,KAAMsyC,EAAUryC,OAAQC,EAAWC,EAAeC,EAC/D,GACeF,IAAcoyC,EAAUkI,WAC3DnkC,KAAM,IAAIT,GAAK08B,EAAU5+B,YAEjC,EACM4mC,GAAmB,SAAUD,GAE/B,IAAIr6C,EAAO,GAAIuI,EAAS,GAAIiyC,EAAY,GAAI9mC,EAAa,GAAIxT,EAAY,GAErED,GAAS,EAAMs6C,EAAS,QAASE,EAAO,IAE5C,GAAuB,kBAAZJ,EAAsB,CAE7B,IAAIK,EAAWL,EAAQ3iD,QAAQ,MAC3BgjD,GAAY,IACZH,EAASF,EAAQpgD,UAAU,EAAGygD,EAAW,GACzCL,EAAUA,EAAQpgD,UAAUygD,EAAW,IAG3C,IAAIC,EAAWN,EAAQ3iD,QAAQ,MACb,IAAdijD,IACAA,EAAWN,EAAQlkD,QAEvB,IAAIykD,EAAkBP,EAAQ3iD,QAAQ,MACb,IAArBkjD,IACAA,EAAkBP,EAAQlkD,QAE9B6J,EAAOq6C,EAAQpgD,UAAU,EAAGzB,KAAKuC,IAAI4/C,EAAUC,IAC3CD,EAAWC,IAEXlnC,EAAagmC,GAAWW,EAAQpgD,UAAU0gD,EAAUC,KAExD,MAAMlmB,EAAcolB,GAAYO,EAAQpgD,UAAUzB,KAAKuC,IAAIs/C,EAAQlkD,OAAQykD,KAE3EF,EAAW16C,EAAKtI,QAAQ,KACpBgjD,GAAY,GACZz6C,EAAoB,UAAXs6C,GAAiC,QAAXA,EAC/BE,EAAOl/C,SAASyE,EAAK/F,UAAUygD,EAAW,GAAI,KAG9CA,EAAW16C,EAAK7J,OAEpB,MAAM0kD,EAAkB76C,EAAK6W,MAAM,EAAG6jC,GACtC,GAAsC,cAAlCG,EAAgBp/C,cAChB8M,EAAS,iBAER,GAAIsyC,EAAgB7kC,MAAM,KAAK7f,QAAU,EAC1CoS,EAASsyC,MAER,CAED,MAAMC,EAAS96C,EAAKtI,QAAQ,KAC5B8iD,EAAYx6C,EAAK/F,UAAU,EAAG6gD,GAAQr/C,cACtC8M,EAASvI,EAAK/F,UAAU6gD,EAAS,GAEjC56C,EAAYs6C,CAChB,CAEI,OAAQ9lB,IACRx0B,EAAYw0B,EAAY,MAEhC,CACA,MAAO,CACH10B,OACAy6C,OACAlyC,SACAiyC,YACAv6C,SACAs6C,SACA7mC,aACAxT,YAER,EAmBM66C,GAAa,mEAebC,GAAa,WAGf,IAAIC,EAAe,EAKnB,MAAMC,EAAgB,GACtB,OAAO,SAAUC,GACb,MAAMC,EAAgBD,IAAQF,EAE9B,IAAI/kD,EADJ+kD,EAAeE,EAEf,MAAME,EAAiB,IAAIhlD,MAAM,GACjC,IAAKH,EAAI,EAAGA,GAAK,EAAGA,IAChBmlD,EAAenlD,GAAK6kD,GAAWd,OAAOkB,EAAM,IAG5CA,EAAM3iD,KAAKC,MAAM0iD,EAAM,KAE3B,QAAe,IAARA,EAAW,4BAClB,IAAI5lD,EAAK8lD,EAAejgD,KAAK,IAC7B,GAAKggD,EAKA,CAGD,IAAKllD,EAAI,GAAIA,GAAK,GAA0B,KAArBglD,EAAchlD,GAAWA,IAC5CglD,EAAchlD,GAAK,EAEvBglD,EAAchlD,IAClB,MAXI,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAChBglD,EAAchlD,GAAKsC,KAAKC,MAAsB,GAAhBD,KAAKyN,UAW3C,IAAK/P,EAAI,EAAGA,EAAI,GAAIA,IAChBX,GAAMwlD,GAAWd,OAAOiB,EAAchlD,IAG1C,OADA,QAAqB,KAAdX,EAAGY,OAAe,oCAClBZ,CACX,CACH,CAzCkB;;;;;;;;;;;;;;;;;AA8DnB,MAAM+lD,GAOF,WAAAznD,CAAY6gB,EAAWqyB,EAAmBwU,EAAU7gB,GAChDjoC,KAAKiiB,UAAYA,EACjBjiB,KAAKs0C,kBAAoBA,EACzBt0C,KAAK8oD,SAAWA,EAChB9oD,KAAKioC,SAAWA,CACpB,CACA,OAAAoY,GACI,MAAM0I,EAAM/oD,KAAK8oD,SAASC,IAC1B,MAAuB,UAAnB/oD,KAAKiiB,UACE8mC,EAAIp/C,MAGJo/C,EAAI5L,OAAOxzC,KAE1B,CACA,YAAAq/C,GACI,OAAOhpD,KAAKiiB,SAChB,CACA,cAAA8+B,GACI,OAAO/gD,KAAKs0C,kBAAkByM,eAAe/gD,KACjD,CACA,QAAAiC,GACI,OAAQjC,KAAKqgD,UAAUp+C,WACnB,IACAjC,KAAKiiB,UACL,KACA,QAAUjiB,KAAK8oD,SAASG,YAChC,EAEJ,MAAMC,GACF,WAAA9nD,CAAYkzC,EAAmB5vC,EAAOkf,GAClC5jB,KAAKs0C,kBAAoBA,EACzBt0C,KAAK0E,MAAQA,EACb1E,KAAK4jB,KAAOA,CAChB,CACA,OAAAy8B,GACI,OAAOrgD,KAAK4jB,IAChB,CACA,YAAAolC,GACI,MAAO,QACX,CACA,cAAAjI,GACI,OAAO/gD,KAAKs0C,kBAAkByM,eAAe/gD,KACjD,CACA,QAAAiC,GACI,OAAOjC,KAAK4jB,KAAK3hB,WAAa,SAClC;;;;;;;;;;;;;;;;GAyBJ,MAAMknD,GACF,WAAA/nD,CAAYgoD,EAAkBC,GAC1BrpD,KAAKopD,iBAAmBA,EACxBppD,KAAKqpD,eAAiBA,CAC1B,CACA,OAAAC,CAAQC,EAAiBC,GACrBxpD,KAAKopD,iBAAiB5pD,KAAK,KAAM+pD,EAAiBC,EACtD,CACA,QAAAC,CAAS/kD,GAEL,OADA,QAAO1E,KAAK0pD,kBAAmB,gEACxB1pD,KAAKqpD,eAAe7pD,KAAK,KAAMkF,EAC1C,CACA,qBAAIglD,GACA,QAAS1pD,KAAKqpD,cAClB,CACA,OAAAzqB,CAAQrZ,GACJ,OAAQvlB,KAAKopD,mBAAqB7jC,EAAM6jC,uBACI78B,IAAvCvsB,KAAKopD,iBAAiBO,cACnB3pD,KAAKopD,iBAAiBO,eAClBpkC,EAAM6jC,iBAAiBO,cAC3B3pD,KAAKopD,iBAAiBjnC,UAAYoD,EAAM6jC,iBAAiBjnC,OACrE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgKJ,MAAMynC,GAIF,WAAAxoD,CAAYq1C,EAAO9sC,EAAO4gB,EAAcs/B,GACpC7pD,KAAKy2C,MAAQA,EACbz2C,KAAK2J,MAAQA,EACb3J,KAAKuqB,aAAeA,EACpBvqB,KAAK6pD,eAAiBA,CAC1B,CACA,OAAIroD,GACA,OAAIkjB,GAAY1kB,KAAK2J,OACV,KAGAoa,GAAY/jB,KAAK2J,MAEhC,CACA,OAAIo/C,GACA,OAAO,IAAIe,GAAc9pD,KAAKy2C,MAAOz2C,KAAK2J,MAC9C,CACA,oBAAI0gB,GACA,MAAMxjB,EAAM07B,GAA0BviC,KAAKuqB,cACrCznB,EAAKgE,EAAkBD,GAC7B,MAAc,OAAP/D,EAAc,UAAYA,CACrC,CAIA,gBAAI8mB,GACA,OAAO2Y,GAA0BviC,KAAKuqB,aAC1C,CACA,OAAAw/B,CAAQxkC,GAEJ,GADAA,GAAQ,QAAmBA,KACrBA,aAAiBqkC,IACnB,OAAO,EAEX,MAAMI,EAAWhqD,KAAKy2C,QAAUlxB,EAAMkxB,MAChCwT,EAAW3kC,GAAWtlB,KAAK2J,MAAO4b,EAAM5b,OACxCugD,EAAsBlqD,KAAKqqB,mBAAqB9E,EAAM8E,iBAC5D,OAAO2/B,GAAYC,GAAYC,CACnC,CACA,MAAAC,GACI,OAAOnqD,KAAKiC,UAChB,CACA,QAAAA,GACI,OAAOjC,KAAKy2C,MAAMx0C,WAAa+hB,GAAuBhkB,KAAK2J,MAC/D,EA+EJ,MAAMmgD,WAAsBF,GAExB,WAAAxoD,CAAYwgD,EAAMh+B,GACdf,MAAM++B,EAAMh+B,EAAM,IAAIud,IAAe,EACzC,CACA,UAAIgc,GACA,MAAMiN,EAAa/lC,GAAWrkB,KAAK2J,OACnC,OAAsB,OAAfygD,EACD,KACA,IAAIN,GAAc9pD,KAAKy2C,MAAO2T,EACxC,CACA,QAAIryB,GACA,IAAIgxB,EAAM/oD,KACV,MAAsB,OAAf+oD,EAAI5L,OACP4L,EAAMA,EAAI5L,OAEd,OAAO4L,CACX,EAgBJ,MAAMsB,GAOF,WAAAjpD,CAAYkpD,EAIZvB,EAAKwB,GACDvqD,KAAKsqD,MAAQA,EACbtqD,KAAK+oD,IAAMA,EACX/oD,KAAKuqD,OAASA,CAClB,CASA,YAAI32B,GAEA,OAAO5zB,KAAKsqD,MAAMt2B,cAAchE,KACpC,CAUA,OAAIxuB,GACA,OAAOxB,KAAK+oD,IAAIvnD,GACpB,CAEA,QAAIkV,GACA,OAAO1W,KAAKsqD,MAAMl1B,aACtB,CAaA,KAAAlP,CAAMtC,GACF,MAAMslB,EAAY,IAAI/lB,GAAKS,GACrB4mC,EAAWtkC,GAAMlmB,KAAK+oD,IAAKnlC,GACjC,OAAO,IAAIymC,GAAarqD,KAAKsqD,MAAM11B,SAASsU,GAAYshB,EAAU9zB,GACtE,CAKA,MAAA+zB,GACI,OAAQzqD,KAAKsqD,MAAM15B,SACvB,CAWA,SAAAq4B,GACI,OAAOjpD,KAAKsqD,MAAMt6B,KAAI,EAC1B,CAmBA,OAAAiU,CAAQ9a,GACJ,GAAInpB,KAAKsqD,MAAMv2B,aACX,OAAO,EAEX,MAAMkpB,EAAej9C,KAAKsqD,MAE1B,QAASrN,EAAa5nB,aAAar1B,KAAKuqD,QAAQ,CAAC/oD,EAAK0tB,IAC3C/F,EAAO,IAAIkhC,GAAan7B,EAAMhJ,GAAMlmB,KAAK+oD,IAAKvnD,GAAMk1B,MAEnE,CAQA,QAAA7B,CAASjR,GACL,MAAMslB,EAAY,IAAI/lB,GAAKS,GAC3B,OAAQ5jB,KAAKsqD,MAAM11B,SAASsU,GAAWtY,SAC3C,CAaA,WAAA85B,GACI,OAAI1qD,KAAKsqD,MAAMv2B,eAIH/zB,KAAKsqD,MAAM15B,SAE3B,CAIA,MAAAu5B,GACI,OAAOnqD,KAAKipD,WAChB,CAaA,GAAAj5B,GACI,OAAOhwB,KAAKsqD,MAAMt6B,KACtB,EAgBJ,SAAS+4B,GAAI4B,EAAI/mC,GAGb,OAFA+mC,GAAK,QAAmBA,GACxBA,EAAGC,iBAAiB,YACJr+B,IAAT3I,EAAqBsC,GAAMykC,EAAGE,MAAOjnC,GAAQ+mC,EAAGE,KAC3D,CA8CA,SAAS3kC,GAAMi3B,EAAQv5B,GAQnB,OAPAu5B,GAAS,QAAmBA,GACO,OAA/Bx5B,GAAaw5B,EAAOxzC,OACpB+1C,GAAuB,QAAS,OAAQ97B,GAAM,GAG9C47B,GAAmB,QAAS,OAAQ57B,GAAM,GAEvC,IAAIkmC,GAAc3M,EAAO1G,MAAOlyB,GAAU44B,EAAOxzC,MAAOia,GACnE,CAmCA,SAAS3c,GAAKk2C,EAAQ98C,GAClB88C,GAAS,QAAmBA,GAC5BwC,GAAqB,OAAQxC,EAAOxzC,OACpCi1C,GAAwB,OAAQv+C,EAAO88C,EAAOxzC,OAAO,GACrD,MAAM++C,EAAMhG,GAAevF,EAAO1G,OAC5Bz0C,EAAOumD,GAAWG,GAOlBoC,EAAmB5kC,GAAMi3B,EAAQn7C,GACjC+oD,EAAU7kC,GAAMi3B,EAAQn7C,GAC9B,IAAIgoB,EASJ,OAPIA,EADS,MAAT3pB,EACUkB,GAAIwpD,EAAS1qD,GAAO6K,MAAK,IAAM6/C,IAG/B1/C,QAAQC,QAAQy/C,GAE9BD,EAAiB5/C,KAAO8e,EAAQ9e,KAAK3G,KAAKylB,GAC1C8gC,EAAiB3+C,MAAQ6d,EAAQ9e,KAAK3G,KAAKylB,OAASuC,GAC7Cu+B,CACX,CAeA,SAAS/oD,GAAOgnD,GAEZ,OADApJ,GAAqB,SAAUoJ,EAAIp/C,OAC5BpI,GAAIwnD,EAAK,KACpB,CA8BA,SAASxnD,GAAIwnD,EAAK1oD,GACd0oD,GAAM,QAAmBA,GACzBpJ,GAAqB,MAAOoJ,EAAIp/C,OAChCi1C,GAAwB,MAAOv+C,EAAO0oD,EAAIp/C,OAAO,GACjD,MAAM6f,EAAW,IAAI,KAGrB,OAFA45B,GAAoB2F,EAAItS,MAAOsS,EAAIp/C,MAAOtJ,EAC5B,KAAMmpB,EAASwhC,cAAa,UACnCxhC,EAASQ,OACpB,CAkFA,SAAS9mB,GAAO6lD,EAAKh6B,GACjBuwB,GAA6B,SAAUvwB,EAAQg6B,EAAIp/C,OAAO,GAC1D,MAAM6f,EAAW,IAAI,KAErB,OADAo6B,GAAWmF,EAAItS,MAAOsS,EAAIp/C,MAAOolB,EAAQvF,EAASwhC,cAAa,UACxDxhC,EAASQ,OACpB,CAoBA,MAAMihC,GACF,WAAA7pD,CAAY8pD,GACRlrD,KAAKkrD,gBAAkBA,CAC3B,CACA,UAAAnjB,CAAW9lB,GACP,MAAqB,UAAdA,CACX,CACA,WAAA+lB,CAAYV,EAAQ79B,GAChB,MAAMqgB,EAAQrgB,EAAM8gB,aAAaa,WACjC,OAAO,IAAIy9B,GAAU,QAAS7oD,KAAM,IAAIqqD,GAAa/iB,EAAOxK,aAAc,IAAIgtB,GAAcrgD,EAAMgtC,MAAOhtC,EAAME,OAAQmgB,GAC3H,CACA,cAAAi3B,CAAez+B,GACX,MAAiC,WAA7BA,EAAU0mC,eACH,IAAMhpD,KAAKkrD,gBAAgBzB,SAASnnC,EAAU5d,OAG9C,IAAM1E,KAAKkrD,gBAAgB5B,QAAQhnC,EAAUwmC,SAAU,KAEtE,CACA,iBAAAnU,CAAkBjwC,EAAOkf,GACrB,OAAI5jB,KAAKkrD,gBAAgBxB,kBACd,IAAIR,GAAYlpD,KAAM0E,EAAOkf,GAG7B,IAEf,CACA,OAAAgb,CAAQrZ,GACJ,OAAMA,aAAiB0lC,MAGb1lC,EAAM2lC,kBAAoBlrD,KAAKkrD,iBAK9B3lC,EAAM2lC,gBAAgBtsB,QAAQ5+B,KAAKkrD,iBAElD,CACA,cAAApW,GACI,OAAgC,OAAzB90C,KAAKkrD,eAChB,EAKJ,MAAMC,GACF,WAAA/pD,CAAY6gB,EAAWipC,GACnBlrD,KAAKiiB,UAAYA,EACjBjiB,KAAKkrD,gBAAkBA,CAC3B,CACA,UAAAnjB,CAAW9lB,GACP,IAAImpC,EAA6B,mBAAdnpC,EAAiC,cAAgBA,EAGpE,OAFAmpC,EACqB,qBAAjBA,EAAsC,gBAAkBA,EACrDprD,KAAKiiB,YAAcmpC,CAC9B,CACA,iBAAAzW,CAAkBjwC,EAAOkf,GACrB,OAAI5jB,KAAKkrD,gBAAgBxB,kBACd,IAAIR,GAAYlpD,KAAM0E,EAAOkf,GAG7B,IAEf,CACA,WAAAokB,CAAYV,EAAQ79B,IAChB,QAA2B,MAApB69B,EAAO3S,UAAmB,yCACjC,MAAM61B,EAAWtkC,GAAM,IAAI4jC,GAAcrgD,EAAMgtC,MAAOhtC,EAAME,OAAQ29B,EAAO3S,WACrE7K,EAAQrgB,EAAM8gB,aAAaa,WACjC,OAAO,IAAIy9B,GAAUvhB,EAAO74B,KAAMzO,KAAM,IAAIqqD,GAAa/iB,EAAOxK,aAAc0tB,EAAU1gC,GAAQwd,EAAOW,SAC3G,CACA,cAAA8Y,CAAez+B,GACX,MAAiC,WAA7BA,EAAU0mC,eACH,IAAMhpD,KAAKkrD,gBAAgBzB,SAASnnC,EAAU5d,OAG9C,IAAM1E,KAAKkrD,gBAAgB5B,QAAQhnC,EAAUwmC,SAAUxmC,EAAU2lB,SAEhF,CACA,OAAArJ,CAAQrZ,GACJ,OAAIA,aAAiB4lC,KACTnrD,KAAKiiB,YAAcsD,EAAMtD,aAC3BjiB,KAAKkrD,kBACF3lC,EAAM2lC,iBACPlrD,KAAKkrD,gBAAgBtsB,QAAQrZ,EAAM2lC,kBAGnD,CACA,cAAApW,GACI,QAAS90C,KAAKkrD,eAClB,EAEJ,SAASjlD,GAAiBwD,EAAOwY,EAAWlS,EAAUs7C,EAA+BryC,GACjF,IAAIqwC,EAQJ,GAP6C,kBAAlCgC,IACPhC,OAAiB98B,EACjBvT,EAAUqyC,GAE+B,oBAAlCA,IACPhC,EAAiBgC,GAEjBryC,GAAWA,EAAQsyC,SAAU,CAC7B,MAAM3B,EAAe55C,EACfw7C,EAAe,CAACC,EAAchC,KAChCrF,GAAgC16C,EAAMgtC,MAAOhtC,EAAOgiD,GACpD9B,EAAa6B,EAAchC,EAAkB,EAEjD+B,EAAa5B,aAAe55C,EAAS45C,aACrC4B,EAAappC,QAAUpS,EAASoS,QAChCpS,EAAWw7C,CACf,CACA,MAAML,EAAkB,IAAI/B,GAAgBp5C,EAAUs5C,QAAkB98B,GAClEk/B,EAA0B,UAAdxpC,EACZ,IAAIgpC,GAAuBC,GAC3B,IAAIC,GAAuBlpC,EAAWipC,GAE5C,OADAhH,GAA6Bz6C,EAAMgtC,MAAOhtC,EAAOgiD,GAC1C,IAAMtH,GAAgC16C,EAAMgtC,MAAOhtC,EAAOgiD,EACrE,CACA,SAASnC,GAAQ7/C,EAAOsG,EAAUs7C,EAA+BryC,GAC7D,OAAO/S,GAAiBwD,EAAO,QAASsG,EAAUs7C,EAA+BryC,EACrF,CAgeAy8B,GAAiCqU,IACjC/S,GAAgC+S;;;;;;;;;;;;;;;;;AA0BhC,MAAM4B,GAAsC,kCAItCC,GAAQ,CAAC,EAIf,IAAIC,IAAgB,EAIpB,SAASC,GAAiCjK,EAAMr0C,EAAMy6C,EAAM8D,GACxDlK,EAAK5kC,UAAY,IAAI1P,GAAS,GAAGC,KAAQy6C,KAC3B,EAAOpG,EAAK5kC,UAAUvP,UAAWm0C,EAAK5kC,UAAUtP,cAAek0C,EAAK5kC,UAAUrP,UAAWi0C,EAAK5kC,UAAUpP,eAAgBg0C,EAAK5kC,UAAUnP,+BAChI,GACjBi+C,IACAlK,EAAKr6B,mBAAqBukC,EAElC,CAKA,SAASC,GAA2BC,EAAKC,EAAcnhD,EAAkBwM,EAAK3J,GAC1E,IAAIu+C,EAAQ50C,GAAO00C,EAAIhzC,QAAQmzC,iBACjB5/B,IAAV2/B,IACKF,EAAIhzC,QAAQozC,WACbznD,EAAM,kHAGVL,EAAI,kCAAmC0nD,EAAIhzC,QAAQozC,WACnDF,EAAQ,GAAGF,EAAIhzC,QAAQozC,yCAE3B,IAEIC,EACAC,EAHAzM,EAAY8H,GAAcuE,EAAOv+C,GACjCY,EAAWsxC,EAAUtxC,SAGF,qBAAZ4K,UACPmzC,EAAiB,oDAAYZ,KAE7BY,GACAD,GAAa,EACbH,EAAQ,UAAUI,QAAqB/9C,EAASd,YAChDoyC,EAAY8H,GAAcuE,EAAOv+C,GACjCY,EAAWsxC,EAAUtxC,UAGrB89C,GAAcxM,EAAUtxC,SAASf,OAErC,MAAM++C,EAAoB5+C,GAAa0+C,EACjC,IAAI7/C,EAAsBA,EAAsBE,OAChD,IAAIb,EAA0BmgD,EAAIhqD,KAAMgqD,EAAIhzC,QAASizC,GAC3DrM,GAAY,gCAAiCC,GACxCn7B,GAAYm7B,EAAUj8B,OACvBjf,EAAM,4FAGV,MAAMi9C,EAAO4K,GAAsBj+C,EAAUy9C,EAAKO,EAAmB,IAAI3hD,EAAsBohD,EAAIhqD,KAAM8I,IACzG,OAAO,IAAI2hD,GAAS7K,EAAMoK,EAC9B,CAKA,SAASU,GAAsB9K,EAAM+K,GACjC,MAAMC,EAAWjB,GAAMgB,GAElBC,GAAYA,EAAShL,EAAKpgD,OAASogD,GACpCj9C,EAAM,YAAYgoD,KAAW/K,EAAK5kC,wCAEtConC,GAAcxC,UACPgL,EAAShL,EAAKpgD,IACzB,CAQA,SAASgrD,GAAsBj+C,EAAUy9C,EAAKO,EAAmBzhD,GAC7D,IAAI8hD,EAAWjB,GAAMK,EAAIhqD,MACpB4qD,IACDA,EAAW,CAAC,EACZjB,GAAMK,EAAIhqD,MAAQ4qD,GAEtB,IAAIhL,EAAOgL,EAASr+C,EAASF,eAM7B,OALIuzC,GACAj9C,EAAM,2HAEVi9C,EAAO,IAAIV,GAAK3yC,EAAUq9C,GAAeW,EAAmBzhD,GAC5D8hD,EAASr+C,EAASF,eAAiBuzC,EAC5BA,CACX,CAUA,MAAM6K,GAEF,WAAArrD,CAAYyrD,EAEZb,GACIhsD,KAAK6sD,cAAgBA,EACrB7sD,KAAKgsD,IAAMA,EAEXhsD,KAAK,QAAU,WAEfA,KAAK8sD,kBAAmB,CAC5B,CACA,SAAIrW,GAKA,OAJKz2C,KAAK8sD,mBACNnL,GAAU3hD,KAAK6sD,cAAe7sD,KAAKgsD,IAAIhzC,QAAQ6oC,MAAO7hD,KAAKgsD,IAAIhzC,QAAQ,iCACvEhZ,KAAK8sD,kBAAmB,GAErB9sD,KAAK6sD,aAChB,CACA,SAAIhC,GAIA,OAHK7qD,KAAK+sD,gBACN/sD,KAAK+sD,cAAgB,IAAIjD,GAAc9pD,KAAKy2C,MAAO/yB,OAEhD1jB,KAAK+sD,aAChB,CACA,OAAAC,GAMI,OAL2B,OAAvBhtD,KAAK+sD,gBACLL,GAAsB1sD,KAAKy2C,MAAOz2C,KAAKgsD,IAAIhqD,MAC3ChC,KAAK6sD,cAAgB,KACrB7sD,KAAK+sD,cAAgB,MAElB1hD,QAAQC,SACnB,CACA,gBAAAs/C,CAAiBqC,GACc,OAAvBjtD,KAAK+sD,eACLpoD,EAAM,eAAiBsoD,EAAU,0BAEzC,EAkCJ,SAASC,GAAYlB,GAAM,UAAU10C,GACjC,MAAMqzC,GAAK,QAAaqB,EAAK,YAAYhhD,aAAa,CAClDmiD,WAAY71C,IAEhB,IAAKqzC,EAAGmC,iBAAkB,CACtB,MAAMM,GAAW,QAAkC,YAC/CA,GACAC,GAAwB1C,KAAOyC,EAEvC,CACA,OAAOzC,CACX,CAYA,SAAS0C,GAAwB1C,EAAIp9C,EAAMy6C,EAAMhvC,EAAU,CAAC,GACxD2xC,GAAK,QAAmBA,GACxBA,EAAGC,iBAAiB,eAChBD,EAAGmC,kBACHnoD,EAAM,0EAEV,MAAMi9C,EAAO+I,EAAGkC,cAChB,IAAIf,EACJ,GAAIlK,EAAK5kC,UAAUrP,UACXqL,EAAQs0C,eACR3oD,EAAM,sJAEVmnD,EAAgB,IAAIt/C,EAAsBA,EAAsBE,YAE/D,GAAIsM,EAAQs0C,cAAe,CAC5B,MAAMhsC,EAAyC,kBAA1BtI,EAAQs0C,cACvBt0C,EAAQs0C,eACR,QAAoBt0C,EAAQs0C,cAAe3C,EAAGqB,IAAIhzC,QAAQozC,WAChEN,EAAgB,IAAIt/C,EAAsB8U,EAC9C,CAEAuqC,GAAiCjK,EAAMr0C,EAAMy6C,EAAM8D,EACvD;;;;;;;;;;;;;;;;;AA+DA,SAASyB,GAAiBC,GACtBtsD,EAAc,OACd,QAAmB,IAAI,KAAU,YAAY,CAACuqD,GAAagC,mBAAoBn2C,MAC3E,MAAM00C,EAAMP,EAAUiC,YAAY,OAAO1iD,eACnCihD,EAAeR,EAAUiC,YAAY,iBACrC5iD,EAAmB2gD,EAAUiC,YAAY,sBAC/C,OAAO3B,GAA2BC,EAAKC,EAAcnhD,EAAkBwM,EAAI,GAC5E,UAAqCq2C,sBAAqB,KAC7D,QAAgB,EAAM3sD,EAASwsD,IAE/B,QAAgB,EAAMxsD,EAAS,UACnC;;;;;;;;;;;;;;;;GAgKAmmB,GAAqBymC,UAAUC,aAAe,SAAU5sC,EAAYC,GAChElhB,KAAK8e,YAAY,IAAK,CAAE4K,EAAGzI,GAAcC,EAC7C,EAEAiG,GAAqBymC,UAAUE,KAAO,SAAU3oD,EAAM4oD,GAClD/tD,KAAK8e,YAAY,OAAQ,CAAEhI,EAAG3R,GAAQ4oD,EAC1C,EAgCAR,I","sources":["webpack://research-task-manager/./node_modules/core-js/internals/iterator-map.js","webpack://research-task-manager/./node_modules/core-js/modules/es.iterator.map.js","webpack://research-task-manager/./node_modules/@firebase/database/dist/index.esm2017.js"],"sourcesContent":["'use strict';\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar createIteratorProxy = require('../internals/iterator-create-proxy');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar IteratorProxy = createIteratorProxy(function () {\n  var iterator = this.iterator;\n  var result = anObject(call(this.next, iterator));\n  var done = this.done = !!result.done;\n  if (!done) return callWithSafeIterationClosing(iterator, this.mapper, [result.value, this.counter++], true);\n});\n\n// `Iterator.prototype.map` method\n// https://github.com/tc39/proposal-iterator-helpers\nmodule.exports = function map(mapper) {\n  anObject(this);\n  aCallable(mapper);\n  return new IteratorProxy(getIteratorDirect(this), {\n    mapper: mapper\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar map = require('../internals/iterator-map');\nvar IS_PURE = require('../internals/is-pure');\n\n// `Iterator.prototype.map` method\n// https://tc39.es/ecma262/#sec-iterator.prototype.map\n$({ target: 'Iterator', proto: true, real: true, forced: IS_PURE }, {\n  map: map\n});\n","import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.14.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\r\n    if (typeof timeout === 'number' &&\r\n        // @ts-ignore Is only defined in Deno environments.\r\n        typeof Deno !== 'undefined' &&\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno['unrefTimer']) {\r\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\r\n        Deno.unrefTimer(timeout);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    }\r\n    else if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this.isUsingEmulator = isUsingEmulator;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\r\n            this.myIFrame.doc.body.textContent = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                const handshakePayload = Object.assign({}, payload);\r\n                if (this.repoInfo_.isUsingEmulator) {\r\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\r\n                    handshakePayload.h = this.repoInfo_.host;\r\n                }\r\n                this.onHandshake_(handshakePayload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        const isWithinStart = this.startIsInclusive_\r\n            ? this.index_.compare(this.getStartPost(), node) <= 0\r\n            : this.index_.compare(this.getStartPost(), node) < 0;\r\n        const isWithinEnd = this.endIsInclusive_\r\n            ? this.index_.compare(node, this.getEndPost()) <= 0\r\n            : this.index_.compare(node, this.getEndPost()) < 0;\r\n        return isWithinStart && isWithinEnd;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\r\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\r\n        this.withinStartPost = (node) => {\r\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\r\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.withinEndPost = (node) => {\r\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\r\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\r\n        };\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n        this.startIsInclusive_ = !params.startAfterSet_;\r\n        this.endIsInclusive_ = !params.endBeforeSet_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    if (!this.withinDirectionalStart(next)) {\r\n                        // if we have not reached the start, skip to the next element\r\n                        continue;\r\n                    }\r\n                    else if (!this.withinDirectionalEnd(next)) {\r\n                        // if we have reached the end, stop adding elements\r\n                        break;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    const inRange = count < this.limit_ &&\r\n                        this.withinDirectionalStart(next) &&\r\n                        this.withinDirectionalEnd(next);\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.startAfterSet_ = this.startAfterSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.endBeforeSet_ = this.endBeforeSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX || !!key) {\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        const startParam = queryParams.startAfterSet_\r\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\r\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\r\n        qs[startParam] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[startParam] += ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        const endParam = queryParams.endBeforeSet_\r\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\r\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\r\n        qs[endParam] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[endParam] += ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\r\n            !queryParams.startAfterSet_;\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\r\n            !queryParams.endBeforeSet_;\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === null;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        if (!skipListenerDedup) {\r\n            /**\r\n             * We may have just removed one of many listeners and can short-circuit this whole process\r\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n             * properly set up.\r\n             */\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            const removingDefault = -1 !==\r\n                removed.findIndex(query => {\r\n                    return query._queryParams.loadsAllData();\r\n                });\r\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n            if (removingDefault && !covered) {\r\n                const subtree = syncTree.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (let i = 0; i < newViews.length; ++i) {\r\n                        const view = newViews[i], newQuery = view.query;\r\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                // Otherwise there's nothing below us, so nothing we need to start listening on\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    const defaultTag = null;\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach((queryToRemove) => {\r\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query, eventRegistration) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        /**\r\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n         * Add an event registration,\r\n         * Update data at the path,\r\n         * Raise any events,\r\n         * Cleanup the SyncTree\r\n         */\r\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\r\n        let events;\r\n        if (query._queryParams.loadsAllData()) {\r\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        }\r\n        else {\r\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\r\n        }\r\n        /*\r\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n         * ensure the corresponding child events will get fired.\r\n         */\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\r\n        return node;\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* TransactionStatus.RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* TransactionStatus.SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* TransactionStatus.RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    const callbackContext = new CallbackContext(() => { });\r\n    const container = new ValueEventRegistration(callbackContext);\r\n    return repoGetValue(query._repo, query, container).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \r\n    /*isUsingEmulator=*/ true);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    const db = _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n    if (!db._instanceStarted) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('database');\r\n        if (emulator) {\r\n            connectDatabaseEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n"],"names":["call","aCallable","anObject","getIteratorDirect","createIteratorProxy","callWithSafeIterationClosing","IteratorProxy","iterator","this","result","next","done","mapper","value","counter","module","exports","$","map","IS_PURE","target","proto","real","forced","version","SDK_VERSION","setSDKVersion","DOMStorageWrapper","constructor","domStorage_","prefix_","set","key","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","handshakePayload","Object","assign","h","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","super","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","request","p","q","_queryObject","outstandingGet","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","isEmpty","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","newIndex","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","inRange","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","tree","forEach","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePathString","argumentName","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","repoLog","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","transaction","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","applyLocally","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","thennablePushRef","pushRef","wrapCallback","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","getDatabase","identifier","emulator","connectDatabaseEmulator","mockUserToken","registerDatabase","variant","instanceIdentifier","getProvider","setMultipleInstances","prototype","simpleListen","echo","onEcho"],"sourceRoot":""}