{"version":3,"file":"js/904.4893f5a0.js","mappings":"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","sources":["webpack://research-task-manager/./node_modules/@firebase/storage/dist/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\r\n    // PR: https://github.com/node-fetch/node-fetch/pull/1664\r\n    return typeof Blob !== 'undefined' && !isNode();\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.11.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n"],"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","constructor","code","message","status_","super","prependCode","this","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","StorageErrorCode","ErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","undefined","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","getDownloadUrl","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskState","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_finishPromise","observers","triggered","bind","toCall","resume","pause","Reference","_service","_newRef","root","parent","_throwIfRoot","uploadBytesResumable$1","getDownloadURL$1","makeRequestWithTokens","deleteObject$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","reference","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","port","options","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","add","delete","STORAGE_TYPE","uploadBytesResumable","getDownloadURL","deleteObject","getStorage","bucketUrl","storageProvider","storageInstance","identifier","emulator","connectStorageEmulator","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances"],"sourceRoot":""}